{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nThis is a multilingual recruitment and candidate management platform built for the first phase of a job application system. The application allows candidates to browse job listings, submit applications with document uploads, and track their application status. The platform supports French, English, and Portuguese interfaces and focuses on providing a streamlined experience for both job seekers and HR personnel.\n\nThe system is designed around a full-stack TypeScript architecture with React frontend and Express backend, utilizing modern web technologies for a responsive and scalable recruitment solution.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built with React 18 using TypeScript and follows a component-based architecture:\n\n- **UI Framework**: Utilizes shadcn/ui components built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Internationalization**: Custom i18n system supporting French, English, and Portuguese\n\n### Backend Architecture\nThe server-side follows a RESTful API pattern with Express.js:\n\n- **Framework**: Express.js with TypeScript for type safety\n- **Authentication**: Replit Authentication with OpenID Connect integration\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **File Storage**: Google Cloud Storage integration with custom ACL system\n- **API Design**: RESTful endpoints with proper HTTP status codes and error handling\n\n### Data Layer\nThe application uses a hybrid storage approach:\n\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Well-defined tables for users, jobs, applications, and sessions\n- **Storage Strategy**: In-memory storage for development with database fallback for production\n- **Data Validation**: Zod schemas shared between frontend and backend for consistency\n\n### File Management System\nCustom object storage service with ACL-based permissions:\n\n- **Storage Backend**: Google Cloud Storage with Replit sidecar integration\n- **Upload Strategy**: Uppy.js for frontend file uploads with dashboard interface\n- **Access Control**: Custom ACL system with group-based permissions\n- **File Types**: Support for CV, cover letters, and other application documents\n\n### Authentication & Authorization\nReplit-based authentication with role-based access:\n\n- **Identity Provider**: Replit OpenID Connect\n- **Session Strategy**: Server-side sessions stored in PostgreSQL\n- **User Management**: Automatic user creation/update from OAuth claims\n- **Access Control**: Route-level authentication middleware\n\n### Development & Build Process\nModern development toolchain with hot reloading:\n\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Development**: Hot module replacement with error overlay\n- **Production**: ESBuild bundling for server code, Vite for client assets\n- **Type Checking**: Strict TypeScript configuration across all layers\n\n## External Dependencies\n\n### Cloud Services\n- **Replit Authentication**: OpenID Connect provider for user authentication\n- **Google Cloud Storage**: Object storage for file uploads and document management\n- **Neon Database**: PostgreSQL database hosting (configured via DATABASE_URL)\n\n### Core Libraries\n- **UI Components**: Radix UI primitives with shadcn/ui component system\n- **State Management**: TanStack Query for server state and caching\n- **Form Handling**: React Hook Form with Hookform Resolvers for validation\n- **Schema Validation**: Zod for runtime type checking and form validation\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **File Uploads**: Uppy ecosystem (core, dashboard, AWS S3 plugin)\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Development Experience**: Replit plugins for cartographer and runtime error handling","size_bytes":4376},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/contractService.ts":{"content":"import { \n  Contract, \n  InsertContract, \n  Employee, \n  Application,\n  ContractAmendment,\n  InsertAmendment \n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\n\nexport class ContractService {\n  constructor(private storage: IStorage) {}\n\n  /**\n   * Génère automatiquement un contrat quand un candidat est accepté\n   */\n  async generateContractFromApplication(applicationId: number, contractData: {\n    contractType: string;\n    startDate: string;\n    baseSalary: number;\n    workingHours?: number;\n    vacationDays?: number;\n  }): Promise<Contract> {\n    try {\n      // Récupérer la candidature\n      const application = await this.storage.getApplication(applicationId);\n      if (!application) {\n        throw new Error(\"Application not found\");\n      }\n\n      // Récupérer l'utilisateur candidat\n      const user = await this.storage.getUser(application.userId);\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      // Créer l'employé si il n'existe pas déjà\n      let employee = await this.storage.getEmployeeByUserId(application.userId);\n      \n      if (!employee) {\n        const job = await this.storage.getJob(application.jobId);\n        if (!job) {\n          throw new Error(\"Job not found\");\n        }\n\n        // Générer un numéro d'employé unique\n        const employeeNumber = `EMP${Date.now()}`;\n\n        employee = await this.storage.createEmployee({\n          userId: application.userId,\n          employeeNumber,\n          position: job.title,\n          department: \"Non défini\",\n          startDate: contractData.startDate,\n          status: \"active\"\n        });\n      }\n\n      // Calculer la période d'essai (3 mois par défaut)\n      const startDate = new Date(contractData.startDate);\n      const trialPeriodEnd = new Date(startDate);\n      trialPeriodEnd.setMonth(trialPeriodEnd.getMonth() + 3);\n\n      // Créer le contrat\n      const contract = await this.storage.createContract({\n        employeeId: employee.id,\n        applicationId: applicationId,\n        contractType: contractData.contractType,\n        startDate: contractData.startDate,\n        endDate: contractData.contractType === \"CDD\" ? undefined : null, // À définir pour les CDD\n        trialPeriodEnd: trialPeriodEnd.toISOString().split('T')[0],\n        baseSalary: contractData.baseSalary.toString(),\n        currency: \"EUR\",\n        workingHours: contractData.workingHours || 35,\n        vacationDays: contractData.vacationDays || 25,\n        signatureStatus: \"pending\",\n        status: \"draft\"\n      });\n\n      // Mettre à jour le statut de la candidature\n      await this.storage.updateApplication(applicationId, {\n        status: \"contract_generated\"\n      });\n\n      return contract;\n    } catch (error) {\n      throw new Error(`Failed to generate contract: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Crée un avenant au contrat\n   */\n  async createAmendment(contractId: number, amendmentData: {\n    amendmentType: string;\n    description: string;\n    effectiveDate: string;\n    previousValue?: string;\n    newValue: string;\n    createdBy: string;\n  }): Promise<ContractAmendment> {\n    try {\n      const contract = await this.storage.getContract(contractId);\n      if (!contract) {\n        throw new Error(\"Contract not found\");\n      }\n\n      const amendment = await this.storage.createAmendment({\n        contractId,\n        amendmentType: amendmentData.amendmentType,\n        description: amendmentData.description,\n        effectiveDate: amendmentData.effectiveDate,\n        previousValue: amendmentData.previousValue || null,\n        newValue: amendmentData.newValue,\n        signatureStatus: \"pending\",\n        createdBy: amendmentData.createdBy\n      });\n\n      return amendment;\n    } catch (error) {\n      throw new Error(`Failed to create amendment: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Valide et active un contrat signé\n   */\n  async activateContract(contractId: number): Promise<Contract> {\n    try {\n      const contract = await this.storage.getContract(contractId);\n      if (!contract) {\n        throw new Error(\"Contract not found\");\n      }\n\n      if (contract.signatureStatus !== \"signed\") {\n        throw new Error(\"Contract must be signed before activation\");\n      }\n\n      const updatedContract = await this.storage.updateContract(contractId, {\n        status: \"active\",\n        signedAt: new Date()\n      });\n\n      return updatedContract;\n    } catch (error) {\n      throw new Error(`Failed to activate contract: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Termine un contrat\n   */\n  async terminateContract(contractId: number, endDate: string, reason?: string): Promise<Contract> {\n    try {\n      const contract = await this.storage.getContract(contractId);\n      if (!contract) {\n        throw new Error(\"Contract not found\");\n      }\n\n      const updatedContract = await this.storage.updateContract(contractId, {\n        status: \"terminated\",\n        endDate,\n        notes: reason ? `${contract.notes || ''}\\nTermination reason: ${reason}` : contract.notes\n      });\n\n      // Mettre à jour le statut de l'employé\n      const employee = await this.storage.getEmployee(contract.employeeId);\n      if (employee) {\n        await this.storage.updateEmployee(contract.employeeId, {\n          status: \"inactive\",\n          endDate\n        });\n      }\n\n      return updatedContract;\n    } catch (error) {\n      throw new Error(`Failed to terminate contract: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Récupère les contrats en attente de signature\n   */\n  async getPendingContracts(): Promise<Contract[]> {\n    try {\n      const allContracts = await this.storage.getActiveContracts();\n      return allContracts.filter(contract => \n        contract.signatureStatus === \"pending\" && \n        contract.status === \"draft\"\n      );\n    } catch (error) {\n      throw new Error(`Failed to get pending contracts: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Récupère les contrats expirant bientôt\n   */\n  async getExpiringContracts(daysAhead: number = 30): Promise<Contract[]> {\n    try {\n      const allContracts = await this.storage.getActiveContracts();\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + daysAhead);\n\n      return allContracts.filter(contract => {\n        if (!contract.endDate || contract.status !== \"active\") return false;\n        \n        const endDate = new Date(contract.endDate);\n        return endDate <= futureDate && endDate > new Date();\n      });\n    } catch (error) {\n      throw new Error(`Failed to get expiring contracts: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}","size_bytes":6851},"server/hrService.ts":{"content":"import {\n  Payroll,\n  InsertPayroll,\n  LeaveRequest,\n  InsertLeaveRequest,\n  LeaveBalance,\n  HrRequest,\n  InsertHrRequest,\n  Employee\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\n\nexport class HRService {\n  constructor(private storage: IStorage) {}\n\n  /**\n   * Calcule et crée une fiche de paie\n   */\n  async generatePayroll(employeeId: number, period: string, payrollData: {\n    baseSalary: number;\n    bonuses?: number;\n    overtime?: number;\n    absenceDays?: number;\n    createdBy: string;\n  }): Promise<Payroll> {\n    try {\n      const employee = await this.storage.getEmployee(employeeId);\n      if (!employee) {\n        throw new Error(\"Employee not found\");\n      }\n\n      // Calcul des charges sociales (approximation 22%)\n      const socialCharges = payrollData.baseSalary * 0.22;\n      \n      // Calcul des impôts (approximation 20%)\n      const taxes = (payrollData.baseSalary + (payrollData.bonuses || 0) + (payrollData.overtime || 0)) * 0.20;\n      \n      // Déduction pour jours d'absence\n      const workingDays = 22; // jours ouvrés moyens par mois\n      const absenceDeduction = payrollData.absenceDays ? \n        (payrollData.baseSalary / workingDays) * payrollData.absenceDays : 0;\n\n      // Calcul du salaire net\n      const grossSalary = payrollData.baseSalary + (payrollData.bonuses || 0) + (payrollData.overtime || 0);\n      const totalDeductions = socialCharges + taxes + absenceDeduction;\n      const netSalary = grossSalary - totalDeductions;\n\n      const payroll = await this.storage.createPayroll({\n        employeeId,\n        period,\n        baseSalary: payrollData.baseSalary.toString(),\n        bonuses: (payrollData.bonuses || 0).toString(),\n        overtime: (payrollData.overtime || 0).toString(),\n        deductions: absenceDeduction.toString(),\n        socialCharges: socialCharges.toString(),\n        taxes: taxes.toString(),\n        netSalary: netSalary.toString(),\n        workingDays: 22,\n        absenceDays: payrollData.absenceDays || 0,\n        status: \"draft\",\n        createdBy: payrollData.createdBy\n      });\n\n      return payroll;\n    } catch (error) {\n      throw new Error(`Failed to generate payroll: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Traite une demande de congés\n   */\n  async processLeaveRequest(employeeId: number, leaveData: {\n    leaveType: string;\n    startDate: string;\n    endDate: string;\n    reason?: string;\n    attachmentPath?: string;\n  }): Promise<LeaveRequest> {\n    try {\n      const employee = await this.storage.getEmployee(employeeId);\n      if (!employee) {\n        throw new Error(\"Employee not found\");\n      }\n\n      // Calculer le nombre de jours\n      const start = new Date(leaveData.startDate);\n      const end = new Date(leaveData.endDate);\n      const timeDiff = end.getTime() - start.getTime();\n      const totalDays = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;\n\n      // Vérifier le solde de congés si nécessaire\n      if (leaveData.leaveType === \"vacation\") {\n        const currentYear = new Date().getFullYear();\n        const balances = await this.storage.getLeaveBalance(employeeId, currentYear);\n        const vacationBalance = balances.find(b => b.leaveType === \"vacation\");\n        \n        if (vacationBalance && vacationBalance.remainingDays < totalDays) {\n          throw new Error(\"Insufficient vacation days balance\");\n        }\n      }\n\n      const leaveRequest = await this.storage.createLeaveRequest({\n        employeeId,\n        leaveType: leaveData.leaveType,\n        startDate: leaveData.startDate,\n        endDate: leaveData.endDate,\n        totalDays,\n        reason: leaveData.reason || null,\n        status: \"pending\",\n        attachmentPath: leaveData.attachmentPath || null\n      });\n\n      return leaveRequest;\n    } catch (error) {\n      throw new Error(`Failed to process leave request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Approuve une demande de congés\n   */\n  async approveLeaveRequest(requestId: number, approvedBy: string): Promise<LeaveRequest> {\n    try {\n      const request = await this.storage.getLeaveRequest(requestId);\n      if (!request) {\n        throw new Error(\"Leave request not found\");\n      }\n\n      const updatedRequest = await this.storage.updateLeaveRequest(requestId, {\n        status: \"approved\",\n        approvedBy,\n        approvedAt: new Date()\n      });\n\n      // Mettre à jour le solde de congés\n      if (request.leaveType === \"vacation\") {\n        const currentYear = new Date().getFullYear();\n        await this.storage.updateLeaveBalance(\n          request.employeeId,\n          currentYear,\n          request.leaveType,\n          request.totalDays\n        );\n      }\n\n      return updatedRequest;\n    } catch (error) {\n      throw new Error(`Failed to approve leave request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Refuse une demande de congés\n   */\n  async rejectLeaveRequest(requestId: number, approvedBy: string, reason: string): Promise<LeaveRequest> {\n    try {\n      const request = await this.storage.getLeaveRequest(requestId);\n      if (!request) {\n        throw new Error(\"Leave request not found\");\n      }\n\n      const updatedRequest = await this.storage.updateLeaveRequest(requestId, {\n        status: \"rejected\",\n        approvedBy,\n        approvedAt: new Date(),\n        rejectionReason: reason\n      });\n\n      return updatedRequest;\n    } catch (error) {\n      throw new Error(`Failed to reject leave request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Crée une demande interne RH\n   */\n  async createHrRequest(employeeId: number, requestData: {\n    requestType: string;\n    title: string;\n    description: string;\n    priority?: string;\n    attachmentPath?: string;\n  }): Promise<HrRequest> {\n    try {\n      const employee = await this.storage.getEmployee(employeeId);\n      if (!employee) {\n        throw new Error(\"Employee not found\");\n      }\n\n      const hrRequest = await this.storage.createHrRequest({\n        employeeId,\n        requestType: requestData.requestType,\n        title: requestData.title,\n        description: requestData.description,\n        priority: requestData.priority || \"normal\",\n        status: \"pending\",\n        attachmentPath: requestData.attachmentPath || null\n      });\n\n      return hrRequest;\n    } catch (error) {\n      throw new Error(`Failed to create HR request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Assigne une demande RH à un responsable\n   */\n  async assignHrRequest(requestId: number, assignedTo: string): Promise<HrRequest> {\n    try {\n      const request = await this.storage.getHrRequest(requestId);\n      if (!request) {\n        throw new Error(\"HR request not found\");\n      }\n\n      const updatedRequest = await this.storage.updateHrRequest(requestId, {\n        assignedTo,\n        status: \"in_progress\"\n      });\n\n      return updatedRequest;\n    } catch (error) {\n      throw new Error(`Failed to assign HR request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Ferme une demande RH\n   */\n  async completeHrRequest(requestId: number, responseNotes: string): Promise<HrRequest> {\n    try {\n      const request = await this.storage.getHrRequest(requestId);\n      if (!request) {\n        throw new Error(\"HR request not found\");\n      }\n\n      const updatedRequest = await this.storage.updateHrRequest(requestId, {\n        status: \"completed\",\n        responseNotes,\n        completedAt: new Date()\n      });\n\n      return updatedRequest;\n    } catch (error) {\n      throw new Error(`Failed to complete HR request: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Récupère les indicateurs RH\n   */\n  async getHRMetrics(): Promise<{\n    totalEmployees: number;\n    activeContracts: number;\n    pendingLeaveRequests: number;\n    pendingHrRequests: number;\n    payrollToPrepare: number;\n    upcomingLeaves: number;\n  }> {\n    try {\n      const employees = await this.storage.getAllEmployees();\n      const activeEmployees = employees.filter(e => e.status === \"active\");\n      \n      const allLeaveRequests = await Promise.all(\n        employees.map(e => this.storage.getLeaveRequestsByEmployee(e.id))\n      );\n      const pendingLeaves = allLeaveRequests.flat().filter(r => r.status === \"pending\");\n      \n      const upcomingLeaves = allLeaveRequests.flat().filter(r => {\n        if (r.status !== \"approved\") return false;\n        const startDate = new Date(r.startDate);\n        const today = new Date();\n        const daysDiff = Math.ceil((startDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n        return daysDiff <= 7 && daysDiff >= 0;\n      });\n\n      const allHrRequests = await this.storage.getAllHrRequests();\n      const pendingHrRequests = allHrRequests.filter(r => r.status === \"pending\");\n\n      // Estimation des fiches de paie à préparer (mois courant)\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM\n      const payrollPromises = employees.map(e => this.storage.getPayrollByEmployee(e.id, currentMonth));\n      const existingPayrolls = await Promise.all(payrollPromises);\n      const employeesWithoutPayroll = existingPayrolls.filter(p => p.length === 0).length;\n\n      return {\n        totalEmployees: employees.length,\n        activeContracts: activeEmployees.length,\n        pendingLeaveRequests: pendingLeaves.length,\n        pendingHrRequests: pendingHrRequests.length,\n        payrollToPrepare: employeesWithoutPayroll,\n        upcomingLeaves: upcomingLeaves.length\n      };\n    } catch (error) {\n      throw new Error(`Failed to get HR metrics: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Initialise les soldes de congés pour un nouvel employé\n   */\n  async initializeLeaveBalances(employeeId: number, year: number): Promise<void> {\n    try {\n      const leaveTypes = [\n        { type: \"vacation\", days: 25 },\n        { type: \"sick\", days: 90 }, // congés maladie\n        { type: \"personal\", days: 5 },\n        { type: \"maternity\", days: 112 }, // congé maternité\n        { type: \"paternity\", days: 25 }   // congé paternité\n      ];\n\n      for (const leave of leaveTypes) {\n        // Vérifier si le solde existe déjà\n        const existing = await this.storage.getLeaveBalance(employeeId, year);\n        const alreadyExists = existing.some(b => b.leaveType === leave.type);\n        \n        if (!alreadyExists) {\n          // Créer le solde initial (implémentation dépendant de votre storage)\n          // Note: Cette méthode doit être implémentée dans le storage\n          await this.storage.updateLeaveBalance(employeeId, year, leave.type, 0);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Failed to initialize leave balances: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}","size_bytes":11004},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    console.error(\"Server error:\", err);\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2092},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/recruitmentService.ts":{"content":"import { storage } from \"./storage\";\n\nexport interface CandidateScore {\n  applicationId: number;\n  candidate: any;\n  job: any;\n  autoScore: number;\n  manualScore?: number;\n  totalScore: number;\n  factors: {\n    experienceMatch: number;\n    skillsMatch: number;\n    availabilityScore: number;\n    salaryFit: number;\n    applicationQuality: number;\n  };\n}\n\nexport class RecruitmentService {\n  /**\n   * Calcule le score automatique d'un candidat basé sur plusieurs critères\n   */\n  calculateAutoScore(application: any, job: any): { score: number, factors: any } {\n    let totalScore = 0;\n    const factors = {\n      experienceMatch: 0,\n      skillsMatch: 0,\n      availabilityScore: 0,\n      salaryFit: 0,\n      applicationQuality: 0\n    };\n\n    // 1. Correspondance d'expérience (25 points max)\n    if (job.experienceLevel && application.experienceLevel) {\n      const experienceMapping = { 'Débutant': 1, 'Intermédiaire': 2, 'Senior': 3 };\n      const jobExp = experienceMapping[job.experienceLevel] || 2;\n      const candidateExp = experienceMapping[application.experienceLevel] || 2;\n      \n      if (candidateExp >= jobExp) {\n        factors.experienceMatch = 25;\n      } else if (candidateExp === jobExp - 1) {\n        factors.experienceMatch = 15;\n      } else {\n        factors.experienceMatch = 5;\n      }\n    } else {\n      factors.experienceMatch = 10; // Score neutre si pas d'info\n    }\n\n    // 2. Correspondance des compétences (30 points max)\n    if (job.skills && job.skills.length > 0 && application.skills) {\n      const jobSkills = job.skills.map((s: string) => s.toLowerCase());\n      const candidateSkills = application.skills.map((s: string) => s.toLowerCase());\n      \n      const matchingSkills = jobSkills.filter((skill: string) => \n        candidateSkills.some((cs: string) => cs.includes(skill) || skill.includes(cs))\n      );\n      \n      const skillsMatchRatio = matchingSkills.length / jobSkills.length;\n      factors.skillsMatch = Math.round(skillsMatchRatio * 30);\n    } else {\n      factors.skillsMatch = 15; // Score neutre\n    }\n\n    // 3. Disponibilité (15 points max)\n    if (application.availabilityDate) {\n      const availDate = new Date(application.availabilityDate);\n      const now = new Date();\n      const daysDiff = Math.ceil((availDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysDiff <= 0) {\n        factors.availabilityScore = 15; // Disponible immédiatement\n      } else if (daysDiff <= 30) {\n        factors.availabilityScore = 12; // Dans le mois\n      } else if (daysDiff <= 60) {\n        factors.availabilityScore = 8; // Dans les 2 mois\n      } else {\n        factors.availabilityScore = 3; // Plus tard\n      }\n    } else {\n      factors.availabilityScore = 12; // Assume disponible bientôt\n    }\n\n    // 4. Adéquation salariale (15 points max)\n    if (application.salaryExpectation && job.salary) {\n      // Parse des fourchettes de salaire (format: \"40k - 55k €\")\n      const parseSalary = (salaryStr: string): number => {\n        const match = salaryStr.match(/(\\d+)k/);\n        return match ? parseInt(match[1]) * 1000 : 0;\n      };\n\n      const candidateSalary = parseSalary(application.salaryExpectation);\n      const jobSalaryMatch = job.salary.match(/(\\d+)k\\s*-\\s*(\\d+)k/);\n      \n      if (jobSalaryMatch) {\n        const jobMinSalary = parseInt(jobSalaryMatch[1]) * 1000;\n        const jobMaxSalary = parseInt(jobSalaryMatch[2]) * 1000;\n        \n        if (candidateSalary >= jobMinSalary && candidateSalary <= jobMaxSalary) {\n          factors.salaryFit = 15; // Parfait match\n        } else if (candidateSalary <= jobMaxSalary * 1.1) {\n          factors.salaryFit = 10; // Proche\n        } else {\n          factors.salaryFit = 3; // Trop élevé\n        }\n      } else {\n        factors.salaryFit = 8; // Score neutre\n      }\n    } else {\n      factors.salaryFit = 10; // Score neutre si pas d'info\n    }\n\n    // 5. Qualité de la candidature (15 points max)\n    let qualityScore = 0;\n    if (application.coverLetter && application.coverLetter.length > 100) {\n      qualityScore += 5; // Lettre de motivation détaillée\n    }\n    if (application.cvPath) {\n      qualityScore += 5; // CV fourni\n    }\n    if (application.motivationLetterPath) {\n      qualityScore += 3; // Lettre de motivation en fichier\n    }\n    if (application.phone) {\n      qualityScore += 2; // Contact fourni\n    }\n    factors.applicationQuality = Math.min(qualityScore, 15);\n\n    // Score total (sur 100)\n    totalScore = factors.experienceMatch + factors.skillsMatch + \n                factors.availabilityScore + factors.salaryFit + factors.applicationQuality;\n\n    return { score: Math.min(totalScore, 100), factors };\n  }\n\n  /**\n   * Obtient le Top 10 des candidats pour une offre donnée\n   */\n  async getTopCandidates(jobId: number, limit: number = 10): Promise<CandidateScore[]> {\n    const applications = await storage.getApplicationsForJob(jobId);\n    const job = await storage.getJob(jobId);\n    \n    if (!job) {\n      throw new Error(\"Job not found\");\n    }\n\n    const scoredCandidates: CandidateScore[] = [];\n\n    for (const application of applications) {\n      const candidate = await storage.getUser(application.userId);\n      const { score, factors } = this.calculateAutoScore(application, job);\n      \n      // Mise à jour du score automatique dans la BD\n      await storage.updateApplication(application.id, { autoScore: score });\n\n      const totalScore = application.manualScore \n        ? Math.round((score * 0.6) + (application.manualScore * 0.4)) // 60% auto, 40% manuel\n        : score;\n\n      scoredCandidates.push({\n        applicationId: application.id,\n        candidate,\n        job,\n        autoScore: score,\n        manualScore: application.manualScore,\n        totalScore,\n        factors\n      });\n    }\n\n    // Tri par score décroissant\n    return scoredCandidates\n      .sort((a, b) => b.totalScore - a.totalScore)\n      .slice(0, limit);\n  }\n\n  /**\n   * Affecte des candidats à un recruteur\n   */\n  async assignCandidatesToRecruiter(applicationIds: number[], recruiterId: string): Promise<void> {\n    for (const appId of applicationIds) {\n      await storage.updateApplication(appId, { \n        assignedRecruiter: recruiterId,\n        status: 'assigned'\n      });\n    }\n  }\n\n  /**\n   * Met à jour la note manuelle d'un candidat\n   */\n  async updateManualScore(applicationId: number, score: number, notes?: string): Promise<void> {\n    await storage.updateApplication(applicationId, { \n      manualScore: score,\n      scoreNotes: notes,\n      status: 'scored'\n    });\n  }\n\n  /**\n   * Obtient les candidatures assignées à un recruteur\n   */\n  async getAssignedApplications(recruiterId: string): Promise<any[]> {\n    const applications = await storage.getApplicationsByRecruiter(recruiterId);\n    \n    const enrichedApps = [];\n    for (const app of applications) {\n      const candidate = await storage.getUser(app.userId);\n      const job = await storage.getJob(app.jobId);\n      enrichedApps.push({ ...app, candidate, job });\n    }\n    \n    return enrichedApps;\n  }\n\n  /**\n   * Obtient le Top 3 final après notation manuelle\n   */\n  async getFinalTop3(jobId: number): Promise<CandidateScore[]> {\n    const topCandidates = await this.getTopCandidates(jobId, 100);\n    \n    // Filtre seulement ceux qui ont une note manuelle\n    const scoredCandidates = topCandidates.filter(c => c.manualScore !== undefined);\n    \n    return scoredCandidates\n      .sort((a, b) => b.totalScore - a.totalScore)\n      .slice(0, 3);\n  }\n}\n\nexport const recruitmentService = new RecruitmentService();","size_bytes":7602},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"dev-secret-key-not-secure\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\", // Only secure in production\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      // Détruire la session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Error destroying session:', err);\n        }\n        // Clear the session cookie\n        res.clearCookie('connect.sid');\n        \n        // Return HTML with immediate redirect\n        res.send(`\n          <!DOCTYPE html>\n          <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>Déconnexion...</title>\n            <script>\n              window.location.href = '/';\n            </script>\n          </head>\n          <body>\n            <p>Déconnexion en cours...</p>\n            <script>\n              // Fallback si le premier script ne fonctionne pas\n              setTimeout(() => window.location.href = '/', 100);\n            </script>\n          </body>\n          </html>\n        `);\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4947},"server/routes.ts":{"content":"import { Express } from \"express\";\nimport type { Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { registerAuthRoutes } from \"./authRoutes\";\nimport { insertJobSchema, insertApplicationSchema, updateApplicationSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const { createServer } = await import(\"http\");\n  \n  // Configuration des sessions (nécessaire pour l'authentification)\n  const { getSession } = await import(\"./replitAuth\");\n  app.use(getSession());\n  \n  // Enregistrer les routes d'authentification email/password\n  registerAuthRoutes(app);\n\n  // Middleware d'authentification simplifié\n  const requireAuth = (req: any, res: any, next: any) => {\n    const sessionUser = (req.session as any)?.user;\n    if (!sessionUser) {\n      return res.status(401).json({ message: \"Non connecté\" });\n    }\n    req.user = sessionUser;\n    next();\n  };\n\n  const requireAdminRole = async (req: any, res: any, next: any) => {\n    const user = req.user;\n    if (!user?.role || ![\"admin\", \"hr\", \"recruiter\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n    next();\n  };\n\n  // Routes publiques - Jobs\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getAllJobs();\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      res.status(500).json({ message: \"Failed to fetch job\" });\n    }\n  });\n\n  // Routes authentifiées - Applications\n  app.get(\"/api/applications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const applications = await storage.getApplicationsByUser(userId);\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.post(\"/api/applications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      // Validation des données avec le schéma Zod\n      const validatedData = insertApplicationSchema.parse(req.body);\n      \n      // Convert availability string to Date if provided\n      if (validatedData.availability) {\n        validatedData.availability = new Date(validatedData.availability);\n      }\n      \n      // Création de la candidature via le storage\n      const application = await storage.createApplication(validatedData, userId);\n      res.status(201).json(application);\n    } catch (error: any) {\n      console.error(\"Error creating application:\", error);\n      \n      if (error?.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Failed to create application\" });\n    }\n  });\n\n  // Routes admin\n  app.get(\"/api/admin/jobs\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const jobs = await storage.getAllJobs();\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching admin jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.post(\"/api/admin/jobs\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      // Validation des données avec le schéma Zod\n      const validatedData = insertJobSchema.parse(req.body);\n      \n      // Création de l'emploi via le storage\n      const newJob = await storage.createJob(validatedData);\n      \n      res.status(201).json(newJob);\n    } catch (error: any) {\n      console.error(\"Error creating job:\", error);\n      \n      if (error?.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Failed to create job\" });\n    }\n  });\n\n  app.patch(\"/api/admin/jobs/:id\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      if (isNaN(jobId)) {\n        return res.status(400).json({ message: \"ID d'emploi invalide\" });\n      }\n\n      // Validation partielle des données avec le schéma Zod\n      const validatedData = insertJobSchema.partial().parse(req.body);\n      \n      // Mise à jour de l'emploi via le storage\n      const updatedJob = await storage.updateJob(jobId, validatedData);\n      \n      if (!updatedJob) {\n        return res.status(404).json({ message: \"Emploi non trouvé\" });\n      }\n      \n      res.json(updatedJob);\n    } catch (error: any) {\n      console.error(\"Error updating job:\", error);\n      \n      if (error?.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Failed to update job\" });\n    }\n  });\n\n  app.delete(\"/api/admin/jobs/:id\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      if (isNaN(jobId)) {\n        return res.status(400).json({ message: \"ID d'emploi invalide\" });\n      }\n\n      const deleted = await storage.deleteJob(jobId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Emploi non trouvé\" });\n      }\n      \n      res.json({ message: \"Emploi supprimé avec succès\" });\n    } catch (error: any) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  app.get(\"/api/admin/applications\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const applications = await storage.getAllApplications();\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching admin applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.patch(\"/api/admin/applications/:id\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const applicationId = parseInt(req.params.id);\n      if (isNaN(applicationId)) {\n        return res.status(400).json({ message: \"ID de candidature invalide\" });\n      }\n\n      // Validation partielle des données avec le schéma Zod\n      const validatedData = updateApplicationSchema.parse(req.body);\n      \n      // Mise à jour de la candidature via le storage\n      const updatedApplication = await storage.updateApplication(applicationId, validatedData);\n      \n      if (!updatedApplication) {\n        return res.status(404).json({ message: \"Candidature non trouvée\" });\n      }\n      \n      res.json(updatedApplication);\n    } catch (error: any) {\n      console.error(\"Error updating application:\", error);\n      \n      if (error?.name === 'ZodError') {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Failed to update application\" });\n    }\n  });\n\n  app.delete(\"/api/admin/applications/:id\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const applicationId = parseInt(req.params.id);\n      if (isNaN(applicationId)) {\n        return res.status(400).json({ message: \"ID de candidature invalide\" });\n      }\n\n      const deleted = await storage.deleteApplication(applicationId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Candidature non trouvée\" });\n      }\n      \n      res.json({ message: \"Candidature supprimée avec succès\" });\n    } catch (error: any) {\n      console.error(\"Error deleting application:\", error);\n      res.status(500).json({ message: \"Failed to delete application\" });\n    }\n  });\n\n  app.get(\"/api/admin/recruiters\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const recruiters = await storage.getRecruiters();\n      res.json(recruiters);\n    } catch (error) {\n      console.error(\"Error fetching recruiters:\", error);\n      res.status(500).json({ message: \"Failed to fetch recruiters\" });\n    }\n  });\n\n  // Routes utilisateur\n  app.get(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      \n      // Vérification des permissions\n      if (userId !== (req.user as any)?.id && ![\"admin\", \"hr\"].includes((req.user as any)?.role || \"\")) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, req.body);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Routes de gestion de la paie\n  app.get(\"/api/payroll\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrolls = await storage.getAllPayrolls();\n      res.json(payrolls);\n    } catch (error) {\n      console.error(\"Error fetching payrolls:\", error);\n      res.status(500).json({ message: \"Failed to fetch payrolls\" });\n    }\n  });\n\n  app.post(\"/api/payroll\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrollData = {\n        ...req.body,\n        createdBy: user.id\n      };\n      \n      const newPayroll = await storage.createPayroll(payrollData);\n      res.status(201).json(newPayroll);\n    } catch (error) {\n      console.error(\"Error creating payroll:\", error);\n      res.status(500).json({ message: \"Failed to create payroll\" });\n    }\n  });\n\n  app.put(\"/api/payroll/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrollId = parseInt(req.params.id);\n      const updatedPayroll = await storage.updatePayroll(payrollId, req.body);\n      res.json(updatedPayroll);\n    } catch (error) {\n      console.error(\"Error updating payroll:\", error);\n      res.status(500).json({ message: \"Failed to update payroll\" });\n    }\n  });\n\n  app.get(\"/api/payroll/:id/payslip\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrollId = parseInt(req.params.id);\n      const payroll = await storage.getPayroll(payrollId);\n      \n      if (!payroll) {\n        return res.status(404).json({ message: \"Bulletin de paie non trouvé\" });\n      }\n\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error fetching payslip:\", error);\n      res.status(500).json({ message: \"Failed to fetch payslip\" });\n    }\n  });\n\n  app.post(\"/api/payroll/:id/generate-pdf\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrollId = parseInt(req.params.id);\n      // TODO: Implémenter génération PDF du bulletin de paie\n      res.json({ message: \"PDF generation not implemented yet\" });\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  app.post(\"/api/payroll/:id/send-email\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const payrollId = parseInt(req.params.id);\n      const { email, customMessage } = req.body;\n      \n      // TODO: Implémenter envoi email du bulletin de paie\n      res.json({ message: \"Email sending not implemented yet\" });\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  // Routes des employés pour la paie\n  app.get(\"/api/employees\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (![\"admin\", \"hr\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Accès refusé\" });\n      }\n\n      const employees = await storage.getAllEmployees();\n      res.json(employees);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  // Complete user profile\n  app.put(\"/api/profile/complete\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = {\n        ...req.body,\n        profileCompleted: true\n      };\n      \n      const updatedUser = await storage.updateUser(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error completing profile:\", error);\n      res.status(500).json({ message: \"Failed to complete profile\" });\n    }\n  });\n\n  // Cette ligne sera remplacée par le middleware Vite en développement\n\n  // Créer et retourner le serveur HTTP\n  const server = createServer(app);\n  return server;\n}","size_bytes":14567},"server/storage.ts":{"content":"import {\n  users,\n  jobs,\n  applications,\n  employees,\n  contracts,\n  contractAmendments,\n  payroll,\n  leaveRequests,\n  leaveBalances,\n  hrRequests,\n  onboardingProcesses,\n  onboardingSteps,\n  candidateOnboarding,\n  onboardingStepCompletions,\n  candidateInvitations,\n  type User,\n  type UpsertUser,\n  type Job,\n  type InsertJob,\n  type Application,\n  type InsertApplication,\n  type UpdateApplication,\n  type Employee,\n  type InsertEmployee,\n  type Contract,\n  type InsertContract,\n  type ContractAmendment,\n  type InsertAmendment,\n  type Payroll,\n  type InsertPayroll,\n  type LeaveRequest,\n  type InsertLeaveRequest,\n  type LeaveBalance,\n  type HrRequest,\n  type InsertHrRequest,\n  type OnboardingProcess,\n  type InsertOnboardingProcess,\n  type OnboardingStep,\n  type InsertOnboardingStep,\n  type CandidateOnboarding,\n  type InsertCandidateOnboarding,\n  type OnboardingStepCompletion,\n  type InsertStepCompletion,\n  onboardingFeedback,\n  type OnboardingFeedback,\n  type InsertOnboardingFeedback,\n  onboardingAchievements,\n  type OnboardingAchievement,\n  type InsertOnboardingAchievement,\n  userAchievements,\n  type UserAchievement,\n  onboardingEvents,\n  type OnboardingEvent,\n  type InsertOnboardingEvent,\n  type CandidateInvitation,\n  type InsertCandidateInvitation,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, gte, lte, like, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth and email/password auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(userData: Partial<User>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  getUsersByRole(role: string): Promise<User[]>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Job operations\n  getAllJobs(): Promise<Job[]>;\n  getJob(id: number): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: number, job: Partial<InsertJob>): Promise<Job | undefined>;\n  deleteJob(id: number): Promise<boolean>;\n  searchJobs(query: string, filters: any): Promise<Job[]>;\n  \n  // Application operations\n  createApplication(application: InsertApplication, userId: string): Promise<Application>;\n  getApplicationsByUser(userId: string): Promise<Application[]>;\n  getAllApplications(): Promise<Application[]>;\n  getApplication(id: number): Promise<Application | undefined>;\n  updateApplication(id: number, application: UpdateApplication): Promise<Application>;\n  deleteApplication(id: number): Promise<boolean>;\n  getApplicationsForJob(jobId: number): Promise<Application[]>;\n  getApplicationsByRecruiter(recruiterId: string): Promise<Application[]>;\n  \n  // Recruitment operations\n  getRecruiters(): Promise<User[]>;\n  \n  // Analytics operations\n  getKPIs(): Promise<any>;\n  getApplicationAnalytics(): Promise<any>;\n  getJobAnalytics(): Promise<any>;\n  \n  // Enhanced search operations for applications with scoring\n  searchApplicationsByScore(minAutoScore?: number, maxAutoScore?: number, minManualScore?: number, maxManualScore?: number): Promise<Application[]>;\n  getApplicationsByDateRange(startDate: Date, endDate: Date): Promise<Application[]>;\n  \n  // Payroll operations\n  createPayroll(payroll: InsertPayroll): Promise<Payroll>;\n  getPayroll(id: number): Promise<Payroll | undefined>;\n  getPayrollsByEmployee(employeeId: number): Promise<Payroll[]>;\n  getPayrollsByPeriod(period: string): Promise<Payroll[]>;\n  updatePayroll(id: number, data: Partial<Payroll>): Promise<Payroll>;\n  getAllPayrolls(): Promise<Payroll[]>;\n  \n  // Employee operations\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  getEmployee(id: number): Promise<Employee | undefined>;\n  getEmployeeByUserId(userId: string): Promise<Employee | undefined>;\n  getAllEmployees(): Promise<Employee[]>;\n  updateEmployee(id: number, data: Partial<Employee>): Promise<Employee>;\n  \n  // Contract operations\n  createContract(contract: InsertContract): Promise<Contract>;\n  getContract(id: number): Promise<Contract | undefined>;\n  getContractsByEmployee(employeeId: number): Promise<Contract[]>;\n  updateContract(id: number, data: Partial<Contract>): Promise<Contract>;\n  getActiveContracts(): Promise<Contract[]>;\n  \n  // Leave operations\n  createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest>;\n  getLeaveRequest(id: number): Promise<LeaveRequest | undefined>;\n  getLeaveRequestsByEmployee(employeeId: number): Promise<LeaveRequest[]>;\n  updateLeaveRequest(id: number, data: Partial<LeaveRequest>): Promise<LeaveRequest>;\n  getLeaveBalance(employeeId: number, year: number): Promise<LeaveBalance[]>;\n  \n  // HR Request operations\n  createHrRequest(request: InsertHrRequest): Promise<HrRequest>;\n  getHrRequest(id: number): Promise<HrRequest | undefined>;\n  getHrRequestsByEmployee(employeeId: number): Promise<HrRequest[]>;\n  getAllHrRequests(): Promise<HrRequest[]>;\n  updateHrRequest(id: number, data: Partial<HrRequest>): Promise<HrRequest>;\n  \n  // Onboarding operations\n  createOnboardingProcess(process: InsertOnboardingProcess): Promise<OnboardingProcess>;\n  getOnboardingProcess(id: number): Promise<OnboardingProcess | undefined>;\n  getAllOnboardingProcesses(): Promise<OnboardingProcess[]>;\n  updateOnboardingProcess(id: number, data: Partial<OnboardingProcess>): Promise<OnboardingProcess>;\n  \n  createOnboardingStep(step: InsertOnboardingStep): Promise<OnboardingStep>;\n  getOnboardingStepsByProcess(processId: number): Promise<OnboardingStep[]>;\n  updateOnboardingStep(id: number, data: Partial<OnboardingStep>): Promise<OnboardingStep>;\n  \n  createCandidateOnboarding(onboarding: InsertCandidateOnboarding): Promise<CandidateOnboarding>;\n  getCandidateOnboarding(id: number): Promise<CandidateOnboarding | undefined>;\n  getCandidateOnboardingByUser(userId: string): Promise<CandidateOnboarding[]>;\n  updateCandidateOnboarding(id: number, data: Partial<CandidateOnboarding>): Promise<CandidateOnboarding>;\n  \n  createStepCompletion(completion: InsertStepCompletion): Promise<OnboardingStepCompletion>;\n  getStepCompletionsByOnboarding(onboardingId: number): Promise<OnboardingStepCompletion[]>;\n  updateStepCompletion(id: number, data: Partial<OnboardingStepCompletion>): Promise<OnboardingStepCompletion>;\n  \n  // Employee ID generation\n  generateEmployeeId(firstName: string, lastName: string): Promise<string>;\n  \n  // Onboarding analytics\n  getOnboardingAnalytics(): Promise<any>;\n  getOnboardingProcessTemplates(): Promise<OnboardingProcess[]>;\n  \n  // Feedback system\n  createOnboardingFeedback(feedback: InsertOnboardingFeedback): Promise<OnboardingFeedback>;\n  getOnboardingFeedback(candidateOnboardingId?: number): Promise<OnboardingFeedback[]>;\n  \n  // Achievement system\n  createAchievement(achievement: InsertOnboardingAchievement): Promise<OnboardingAchievement>;\n  getAchievements(): Promise<OnboardingAchievement[]>;\n  awardAchievement(userId: string, achievementId: number, candidateOnboardingId?: number): Promise<UserAchievement>;\n  getUserAchievements(userId: string): Promise<UserAchievement[]>;\n  \n  // Calendar events\n  createOnboardingEvent(event: InsertOnboardingEvent): Promise<OnboardingEvent>;\n  getOnboardingEvents(candidateOnboardingId?: number): Promise<OnboardingEvent[]>;\n  updateOnboardingEvent(id: number, data: Partial<OnboardingEvent>): Promise<OnboardingEvent>;\n  \n  // Interview Management\n  createInterview(interview: any): Promise<any>;\n  getInterviews(): Promise<any[]>;\n  updateInterview(id: number, data: any): Promise<any>;\n  \n  // Interview Evaluations\n  createInterviewEvaluation(evaluation: any): Promise<any>;\n  getInterviewEvaluations(interviewId: number): Promise<any[]>;\n  \n  // Interview Feedback\n  createInterviewFeedback(feedback: any): Promise<any>;\n  getInterviewFeedback(interviewId: number): Promise<any[]>;\n  \n  // Performance Management\n  createPerformanceReview(review: any): Promise<any>;\n  getPerformanceReviews(): Promise<any[]>;\n  updatePerformanceReview(id: number, data: any): Promise<any>;\n  \n  // Training Management\n  createTrainingProgram(program: any): Promise<any>;\n  getTrainingPrograms(): Promise<any[]>;\n  createEmployeeTraining(training: any): Promise<any>;\n  getEmployeeTraining(): Promise<any[]>;\n  \n  // Disciplinary Actions\n  createDisciplinaryAction(action: any): Promise<any>;\n  getDisciplinaryActions(): Promise<any[]>;\n  \n  // Employee Documents\n  createEmployeeDocument(document: any): Promise<any>;\n  getEmployeeDocuments(): Promise<any[]>;\n  \n  // Time Tracking\n  createTimeEntry(entry: any): Promise<any>;\n  getTimeEntries(): Promise<any[]>;\n  \n  // Candidate Invitations\n  createCandidateInvitation(invitation: InsertCandidateInvitation): Promise<CandidateInvitation>;\n  getCandidateInvitations(): Promise<CandidateInvitation[]>;\n  getCandidateInvitationByToken(token: string): Promise<CandidateInvitation | undefined>;\n  updateCandidateInvitation(id: number, data: Partial<CandidateInvitation>): Promise<CandidateInvitation>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private jobs: Map<number, Job>;\n  private applications: Map<number, Application>;\n  private nextJobId: number = 1;\n  private nextApplicationId: number = 1;\n\n  constructor() {\n    this.users = new Map();\n    this.jobs = new Map();\n    this.applications = new Map();\n    this.initializeMockJobs();\n    this.initializeTestUsers();\n  }\n\n  private initializeMockJobs() {\n    const mockJobs: Job[] = [\n      {\n        id: 1,\n        title: \"Développeur Full Stack React/Node.js\",\n        company: \"TechCorp SARL\",\n        location: \"Paris, France\",\n        description: \"Rejoignez notre équipe pour développer des applications web modernes avec React et Node.js. Vous travaillerez sur des projets innovants dans un environnement agile...\",\n        requirements: \"3-5 ans d'expérience en développement web, maîtrise de React.js, Node.js, TypeScript et PostgreSQL\",\n        salary: \"45k - 60k €\",\n        contractType: \"CDI\",\n        experienceLevel: \"Intermédiaire\",\n        skills: [\"React.js\", \"Node.js\", \"TypeScript\", \"PostgreSQL\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 2,\n        title: \"UX/UI Designer Senior\",\n        company: \"Design Studio Pro\",\n        location: \"Lyon, France\",\n        description: \"Nous recherchons un(e) UX/UI Designer passionné(e) pour concevoir des expériences utilisateur exceptionnelles. Vous interviendrez sur des projets variés...\",\n        requirements: \"5+ ans d'expérience en design UX/UI, maîtrise de Figma, Adobe XD\",\n        salary: \"50k - 65k €\",\n        contractType: \"CDI\",\n        experienceLevel: \"Senior\",\n        skills: [\"Figma\", \"Adobe XD\", \"Prototyping\", \"User Research\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 3,\n        title: \"Chef de Projet Digital\",\n        company: \"Agence Digitale 360\",\n        location: \"Toulouse, France\",\n        description: \"Pilotez des projets web et mobile de A à Z. Vous coordonnerez les équipes techniques et créatives pour livrer des solutions digitales innovantes...\",\n        requirements: \"2-4 ans d'expérience en gestion de projet digital\",\n        salary: \"40k - 55k €\",\n        contractType: \"CDD\",\n        experienceLevel: \"Intermédiaire\",\n        skills: [\"Agile/Scrum\", \"Jira\", \"Digital Strategy\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 4,\n        title: \"Responsable Ressources Humaines\",\n        company: \"AeroRecrutement SARL\",\n        location: \"Dakar, Sénégal\",\n        description: \"Nous recherchons un(e) Responsable RH expérimenté(e) pour gérer notre équipe grandissante. Vous serez en charge du recrutement, de la formation et de la gestion administrative du personnel.\",\n        requirements: \"Master en RH ou équivalent, 3-5 ans d'expérience en management RH, maîtrise des outils SIRH\",\n        salary: \"2 500 000 - 3 500 000 FCFA\",\n        contractType: \"CDI\",\n        experienceLevel: \"Intermédiaire\",\n        skills: [\"Gestion RH\", \"Recrutement\", \"Formation\", \"Droit du travail\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 5,\n        title: \"Ingénieur DevOps\",\n        company: \"CloudTech Solutions\",\n        location: \"Casablanca, Maroc\",\n        description: \"Rejoignez notre équipe pour automatiser et optimiser nos infrastructures cloud. Vous travaillerez avec AWS, Docker, Kubernetes dans un environnement DevOps moderne.\",\n        requirements: \"3+ ans d'expérience DevOps, maîtrise AWS/Azure, Docker, Kubernetes, CI/CD\",\n        salary: \"120k - 150k MAD\",\n        contractType: \"CDI\",\n        experienceLevel: \"Senior\",\n        skills: [\"AWS\", \"Docker\", \"Kubernetes\", \"CI/CD\", \"Terraform\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 6,\n        title: \"Comptable Senior\",\n        company: \"Cabinet Expertise Comptable\",\n        location: \"Abidjan, Côte d'Ivoire\",\n        description: \"Poste de comptable senior pour la gestion complète de la comptabilité de PME. Vous serez responsable des clôtures mensuelles, de la fiscalité et du reporting.\",\n        requirements: \"BTS/DUT Comptabilité + 3 ans d'expérience, maîtrise OHADA, logiciels comptables\",\n        salary: \"1 200 000 - 1 800 000 FCFA\",\n        contractType: \"CDI\",\n        experienceLevel: \"Senior\",\n        skills: [\"Comptabilité OHADA\", \"Fiscalité\", \"Sage\", \"Excel avancé\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 7,\n        title: \"Commercial Export\",\n        company: \"Trading International SARL\",\n        location: \"Tunis, Tunisie\",\n        description: \"Développement commercial à l'international pour nos produits. Prospection, négociation et suivi clientèle sur les marchés africains et européens.\",\n        requirements: \"BAC+3 Commerce International, 2-3 ans d'expérience export, anglais et français courants\",\n        salary: \"2500 - 3500 TND + commissions\",\n        contractType: \"CDI\",\n        experienceLevel: \"Intermédiaire\",\n        skills: [\"Vente\", \"Export\", \"Négociation\", \"Anglais\", \"Prospection\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 8,\n        title: \"Assistant(e) de Direction\",\n        company: \"Groupe Industriel Moderne\",\n        location: \"Bamako, Mali\",\n        description: \"Assistanat de direction polyvalent pour soutenir l'équipe dirigeante. Gestion administrative, planning, communication et coordination des projets.\",\n        requirements: \"BAC+2 minimum, 1-2 ans d'expérience, maîtrise bureautique parfaite, discrétion\",\n        salary: \"350 000 - 500 000 FCFA\",\n        contractType: \"CDI\",\n        experienceLevel: \"Junior\",\n        skills: [\"Bureautique\", \"Organisation\", \"Communication\", \"Discrétion\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 9,\n        title: \"Développeur Mobile Flutter\",\n        company: \"Mobile Apps Africa\",\n        location: \"Lagos, Nigeria\",\n        description: \"Développement d'applications mobiles innovantes avec Flutter. Vous travaillerez sur des applications fintech et e-commerce pour le marché africain.\",\n        requirements: \"2+ ans Flutter/Dart, expérience API REST, Firebase, publications App Store/Play Store\",\n        salary: \"$18,000 - $25,000 USD\",\n        contractType: \"CDI\",\n        experienceLevel: \"Intermédiaire\",\n        skills: [\"Flutter\", \"Dart\", \"Firebase\", \"API REST\", \"Mobile\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: 10,\n        title: \"Responsable Marketing Digital\",\n        company: \"E-commerce Plus\",\n        location: \"Rabat, Maroc\",\n        description: \"Pilotage de la stratégie marketing digital. SEO/SEA, réseaux sociaux, email marketing, analytics pour booster les ventes en ligne.\",\n        requirements: \"Master Marketing Digital, 3+ ans d'expérience, Google Ads, Facebook Ads, Analytics\",\n        salary: \"15 000 - 20 000 MAD\",\n        contractType: \"CDI\",\n        experienceLevel: \"Senior\",\n        skills: [\"SEO/SEA\", \"Google Ads\", \"Analytics\", \"Réseaux Sociaux\", \"E-commerce\"],\n        isActive: 1,\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      }\n    ];\n\n    mockJobs.forEach(job => {\n      this.jobs.set(job.id, job);\n      this.nextJobId = Math.max(this.nextJobId, job.id + 1);\n    });\n  }\n\n  private initializeTestUsers() {\n    const testUsers: User[] = [\n      // Admin/Super Admin pour Mohamed avec mot de passe\n      {\n        id: \"mohamed-admin-001\",\n        email: \"mohamed.admin@aerorecrut.com\",\n        password: \"$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeZHcx8nUo7p2V3Nm\", // password: admin123\n        firstName: \"Mohamed\",\n        lastName: \"Administrateur\",\n        profileImageUrl: null,\n        phone: \"+33612345678\",\n        role: \"admin\",\n        gender: \"Homme\",\n        maritalStatus: \"Marié(e)\",\n        address: \"123 Avenue des Champs-Élysées, 75008 Paris\",\n        residencePlace: \"Paris\",\n        idDocumentType: \"CNI\",\n        idDocumentNumber: \"123456789\",\n        birthDate: new Date(\"1980-01-15\"),\n        birthPlace: \"Paris\",\n        birthCountry: \"France\",\n        nationality: \"Française\",\n        profileCompleted: true,\n        employeeId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      // Candidat de test avec mot de passe\n      {\n        id: \"candidat-test-001\",\n        email: \"candidat.test@example.com\",\n        password: \"$2a$12$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi\", // password: candidate123\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        profileImageUrl: null,\n        phone: \"+33687654321\",\n        role: \"candidate\",\n        gender: \"Homme\",\n        maritalStatus: \"Célibataire\",\n        address: \"456 Rue de la République, 69000 Lyon\",\n        residencePlace: \"Lyon\",\n        idDocumentType: \"CNI\",\n        idDocumentNumber: \"987654321\",\n        birthDate: new Date(\"1990-05-20\"),\n        birthPlace: \"Lyon\",\n        birthCountry: \"France\",\n        nationality: \"Française\",\n        profileCompleted: true,\n        employeeId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      // RH de test\n      {\n        id: \"rh-test-001\",\n        email: \"rh.test@aerorecrut.com\",\n        firstName: \"Marie\",\n        lastName: \"Martin\",\n        profileImageUrl: null,\n        phone: \"+33612987654\",\n        role: \"hr\",\n        gender: \"Femme\",\n        maritalStatus: \"Marié(e)\",\n        address: \"789 Boulevard Saint-Germain, 75006 Paris\",\n        residencePlace: \"Paris\",\n        idDocumentType: \"CNI\",\n        idDocumentNumber: \"456789123\",\n        birthDate: new Date(\"1985-03-10\"),\n        birthPlace: \"Paris\",\n        birthCountry: \"France\",\n        nationality: \"Française\",\n        profileCompleted: true,\n        employeeId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      // Recruteur de test\n      {\n        id: \"recruteur-test-001\",\n        email: \"recruteur.test@aerorecrut.com\",\n        firstName: \"Pierre\",\n        lastName: \"Durand\",\n        profileImageUrl: null,\n        phone: \"+33698765432\",\n        role: \"recruiter\",\n        gender: \"Homme\",\n        maritalStatus: \"Célibataire\",\n        address: \"321 Rue Victor Hugo, 31000 Toulouse\",\n        residencePlace: \"Toulouse\",\n        idDocumentType: \"CNI\",\n        idDocumentNumber: \"789123456\",\n        birthDate: new Date(\"1988-07-25\"),\n        birthPlace: \"Toulouse\",\n        birthCountry: \"France\",\n        nationality: \"Française\",\n        profileCompleted: true,\n        employeeId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      // Employé de test\n      {\n        id: \"employe-test-001\",\n        email: \"employe.test@aerorecrut.com\",\n        firstName: \"Sophie\",\n        lastName: \"Bernard\",\n        profileImageUrl: null,\n        phone: \"+33654321987\",\n        role: \"employee\",\n        gender: \"Femme\",\n        maritalStatus: \"Union libre\",\n        address: \"654 Avenue de la Libération, 13000 Marseille\",\n        residencePlace: \"Marseille\",\n        idDocumentType: \"CNI\",\n        idDocumentNumber: \"321654987\",\n        birthDate: new Date(\"1992-12-08\"),\n        birthPlace: \"Marseille\",\n        birthCountry: \"France\",\n        nationality: \"Française\",\n        profileCompleted: true,\n        employeeId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    testUsers.forEach(user => {\n      this.users.set(user.id, user);\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    const user: User = {\n      id: userData.id || randomUUID(),\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      phone: userData.phone || null,\n      role: userData.role || \"candidate\",\n      employeeId: userData.employeeId || null,\n      gender: userData.gender || null,\n      maritalStatus: userData.maritalStatus || null,\n      address: userData.address || null,\n      residencePlace: userData.residencePlace || null,\n      idDocumentType: userData.idDocumentType || null,\n      idDocumentNumber: userData.idDocumentNumber || null,\n      birthDate: userData.birthDate || null,\n      birthPlace: userData.birthPlace || null,\n      birthCountry: userData.birthCountry || null,\n      nationality: userData.nationality || null,\n      profileCompleted: userData.profileCompleted || false,\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<User>): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(`User with id ${id} not found`);\n    }\n\n    const user: User = {\n      ...existingUser,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Job operations\n  async getAllJobs(): Promise<Job[]> {\n    return Array.from(this.jobs.values()).filter(job => job.isActive === 1);\n  }\n\n  async getJob(id: number): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async createJob(jobData: InsertJob): Promise<Job> {\n    const job: Job = {\n      id: this.nextJobId++,\n      title: jobData.title,\n      company: jobData.company,\n      location: jobData.location,\n      description: jobData.description,\n      contractType: jobData.contractType,\n      requirements: jobData.requirements || null,\n      salary: jobData.salary || null,\n      experienceLevel: jobData.experienceLevel || null,\n      skills: jobData.skills || null,\n      isActive: jobData.isActive !== undefined ? jobData.isActive : 1, // Actif par défaut\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.jobs.set(job.id, job);\n    return job;\n  }\n\n  async updateJob(id: number, updateData: Partial<InsertJob>): Promise<Job | undefined> {\n    const existingJob = this.jobs.get(id);\n    if (!existingJob) {\n      return undefined;\n    }\n\n    const updatedJob: Job = {\n      ...existingJob,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.jobs.set(id, updatedJob);\n    return updatedJob;\n  }\n\n  async deleteJob(id: number): Promise<boolean> {\n    return this.jobs.delete(id);\n  }\n\n  async searchJobs(query: string, filters: any): Promise<Job[]> {\n    const allJobs = await this.getAllJobs();\n    \n    return allJobs.filter(job => {\n      // Text search\n      const matchesQuery = !query || \n        job.title.toLowerCase().includes(query.toLowerCase()) ||\n        job.company.toLowerCase().includes(query.toLowerCase()) ||\n        job.location.toLowerCase().includes(query.toLowerCase()) ||\n        job.description.toLowerCase().includes(query.toLowerCase());\n\n      // Contract type filter\n      const matchesContract = !filters.contractType || \n        filters.contractType.length === 0 || \n        filters.contractType.includes(job.contractType);\n\n      // Experience level filter\n      const matchesExperience = !filters.experienceLevel || \n        filters.experienceLevel.length === 0 || \n        filters.experienceLevel.includes(job.experienceLevel);\n\n      // Location filter\n      const matchesLocation = !filters.location || \n        job.location.toLowerCase().includes(filters.location.toLowerCase());\n\n      return matchesQuery && matchesContract && matchesExperience && matchesLocation;\n    });\n  }\n\n  // Application operations\n  async createApplication(applicationData: InsertApplication, userId: string): Promise<Application> {\n    const application: Application = {\n      id: this.nextApplicationId++,\n      userId,\n      jobId: applicationData.jobId,\n      phone: applicationData.phone || null,\n      status: \"pending\",\n      coverLetter: applicationData.coverLetter || null,\n      cvPath: applicationData.cvPath || null,\n      motivationLetterPath: applicationData.motivationLetterPath || null,\n      availability: applicationData.availability || null,\n      salaryExpectation: applicationData.salaryExpectation || null,\n      assignedRecruiter: null,\n      autoScore: 0,\n      manualScore: null,\n      scoreNotes: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.applications.set(application.id, application);\n    return application;\n  }\n\n  async getApplicationsByUser(userId: string): Promise<Application[]> {\n    return Array.from(this.applications.values()).filter(app => app.userId === userId);\n  }\n\n  async getAllApplications(): Promise<Application[]> {\n    return Array.from(this.applications.values());\n  }\n\n  async getApplication(id: number): Promise<Application | undefined> {\n    return this.applications.get(id);\n  }\n\n  async updateApplication(id: number, updateData: UpdateApplication): Promise<Application> {\n    const existing = this.applications.get(id);\n    if (!existing) {\n      throw new Error(\"Application not found\");\n    }\n    \n    const updated: Application = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.applications.set(id, updated);\n    return updated;\n  }\n\n  async deleteApplication(id: number): Promise<boolean> {\n    return this.applications.delete(id);\n  }\n\n  async getApplicationsByRecruiter(recruiterId: string): Promise<Application[]> {\n    return Array.from(this.applications.values()).filter(app => app.assignedRecruiter === recruiterId);\n  }\n\n  async getRecruiters(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => \n      user.role === \"recruiter\" || user.role === \"hr\" || user.role === \"admin\"\n    );\n  }\n\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => user.role === role);\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    const existing = this.users.get(id);\n    if (!existing) {\n      throw new Error(\"User not found\");\n    }\n    this.users.delete(id);\n  }\n\n  // Analytics operations\n  async getKPIs(): Promise<any> {\n    const allApplications = Array.from(this.applications.values());\n    const allJobs = Array.from(this.jobs.values());\n    const allUsers = Array.from(this.users.values());\n    \n    const candidates = allUsers.filter(u => u.role === 'candidate');\n    const recruiters = allUsers.filter(u => u.role === 'recruiter' || u.role === 'hr');\n    \n    const statusCounts = {\n      pending: allApplications.filter(a => a.status === 'pending').length,\n      reviewed: allApplications.filter(a => a.status === 'reviewed').length,\n      interview: allApplications.filter(a => a.status === 'interview').length,\n      accepted: allApplications.filter(a => a.status === 'accepted').length,\n      rejected: allApplications.filter(a => a.status === 'rejected').length,\n      assigned: allApplications.filter(a => a.status === 'assigned').length,\n      scored: allApplications.filter(a => a.status === 'scored').length,\n    };\n\n    const conversionRate = allApplications.length > 0 \n      ? ((statusCounts.accepted / allApplications.length) * 100).toFixed(1)\n      : '0.0';\n\n    const avgProcessingTime = this.calculateAvgProcessingTime(allApplications);\n    \n    return {\n      totalApplications: allApplications.length,\n      totalJobs: allJobs.filter(j => j.isActive === 1).length,\n      totalCandidates: candidates.length,\n      totalRecruiters: recruiters.length,\n      statusCounts,\n      conversionRate: parseFloat(conversionRate),\n      avgProcessingTime,\n      topPerformingJobs: this.getTopJobs(allApplications, allJobs)\n    };\n  }\n\n  async getApplicationAnalytics(): Promise<any> {\n    const allApplications = Array.from(this.applications.values());\n    \n    // Applications par mois (6 derniers mois)\n    const monthlyData = this.getMonthlyApplications(allApplications);\n    \n    // Applications par statut pour graphique\n    const statusData = [\n      { name: 'En attente', value: allApplications.filter(a => a.status === 'pending').length },\n      { name: 'Examinées', value: allApplications.filter(a => a.status === 'reviewed').length },\n      { name: 'Entretiens', value: allApplications.filter(a => a.status === 'interview').length },\n      { name: 'Acceptées', value: allApplications.filter(a => a.status === 'accepted').length },\n      { name: 'Refusées', value: allApplications.filter(a => a.status === 'rejected').length },\n      { name: 'Assignées', value: allApplications.filter(a => a.status === 'assigned').length },\n      { name: 'Notées', value: allApplications.filter(a => a.status === 'scored').length },\n    ].filter(item => item.value > 0);\n    \n    return {\n      monthlyApplications: monthlyData,\n      statusDistribution: statusData,\n      scoreDistribution: this.getScoreDistribution(allApplications)\n    };\n  }\n\n  async getJobAnalytics(): Promise<any> {\n    const allJobs = Array.from(this.jobs.values());\n    const allApplications = Array.from(this.applications.values());\n    \n    const jobPopularity = allJobs.map(job => ({\n      name: job.title.length > 20 ? job.title.substring(0, 20) + '...' : job.title,\n      applications: allApplications.filter(a => a.jobId === job.id).length,\n      company: job.company\n    })).sort((a, b) => b.applications - a.applications).slice(0, 10);\n    \n    const contractTypeData = [\n      { name: 'CDI', value: allJobs.filter(j => j.contractType === 'CDI').length },\n      { name: 'CDD', value: allJobs.filter(j => j.contractType === 'CDD').length },\n      { name: 'Freelance', value: allJobs.filter(j => j.contractType === 'Freelance').length },\n      { name: 'Stage', value: allJobs.filter(j => j.contractType === 'Stage').length },\n    ].filter(item => item.value > 0);\n    \n    const experienceLevelData = [\n      { name: 'Débutant', value: allJobs.filter(j => j.experienceLevel === 'Débutant').length },\n      { name: 'Intermédiaire', value: allJobs.filter(j => j.experienceLevel === 'Intermédiaire').length },\n      { name: 'Senior', value: allJobs.filter(j => j.experienceLevel === 'Senior').length },\n    ].filter(item => item.value > 0);\n    \n    return {\n      jobPopularity,\n      contractTypes: contractTypeData,\n      experienceLevels: experienceLevelData\n    };\n  }\n\n  private calculateAvgProcessingTime(applications: Application[]): number {\n    const processedApps = applications.filter(a => \n      a.status === 'accepted' || a.status === 'rejected'\n    );\n    \n    if (processedApps.length === 0) return 0;\n    \n    const totalTime = processedApps.reduce((sum, app) => {\n      const updatedAt = app.updatedAt || new Date();\n      const createdAt = app.createdAt || new Date();\n      const daysDiff = Math.ceil(\n        (updatedAt.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24)\n      );\n      return sum + daysDiff;\n    }, 0);\n    \n    return Math.round(totalTime / processedApps.length);\n  }\n\n  private getTopJobs(applications: Application[], jobs: Job[]): any[] {\n    const jobAppCounts = new Map<number, number>();\n    \n    applications.forEach(app => {\n      const current = jobAppCounts.get(app.jobId) || 0;\n      jobAppCounts.set(app.jobId, current + 1);\n    });\n    \n    return Array.from(jobAppCounts.entries())\n      .map(([jobId, count]) => {\n        const job = jobs.find(j => j.id === jobId);\n        return job ? {\n          title: job.title,\n          company: job.company,\n          applications: count\n        } : null;\n      })\n      .filter(item => item !== null)\n      .sort((a, b) => b!.applications - a!.applications)\n      .slice(0, 5);\n  }\n\n  private getMonthlyApplications(applications: Application[]): any[] {\n    const monthlyData: { [key: string]: number } = {};\n    const now = new Date();\n    \n    // Initialiser les 6 derniers mois\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const key = date.toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' });\n      monthlyData[key] = 0;\n    }\n    \n    // Compter les applications par mois\n    applications.forEach(app => {\n      const createdAt = app.createdAt || new Date();\n      const date = new Date(createdAt);\n      const key = date.toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' });\n      if (monthlyData.hasOwnProperty(key)) {\n        monthlyData[key]++;\n      }\n    });\n    \n    return Object.entries(monthlyData).map(([month, count]) => ({ month, count }));\n  }\n\n  private getScoreDistribution(applications: Application[]): any[] {\n    const scoredApps = applications.filter(a => (a.autoScore || 0) > 0);\n    \n    if (scoredApps.length === 0) return [];\n    \n    const ranges = [\n      { name: '0-20', min: 0, max: 20, count: 0 },\n      { name: '21-40', min: 21, max: 40, count: 0 },\n      { name: '41-60', min: 41, max: 60, count: 0 },\n      { name: '61-80', min: 61, max: 80, count: 0 },\n      { name: '81-100', min: 81, max: 100, count: 0 },\n    ];\n    \n    scoredApps.forEach(app => {\n      const score = app.autoScore || 0;\n      const range = ranges.find(r => score >= r.min && score <= r.max);\n      if (range) range.count++;\n    });\n    \n    return ranges.filter(r => r.count > 0);\n  }\n\n  // Employee operations\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const newEmployee: Employee = {\n      id: this.nextEmployeeId++,\n      ...employee,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.employees.set(newEmployee.id, newEmployee);\n    return newEmployee;\n  }\n\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async getEmployeeByUserId(userId: string): Promise<Employee | undefined> {\n    return Array.from(this.employees.values()).find(e => e.userId === userId);\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async updateEmployee(id: number, data: Partial<Employee>): Promise<Employee> {\n    const existing = this.employees.get(id);\n    if (!existing) {\n      throw new Error(\"Employee not found\");\n    }\n    const updated: Employee = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.employees.set(id, updated);\n    return updated;\n  }\n\n  // Contract operations\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const newContract: Contract = {\n      id: this.nextContractId++,\n      ...contract,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.contracts.set(newContract.id, newContract);\n    return newContract;\n  }\n\n  async getContract(id: number): Promise<Contract | undefined> {\n    return this.contracts.get(id);\n  }\n\n  async getContractsByEmployee(employeeId: number): Promise<Contract[]> {\n    return Array.from(this.contracts.values()).filter(c => c.employeeId === employeeId);\n  }\n\n  async updateContract(id: number, data: Partial<Contract>): Promise<Contract> {\n    const existing = this.contracts.get(id);\n    if (!existing) {\n      throw new Error(\"Contract not found\");\n    }\n    const updated: Contract = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.contracts.set(id, updated);\n    return updated;\n  }\n\n  async getActiveContracts(): Promise<Contract[]> {\n    return Array.from(this.contracts.values()).filter(c => c.status === \"active\");\n  }\n\n  // Leave operations\n  async createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest> {\n    const newRequest: LeaveRequest = {\n      id: this.nextLeaveRequestId++,\n      ...request,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.leaveRequests.set(newRequest.id, newRequest);\n    return newRequest;\n  }\n\n  async getLeaveRequest(id: number): Promise<LeaveRequest | undefined> {\n    return this.leaveRequests.get(id);\n  }\n\n  async getLeaveRequestsByEmployee(employeeId: number): Promise<LeaveRequest[]> {\n    return Array.from(this.leaveRequests.values()).filter(r => r.employeeId === employeeId);\n  }\n\n  async updateLeaveRequest(id: number, data: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const existing = this.leaveRequests.get(id);\n    if (!existing) {\n      throw new Error(\"Leave request not found\");\n    }\n    const updated: LeaveRequest = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.leaveRequests.set(id, updated);\n    return updated;\n  }\n\n  async getLeaveBalance(employeeId: number, year: number): Promise<LeaveBalance[]> {\n    return Array.from(this.leaveBalances.values())\n      .filter(b => b.employeeId === employeeId && b.year === year);\n  }\n\n  async updateLeaveBalance(employeeId: number, year: number, leaveType: string, usedDays: number): Promise<void> {\n    const key = `${employeeId}-${year}-${leaveType}`;\n    const existing = this.leaveBalances.get(key);\n    \n    if (existing) {\n      const updated: LeaveBalance = {\n        ...existing,\n        usedDays: existing.usedDays + usedDays,\n        remainingDays: existing.totalDays - (existing.usedDays + usedDays),\n        updatedAt: new Date(),\n      };\n      this.leaveBalances.set(key, updated);\n    } else {\n      // Créer un nouveau solde avec des valeurs par défaut\n      const defaultDays = this.getDefaultLeaveDays(leaveType);\n      const newBalance: LeaveBalance = {\n        id: Math.floor(Math.random() * 1000000),\n        employeeId,\n        year,\n        leaveType,\n        totalDays: defaultDays,\n        usedDays,\n        remainingDays: defaultDays - usedDays,\n        carriedOverDays: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.leaveBalances.set(key, newBalance);\n    }\n  }\n\n  private getDefaultLeaveDays(leaveType: string): number {\n    const defaults: { [key: string]: number } = {\n      vacation: 25,\n      sick: 90,\n      personal: 5,\n      maternity: 112,\n      paternity: 25\n    };\n    return defaults[leaveType] || 0;\n  }\n\n  // HR Request operations\n  async createHrRequest(request: InsertHrRequest): Promise<HrRequest> {\n    const newRequest: HrRequest = {\n      id: this.nextHrRequestId++,\n      ...request,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.hrRequests.set(newRequest.id, newRequest);\n    return newRequest;\n  }\n\n  async getHrRequest(id: number): Promise<HrRequest | undefined> {\n    return this.hrRequests.get(id);\n  }\n\n  async getHrRequestsByEmployee(employeeId: number): Promise<HrRequest[]> {\n    return Array.from(this.hrRequests.values()).filter(r => r.employeeId === employeeId);\n  }\n\n  async getAllHrRequests(): Promise<HrRequest[]> {\n    return Array.from(this.hrRequests.values());\n  }\n\n  async updateHrRequest(id: number, data: Partial<HrRequest>): Promise<HrRequest> {\n    const existing = this.hrRequests.get(id);\n    if (!existing) {\n      throw new Error(\"HR request not found\");\n    }\n    const updated: HrRequest = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.hrRequests.set(id, updated);\n    return updated;\n  }\n\n  // Payroll operations (simplified implementation)\n  async createPayroll(payroll: InsertPayroll): Promise<Payroll> {\n    const newPayroll: Payroll = {\n      id: this.nextPayrollId++,\n      ...payroll,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.payrolls.set(newPayroll.id, newPayroll);\n    return newPayroll;\n  }\n\n  async getPayroll(id: number): Promise<Payroll | undefined> {\n    return this.payrolls.get(id);\n  }\n\n  async getPayrollByEmployee(employeeId: number, period?: string): Promise<Payroll[]> {\n    const payrolls = Array.from(this.payrolls.values())\n      .filter(p => p.employeeId === employeeId);\n    \n    if (period) {\n      return payrolls.filter(p => p.period === period);\n    }\n    return payrolls;\n  }\n\n  async updatePayroll(id: number, data: Partial<Payroll>): Promise<Payroll> {\n    const existing = this.payrolls.get(id);\n    if (!existing) {\n      throw new Error(\"Payroll not found\");\n    }\n    const updated: Payroll = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.payrolls.set(id, updated);\n    return updated;\n  }\n\n  async getApplicationsForJob(jobId: number): Promise<Application[]> {\n    return Array.from(this.applications.values()).filter(app => app.jobId === jobId);\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const userToUpsert = {\n      id: userData.id || `user-${Date.now()}`,\n      email: userData.email || null,\n      password: userData.password || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      phone: userData.phone || null,\n      role: userData.role || \"candidate\",\n      employeeId: userData.employeeId || null,\n      gender: userData.gender || null,\n      maritalStatus: userData.maritalStatus || null,\n      address: userData.address || null,\n      residencePlace: userData.residencePlace || null,\n      idDocumentType: userData.idDocumentType || null,\n      idDocumentNumber: userData.idDocumentNumber || null,\n      birthDate: userData.birthDate || null,\n      birthPlace: userData.birthPlace || null,\n      birthCountry: userData.birthCountry || null,\n      nationality: userData.nationality || null,\n      profileCompleted: userData.profileCompleted || false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const [user] = await db\n      .insert(users)\n      .values(userToUpsert)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userToUpsert.email,\n          firstName: userToUpsert.firstName,\n          lastName: userToUpsert.lastName,\n          profileImageUrl: userToUpsert.profileImageUrl,\n          phone: userToUpsert.phone,\n          role: userToUpsert.role,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Nouvelle méthode pour créer un utilisateur\n  async createUser(userData: Partial<User>): Promise<User> {\n    const userToCreate = {\n      id: userData.id || `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      email: userData.email || null,\n      password: userData.password || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      phone: userData.phone || null,\n      role: userData.role || \"candidate\",\n      employeeId: userData.employeeId || null,\n      gender: userData.gender || null,\n      maritalStatus: userData.maritalStatus || null,\n      address: userData.address || null,\n      residencePlace: userData.residencePlace || null,\n      idDocumentType: userData.idDocumentType || null,\n      idDocumentNumber: userData.idDocumentNumber || null,\n      birthDate: userData.birthDate || null,\n      birthPlace: userData.birthPlace || null,\n      birthCountry: userData.birthCountry || null,\n      nationality: userData.nationality || null,\n      profileCompleted: userData.profileCompleted || false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const [user] = await db.insert(users).values(userToCreate).returning();\n    return user;\n  }\n\n  // Nouvelle méthode pour trouver un utilisateur par email\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async updateUser(id: string, updateData: Partial<User>): Promise<User> {\n    const [updated] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    if (!updated) throw new Error(\"User not found\");\n    return updated;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role));\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Job operations\n  async getAllJobs(): Promise<Job[]> {\n    return await db.select().from(jobs).where(eq(jobs.isActive, 1)).orderBy(desc(jobs.createdAt));\n  }\n\n  async getJob(id: number): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db.insert(jobs).values(job).returning();\n    return newJob;\n  }\n\n  async updateJob(id: number, updateData: Partial<InsertJob>): Promise<Job | undefined> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob || undefined;\n  }\n\n  async deleteJob(id: number): Promise<boolean> {\n    const result = await db.delete(jobs).where(eq(jobs.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async searchJobs(query: string, filters: any): Promise<Job[]> {\n    let baseQuery = db.select().from(jobs).where(eq(jobs.isActive, 1));\n    \n    const conditions = [];\n    \n    if (query) {\n      conditions.push(\n        or(\n          like(jobs.title, `%${query}%`),\n          like(jobs.description, `%${query}%`),\n          like(jobs.company, `%${query}%`)\n        )\n      );\n    }\n    \n    if (filters.location) {\n      conditions.push(like(jobs.location, `%${filters.location}%`));\n    }\n    \n    if (filters.contractType && filters.contractType.length > 0) {\n      const contractConditions = filters.contractType.map((type: string) => eq(jobs.contractType, type));\n      conditions.push(or(...contractConditions));\n    }\n    \n    if (conditions.length > 0) {\n      baseQuery = baseQuery.where(and(...conditions));\n    }\n    \n    return await baseQuery.orderBy(desc(jobs.createdAt));\n  }\n\n  // Application operations with enhanced scoring\n  async createApplication(application: InsertApplication, userId: string): Promise<Application> {\n    // Calculate auto-score based on application data\n    const autoScore = await this.calculateAutoScore(application);\n    \n    const [newApp] = await db\n      .insert(applications)\n      .values({ ...application, userId, autoScore })\n      .returning();\n    return newApp;\n  }\n\n  private async calculateAutoScore(application: InsertApplication): Promise<number> {\n    let score = 50; // Base score\n    \n    // Présence du CV (+20 points)\n    if (application.cvPath) score += 20;\n    \n    // Qualité de la lettre de motivation (+15 points)\n    if (application.coverLetter && application.coverLetter.length > 100) score += 15;\n    \n    // Copie diplôme (+15 points)\n    if (application.diplomaPath) score += 15;\n    \n    return Math.min(score, 100);\n  }\n\n  async getApplicationsByUser(userId: string): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.userId, userId)).orderBy(desc(applications.createdAt));\n  }\n\n  async getAllApplications(): Promise<Application[]> {\n    return await db.select().from(applications).orderBy(desc(applications.createdAt));\n  }\n\n  async getApplication(id: number): Promise<Application | undefined> {\n    const [app] = await db.select().from(applications).where(eq(applications.id, id));\n    return app || undefined;\n  }\n\n  async updateApplication(id: number, application: UpdateApplication): Promise<Application> {\n    const [updated] = await db\n      .update(applications)\n      .set({ ...application, updatedAt: new Date() })\n      .where(eq(applications.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Application not found\");\n    return updated;\n  }\n\n  async deleteApplication(id: number): Promise<boolean> {\n    const result = await db.delete(applications).where(eq(applications.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getApplicationsForJob(jobId: number): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.jobId, jobId)).orderBy(desc(applications.createdAt));\n  }\n\n  async getApplicationsByRecruiter(recruiterId: string): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.assignedRecruiter, recruiterId)).orderBy(desc(applications.createdAt));\n  }\n\n  // Enhanced search operations for applications with scoring\n  async searchApplicationsByScore(\n    minAutoScore?: number,\n    maxAutoScore?: number,\n    minManualScore?: number,\n    maxManualScore?: number\n  ): Promise<Application[]> {\n    const conditions = [];\n    \n    if (minAutoScore !== undefined) {\n      conditions.push(gte(applications.autoScore, minAutoScore));\n    }\n    if (maxAutoScore !== undefined) {\n      conditions.push(lte(applications.autoScore, maxAutoScore));\n    }\n    if (minManualScore !== undefined) {\n      conditions.push(gte(applications.manualScore, minManualScore));\n    }\n    if (maxManualScore !== undefined) {\n      conditions.push(lte(applications.manualScore, maxManualScore));\n    }\n    \n    let query = db.select().from(applications);\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query.orderBy(desc(applications.autoScore), desc(applications.manualScore));\n  }\n\n  async getApplicationsByDateRange(startDate: Date, endDate: Date): Promise<Application[]> {\n    return await db\n      .select()\n      .from(applications)\n      .where(and(\n        gte(applications.createdAt, startDate),\n        lte(applications.createdAt, endDate)\n      ))\n      .orderBy(desc(applications.createdAt));\n  }\n\n  async getRecruiters(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(\n        or(\n          eq(users.role, \"recruiter\"),\n          eq(users.role, \"hr\"),\n          eq(users.role, \"admin\")\n        )\n      );\n  }\n\n  // Payroll operations\n  async createPayroll(payrollData: InsertPayroll): Promise<Payroll> {\n    const [newPayroll] = await db.insert(payroll).values(payrollData).returning();\n    return newPayroll;\n  }\n\n  async getPayroll(id: number): Promise<Payroll | undefined> {\n    const [payrollEntry] = await db.select().from(payroll).where(eq(payroll.id, id));\n    return payrollEntry || undefined;\n  }\n\n  async getPayrollsByEmployee(employeeId: number): Promise<Payroll[]> {\n    return await db.select().from(payroll).where(eq(payroll.employeeId, employeeId)).orderBy(desc(payroll.period));\n  }\n\n  async getPayrollsByPeriod(period: string): Promise<Payroll[]> {\n    return await db.select().from(payroll).where(eq(payroll.period, period)).orderBy(desc(payroll.createdAt));\n  }\n\n  async updatePayroll(id: number, data: Partial<Payroll>): Promise<Payroll> {\n    const [updated] = await db\n      .update(payroll)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(payroll.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Payroll not found\");\n    return updated;\n  }\n\n  async getAllPayrolls(): Promise<Payroll[]> {\n    return await db.select().from(payroll).orderBy(desc(payroll.period), desc(payroll.createdAt));\n  }\n\n  // Employee operations - implement basic ones needed\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db.insert(employees).values(employee).returning();\n    return newEmployee;\n  }\n\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee || undefined;\n  }\n\n  async getEmployeeByUserId(userId: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.userId, userId));\n    return employee || undefined;\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees).orderBy(desc(employees.createdAt));\n  }\n\n  async updateEmployee(id: number, data: Partial<Employee>): Promise<Employee> {\n    const [updated] = await db\n      .update(employees)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(employees.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Employee not found\");\n    return updated;\n  }\n\n  // Contract operations - implement basic ones needed\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const [newContract] = await db.insert(contracts).values(contract).returning();\n    return newContract;\n  }\n\n  async getContract(id: number): Promise<Contract | undefined> {\n    const [contract] = await db.select().from(contracts).where(eq(contracts.id, id));\n    return contract || undefined;\n  }\n\n  async getContractsByEmployee(employeeId: number): Promise<Contract[]> {\n    return await db.select().from(contracts).where(eq(contracts.employeeId, employeeId)).orderBy(desc(contracts.createdAt));\n  }\n\n  async updateContract(id: number, data: Partial<Contract>): Promise<Contract> {\n    const [updated] = await db\n      .update(contracts)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(contracts.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Contract not found\");\n    return updated;\n  }\n\n  async getActiveContracts(): Promise<Contract[]> {\n    return await db.select().from(contracts).where(eq(contracts.status, \"active\")).orderBy(desc(contracts.createdAt));\n  }\n\n  // Leave operations - implement basic ones needed\n  async createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [newRequest] = await db.insert(leaveRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async getLeaveRequest(id: number): Promise<LeaveRequest | undefined> {\n    const [request] = await db.select().from(leaveRequests).where(eq(leaveRequests.id, id));\n    return request || undefined;\n  }\n\n  async getLeaveRequestsByEmployee(employeeId: number): Promise<LeaveRequest[]> {\n    return await db.select().from(leaveRequests).where(eq(leaveRequests.employeeId, employeeId)).orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async updateLeaveRequest(id: number, data: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const [updated] = await db\n      .update(leaveRequests)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Leave request not found\");\n    return updated;\n  }\n\n  async getLeaveBalance(employeeId: number, year: number): Promise<LeaveBalance[]> {\n    return await db\n      .select()\n      .from(leaveBalances)\n      .where(and(\n        eq(leaveBalances.employeeId, employeeId),\n        eq(leaveBalances.year, year)\n      ));\n  }\n\n  // HR Request operations - implement basic ones needed\n  async createHrRequest(request: InsertHrRequest): Promise<HrRequest> {\n    const [newRequest] = await db.insert(hrRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async getHrRequest(id: number): Promise<HrRequest | undefined> {\n    const [request] = await db.select().from(hrRequests).where(eq(hrRequests.id, id));\n    return request || undefined;\n  }\n\n  async getHrRequestsByEmployee(employeeId: number): Promise<HrRequest[]> {\n    return await db.select().from(hrRequests).where(eq(hrRequests.employeeId, employeeId)).orderBy(desc(hrRequests.createdAt));\n  }\n\n  async getAllHrRequests(): Promise<HrRequest[]> {\n    return await db.select().from(hrRequests).orderBy(desc(hrRequests.createdAt));\n  }\n\n  async updateHrRequest(id: number, data: Partial<HrRequest>): Promise<HrRequest> {\n    const [updated] = await db\n      .update(hrRequests)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(hrRequests.id, id))\n      .returning();\n    if (!updated) throw new Error(\"HR request not found\");\n    return updated;\n  }\n\n  // Analytics operations\n  async getKPIs(): Promise<any> {\n    const allApplications = await db.select().from(applications);\n    const allJobs = await db.select().from(jobs).where(eq(jobs.isActive, 1));\n    const allUsers = await db.select().from(users);\n    \n    const candidates = allUsers.filter(u => u.role === 'candidate');\n    const recruiters = allUsers.filter(u => u.role === 'recruiter' || u.role === 'hr');\n    \n    const statusCounts = {\n      pending: allApplications.filter(a => a.status === 'pending').length,\n      reviewed: allApplications.filter(a => a.status === 'reviewed').length,\n      interview: allApplications.filter(a => a.status === 'interview').length,\n      accepted: allApplications.filter(a => a.status === 'accepted').length,\n      rejected: allApplications.filter(a => a.status === 'rejected').length,\n      assigned: allApplications.filter(a => a.status === 'assigned').length,\n      scored: allApplications.filter(a => a.status === 'scored').length,\n    };\n\n    const conversionRate = allApplications.length > 0 \n      ? (statusCounts.accepted / allApplications.length) * 100\n      : 0;\n\n    return {\n      totalApplications: allApplications.length,\n      totalJobs: allJobs.length,\n      totalCandidates: candidates.length,\n      totalRecruiters: recruiters.length,\n      statusCounts,\n      conversionRate,\n      avgProcessingTime: 5,\n      topPerformingJobs: this.getTopJobsFromApplications(allApplications, allJobs)\n    };\n  }\n\n  private getTopJobsFromApplications(applications: Application[], jobs: Job[]) {\n    const jobApplicationCounts = new Map<number, number>();\n    \n    applications.forEach(app => {\n      const count = jobApplicationCounts.get(app.jobId) || 0;\n      jobApplicationCounts.set(app.jobId, count + 1);\n    });\n    \n    return Array.from(jobApplicationCounts.entries())\n      .map(([jobId, count]) => {\n        const job = jobs.find(j => j.id === jobId);\n        return job ? { \n          title: job.title, \n          company: job.company, \n          applications: count \n        } : null;\n      })\n      .filter(Boolean)\n      .sort((a, b) => (b?.applications || 0) - (a?.applications || 0))\n      .slice(0, 3);\n  }\n\n  async getApplicationAnalytics(): Promise<any> {\n    const allApplications = await db.select().from(applications);\n    \n    const monthlyData = [\n      { month: 'Jan', applications: allApplications.filter(a => a.createdAt && a.createdAt.getMonth() === 0).length },\n      { month: 'Fév', applications: allApplications.filter(a => a.createdAt && a.createdAt.getMonth() === 1).length },\n      { month: 'Mar', applications: allApplications.filter(a => a.createdAt && a.createdAt.getMonth() === 2).length },\n    ];\n    \n    const statusData = [\n      { name: 'En attente', value: allApplications.filter(a => a.status === 'pending').length },\n      { name: 'Examinées', value: allApplications.filter(a => a.status === 'reviewed').length },\n      { name: 'Entretiens', value: allApplications.filter(a => a.status === 'interview').length },\n      { name: 'Acceptées', value: allApplications.filter(a => a.status === 'accepted').length },\n      { name: 'Refusées', value: allApplications.filter(a => a.status === 'rejected').length },\n    ].filter(item => item.value > 0);\n    \n    return {\n      monthlyApplications: monthlyData,\n      statusDistribution: statusData,\n      scoreDistribution: this.getScoreDistribution(allApplications)\n    };\n  }\n\n  private getScoreDistribution(applications: Application[]) {\n    const distribution = {\n      '0-20': 0, '21-40': 0, '41-60': 0, '61-80': 0, '81-100': 0\n    };\n    \n    applications.forEach(app => {\n      const score = app.autoScore || 0;\n      if (score <= 20) distribution['0-20']++;\n      else if (score <= 40) distribution['21-40']++;\n      else if (score <= 60) distribution['41-60']++;\n      else if (score <= 80) distribution['61-80']++;\n      else distribution['81-100']++;\n    });\n    \n    return Object.entries(distribution).map(([range, count]) => ({\n      range, count\n    }));\n  }\n\n  async getJobAnalytics(): Promise<any> {\n    const allJobs = await db.select().from(jobs);\n    const allApplications = await db.select().from(applications);\n    \n    const jobPopularity = allJobs.map(job => ({\n      name: job.title.length > 20 ? job.title.substring(0, 20) + '...' : job.title,\n      applications: allApplications.filter(a => a.jobId === job.id).length,\n    })).sort((a, b) => b.applications - a.applications).slice(0, 5);\n    \n    return {\n      jobPopularity,\n    };\n  }\n\n  // Onboarding operations implementation\n  async createOnboardingProcess(process: InsertOnboardingProcess): Promise<OnboardingProcess> {\n    const [newProcess] = await db\n      .insert(onboardingProcesses)\n      .values(process)\n      .returning();\n    return newProcess;\n  }\n\n  async getOnboardingProcess(id: number): Promise<OnboardingProcess | undefined> {\n    const [process] = await db.select().from(onboardingProcesses).where(eq(onboardingProcesses.id, id));\n    return process || undefined;\n  }\n\n  async getAllOnboardingProcesses(): Promise<OnboardingProcess[]> {\n    return await db.select().from(onboardingProcesses).where(eq(onboardingProcesses.isActive, true)).orderBy(desc(onboardingProcesses.createdAt));\n  }\n\n  async updateOnboardingProcess(id: number, data: Partial<OnboardingProcess>): Promise<OnboardingProcess> {\n    const [updated] = await db\n      .update(onboardingProcesses)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(onboardingProcesses.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Onboarding process not found\");\n    return updated;\n  }\n\n  async createOnboardingStep(step: InsertOnboardingStep): Promise<OnboardingStep> {\n    const [newStep] = await db\n      .insert(onboardingSteps)\n      .values(step)\n      .returning();\n    return newStep;\n  }\n\n  async getOnboardingStepsByProcess(processId: number): Promise<OnboardingStep[]> {\n    return await db.select().from(onboardingSteps).where(eq(onboardingSteps.processId, processId)).orderBy(onboardingSteps.stepNumber);\n  }\n\n  async updateOnboardingStep(id: number, data: Partial<OnboardingStep>): Promise<OnboardingStep> {\n    const [updated] = await db\n      .update(onboardingSteps)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(onboardingSteps.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Onboarding step not found\");\n    return updated;\n  }\n\n  async createCandidateOnboarding(onboarding: InsertCandidateOnboarding): Promise<CandidateOnboarding> {\n    const [newOnboarding] = await db\n      .insert(candidateOnboarding)\n      .values(onboarding)\n      .returning();\n    \n    // Créer automatiquement les completions pour toutes les étapes du processus\n    const steps = await this.getOnboardingStepsByProcess(onboarding.processId);\n    for (const step of steps) {\n      await db.insert(onboardingStepCompletions).values({\n        candidateOnboardingId: newOnboarding.id,\n        stepId: step.id,\n        status: \"pending\"\n      });\n    }\n    \n    return newOnboarding;\n  }\n\n  async getCandidateOnboarding(id: number): Promise<CandidateOnboarding | undefined> {\n    const [onboarding] = await db.select().from(candidateOnboarding).where(eq(candidateOnboarding.id, id));\n    return onboarding || undefined;\n  }\n\n  async getCandidateOnboardingByUser(userId: string): Promise<CandidateOnboarding[]> {\n    return await db.select().from(candidateOnboarding).where(eq(candidateOnboarding.userId, userId)).orderBy(desc(candidateOnboarding.createdAt));\n  }\n\n  async updateCandidateOnboarding(id: number, data: Partial<CandidateOnboarding>): Promise<CandidateOnboarding> {\n    const [updated] = await db\n      .update(candidateOnboarding)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(candidateOnboarding.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Candidate onboarding not found\");\n    return updated;\n  }\n\n  async createStepCompletion(completion: InsertStepCompletion): Promise<OnboardingStepCompletion> {\n    const [newCompletion] = await db\n      .insert(onboardingStepCompletions)\n      .values(completion)\n      .returning();\n    return newCompletion;\n  }\n\n  async getStepCompletionsByOnboarding(onboardingId: number): Promise<OnboardingStepCompletion[]> {\n    return await db.select().from(onboardingStepCompletions).where(eq(onboardingStepCompletions.candidateOnboardingId, onboardingId)).orderBy(onboardingStepCompletions.id);\n  }\n\n  async updateStepCompletion(id: number, data: Partial<OnboardingStepCompletion>): Promise<OnboardingStepCompletion> {\n    const [updated] = await db\n      .update(onboardingStepCompletions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(onboardingStepCompletions.id, id))\n      .returning();\n    if (!updated) throw new Error(\"Step completion not found\");\n    \n    // Mettre à jour le progrès de l'onboarding\n    await this.updateOnboardingProgress(data.candidateOnboardingId!);\n    \n    return updated;\n  }\n\n  async generateEmployeeId(firstName: string, lastName: string): Promise<string> {\n    // Générer les initiales\n    const firstInitial = firstName.charAt(0).toUpperCase();\n    const lastInitial = lastName.charAt(0).toUpperCase();\n    const baseId = `${firstInitial}${lastInitial}`;\n    \n    // Vérifier les IDs existants pour éviter les doublons\n    const existingUsers = await db.select().from(users).where(like(users.employeeId, `${baseId}%`));\n    \n    if (existingUsers.length === 0) {\n      return `${baseId}001`;\n    }\n    \n    // Trouver le prochain numéro disponible\n    const numbers = existingUsers\n      .map(user => user.employeeId?.substring(2))\n      .filter(num => num && /^\\d{3}$/.test(num))\n      .map(num => parseInt(num!, 10))\n      .sort((a, b) => a - b);\n    \n    let nextNumber = 1;\n    for (const num of numbers) {\n      if (num === nextNumber) {\n        nextNumber++;\n      } else {\n        break;\n      }\n    }\n    \n    return `${baseId}${nextNumber.toString().padStart(3, '0')}`;\n  }\n\n  private async updateOnboardingProgress(candidateOnboardingId: number): Promise<void> {\n    // Calculer le pourcentage de progression\n    const completions = await this.getStepCompletionsByOnboarding(candidateOnboardingId);\n    const totalSteps = completions.length;\n    const completedSteps = completions.filter(c => c.status === 'completed').length;\n    const progress = totalSteps > 0 ? Math.round((completedSteps / totalSteps) * 100) : 0;\n    \n    // Déterminer le statut global\n    let status = 'pending';\n    if (progress > 0 && progress < 100) status = 'in_progress';\n    else if (progress === 100) status = 'completed';\n    \n    await this.updateCandidateOnboarding(candidateOnboardingId, {\n      progress,\n      status,\n      actualCompletionDate: progress === 100 ? new Date().toISOString().split('T')[0] : undefined\n    });\n  }\n\n  async getOnboardingAnalytics(): Promise<any> {\n    const allOnboardings = await db.select().from(candidateOnboarding);\n    const allProcesses = await db.select().from(onboardingProcesses);\n    const allCompletions = await db.select().from(onboardingStepCompletions);\n    \n    // Calcul des métriques de base\n    const totalOnboardings = allOnboardings.length;\n    const completedOnboardings = allOnboardings.filter(o => o.status === 'completed').length;\n    const inProgressOnboardings = allOnboardings.filter(o => o.status === 'in_progress').length;\n    const pendingOnboardings = allOnboardings.filter(o => o.status === 'pending').length;\n    \n    // Taux de completion\n    const completionRate = totalOnboardings > 0 ? Math.round((completedOnboardings / totalOnboardings) * 100) : 0;\n    \n    // Temps moyen de completion\n    const completedWithDates = allOnboardings.filter(o => \n      o.status === 'completed' && o.startDate && o.actualCompletionDate\n    );\n    \n    const averageCompletionTime = completedWithDates.length > 0 \n      ? Math.round(completedWithDates.reduce((avg, o) => {\n          const start = new Date(o.startDate);\n          const end = new Date(o.actualCompletionDate!);\n          const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));\n          return avg + days;\n        }, 0) / completedWithDates.length)\n      : 0;\n    \n    // Distribution par département\n    const departmentStats = allProcesses.reduce((acc, process) => {\n      const processOnboardings = allOnboardings.filter(o => o.processId === process.id);\n      if (!acc[process.department]) {\n        acc[process.department] = { total: 0, completed: 0 };\n      }\n      acc[process.department].total += processOnboardings.length;\n      acc[process.department].completed += processOnboardings.filter(o => o.status === 'completed').length;\n      return acc;\n    }, {} as any);\n    \n    // Évolution mensuelle\n    const monthlyData = this.getMonthlyOnboardingData(allOnboardings);\n    \n    // Top étapes problématiques (qui prennent le plus de temps)\n    const stepStats = await this.getStepAnalytics(allCompletions);\n    \n    return {\n      overview: {\n        totalOnboardings,\n        completedOnboardings,\n        inProgressOnboardings,\n        pendingOnboardings,\n        completionRate,\n        averageCompletionTime\n      },\n      departmentStats: Object.entries(departmentStats).map(([department, stats]: [string, any]) => ({\n        department,\n        total: stats.total,\n        completed: stats.completed,\n        completionRate: stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0\n      })),\n      monthlyProgress: monthlyData,\n      stepPerformance: stepStats\n    };\n  }\n\n  private getMonthlyOnboardingData(onboardings: CandidateOnboarding[]) {\n    const last6Months = [];\n    const now = new Date();\n    \n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthName = date.toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' });\n      \n      const monthStart = new Date(date.getFullYear(), date.getMonth(), 1);\n      const monthEnd = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n      \n      const started = onboardings.filter(o => {\n        const startDate = new Date(o.startDate);\n        return startDate >= monthStart && startDate <= monthEnd;\n      }).length;\n      \n      const completed = onboardings.filter(o => {\n        if (!o.actualCompletionDate) return false;\n        const completionDate = new Date(o.actualCompletionDate);\n        return completionDate >= monthStart && completionDate <= monthEnd;\n      }).length;\n      \n      last6Months.push({\n        month: monthName,\n        started,\n        completed\n      });\n    }\n    \n    return last6Months;\n  }\n  \n  private async getStepAnalytics(completions: OnboardingStepCompletion[]) {\n    const stepGroups = completions.reduce((acc, completion) => {\n      if (!acc[completion.stepId]) {\n        acc[completion.stepId] = {\n          completions: [],\n          totalTime: 0,\n          count: 0\n        };\n      }\n      \n      if (completion.status === 'completed' && completion.completionDate) {\n        acc[completion.stepId].completions.push(completion);\n        acc[completion.stepId].count++;\n      }\n      \n      return acc;\n    }, {} as any);\n    \n    const stepAnalytics = [];\n    for (const [stepId, data] of Object.entries(stepGroups) as [string, any][]) {\n      const step = await db.select().from(onboardingSteps).where(eq(onboardingSteps.id, parseInt(stepId))).limit(1);\n      if (step.length > 0) {\n        const completionRate = (data.count / completions.filter(c => c.stepId === parseInt(stepId)).length) * 100;\n        stepAnalytics.push({\n          stepTitle: step[0].title,\n          category: step[0].category,\n          completionRate: Math.round(completionRate),\n          totalCompletions: data.count\n        });\n      }\n    }\n    \n    return stepAnalytics.sort((a, b) => a.completionRate - b.completionRate).slice(0, 5);\n  }\n\n  async getOnboardingProcessTemplates(): Promise<OnboardingProcess[]> {\n    // Retourner les templates par défaut basés sur les départements courants\n    const templates = [\n      {\n        id: 0,\n        name: \"Onboarding Personnel Aviation\",\n        description: \"Processus complet pour l'intégration du personnel navigant et technique aéronautique\",\n        department: \"Aviation\",\n        isActive: true,\n        estimatedDuration: 21,\n        createdAt: new Date().toISOString(),\n        createdBy: \"system\",\n        updatedAt: new Date().toISOString(),\n        steps: [\n          { title: \"Accueil et présentation\", category: \"administrative\", duration: 2 },\n          { title: \"Formation sécurité aéroportuaire\", category: \"formation\", duration: 8 },\n          { title: \"Certification IATA\", category: \"technique\", duration: 16 },\n          { title: \"Formation équipements\", category: \"technique\", duration: 12 },\n          { title: \"Évaluation pratique\", category: \"formation\", duration: 4 }\n        ]\n      },\n      {\n        id: 1,\n        name: \"Onboarding Sécurité Aéroport\",\n        description: \"Formation spécialisée pour le personnel de sécurité aéroportuaire\",\n        department: \"Sécurité\",\n        isActive: true,\n        estimatedDuration: 14,\n        createdAt: new Date().toISOString(),\n        createdBy: \"system\",\n        updatedAt: new Date().toISOString(),\n        steps: [\n          { title: \"Procédures de sécurité\", category: \"formation\", duration: 8 },\n          { title: \"Contrôle passagers\", category: \"technique\", duration: 12 },\n          { title: \"Gestion des incidents\", category: \"formation\", duration: 6 },\n          { title: \"Certification sécurité\", category: \"administrative\", duration: 4 }\n        ]\n      },\n      {\n        id: 2,\n        name: \"Onboarding Administration\",\n        description: \"Intégration pour les postes administratifs et de gestion\",\n        department: \"Administration\",\n        isActive: true,\n        estimatedDuration: 10,\n        createdAt: new Date().toISOString(),\n        createdBy: \"system\",\n        updatedAt: new Date().toISOString(),\n        steps: [\n          { title: \"Présentation de l'entreprise\", category: \"administrative\", duration: 2 },\n          { title: \"Systèmes informatiques\", category: \"technique\", duration: 4 },\n          { title: \"Procédures administratives\", category: \"formation\", duration: 6 },\n          { title: \"Évaluation des compétences\", category: \"formation\", duration: 2 }\n        ]\n      }\n    ];\n    \n    return templates as OnboardingProcess[];\n  }\n\n  // Feedback system implementation\n  async createOnboardingFeedback(feedback: InsertOnboardingFeedback): Promise<OnboardingFeedback> {\n    const [newFeedback] = await db\n      .insert(onboardingFeedback)\n      .values(feedback)\n      .returning();\n    return newFeedback;\n  }\n\n  async getOnboardingFeedback(candidateOnboardingId?: number): Promise<OnboardingFeedback[]> {\n    if (candidateOnboardingId) {\n      return await db\n        .select()\n        .from(onboardingFeedback)\n        .where(eq(onboardingFeedback.candidateOnboardingId, candidateOnboardingId));\n    }\n    return await db.select().from(onboardingFeedback);\n  }\n\n  // Achievement system implementation\n  async createAchievement(achievement: InsertOnboardingAchievement): Promise<OnboardingAchievement> {\n    const [newAchievement] = await db\n      .insert(onboardingAchievements)\n      .values(achievement)\n      .returning();\n    return newAchievement;\n  }\n\n  async getAchievements(): Promise<OnboardingAchievement[]> {\n    return await db\n      .select()\n      .from(onboardingAchievements)\n      .where(eq(onboardingAchievements.isActive, true));\n  }\n\n  async awardAchievement(userId: string, achievementId: number, candidateOnboardingId?: number): Promise<UserAchievement> {\n    // Check if user already has this achievement\n    const existing = await db\n      .select()\n      .from(userAchievements)\n      .where(\n        and(\n          eq(userAchievements.userId, userId),\n          eq(userAchievements.achievementId, achievementId)\n        )\n      );\n\n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    const [award] = await db\n      .insert(userAchievements)\n      .values({\n        userId,\n        achievementId,\n        candidateOnboardingId\n      })\n      .returning();\n    return award;\n  }\n\n  async getUserAchievements(userId: string): Promise<UserAchievement[]> {\n    return await db\n      .select({\n        id: userAchievements.id,\n        userId: userAchievements.userId,\n        achievementId: userAchievements.achievementId,\n        candidateOnboardingId: userAchievements.candidateOnboardingId,\n        earnedAt: userAchievements.earnedAt,\n        createdAt: userAchievements.createdAt,\n        achievement: {\n          id: onboardingAchievements.id,\n          name: onboardingAchievements.name,\n          description: onboardingAchievements.description,\n          icon: onboardingAchievements.icon,\n          category: onboardingAchievements.category,\n          points: onboardingAchievements.points\n        }\n      })\n      .from(userAchievements)\n      .leftJoin(onboardingAchievements, eq(userAchievements.achievementId, onboardingAchievements.id))\n      .where(eq(userAchievements.userId, userId));\n  }\n\n  // Calendar events implementation\n  async createOnboardingEvent(event: InsertOnboardingEvent): Promise<OnboardingEvent> {\n    const [newEvent] = await db\n      .insert(onboardingEvents)\n      .values(event)\n      .returning();\n    return newEvent;\n  }\n\n  async getOnboardingEvents(candidateOnboardingId?: number): Promise<OnboardingEvent[]> {\n    if (candidateOnboardingId) {\n      return await db\n        .select()\n        .from(onboardingEvents)\n        .where(eq(onboardingEvents.candidateOnboardingId, candidateOnboardingId))\n        .orderBy(onboardingEvents.startDateTime);\n    }\n    return await db\n      .select()\n      .from(onboardingEvents)\n      .orderBy(onboardingEvents.startDateTime);\n  }\n\n  async updateOnboardingEvent(id: number, data: Partial<OnboardingEvent>): Promise<OnboardingEvent> {\n    const [updatedEvent] = await db\n      .update(onboardingEvents)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(onboardingEvents.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  // Initialize default achievements\n  async initializeDefaultAchievements(): Promise<void> {\n    const existingAchievements = await this.getAchievements();\n    if (existingAchievements.length > 0) return;\n\n    const defaultAchievements = [\n      {\n        name: \"Premier Pas\",\n        description: \"Terminé votre première étape d'onboarding\",\n        icon: \"Star\",\n        category: \"milestone\",\n        criteria: JSON.stringify({ stepCount: 1 }),\n        points: 10\n      },\n      {\n        name: \"Rapide comme l'Éclair\",\n        description: \"Terminé 3 étapes en une journée\",\n        icon: \"Zap\",\n        category: \"speed\",\n        criteria: JSON.stringify({ stepsPerDay: 3 }),\n        points: 25\n      },\n      {\n        name: \"Professionnel Aviation\",\n        description: \"Terminé toutes les formations aviation\",\n        icon: \"Plane\",\n        category: \"milestone\",\n        criteria: JSON.stringify({ categoryComplete: \"formation\" }),\n        points: 50\n      },\n      {\n        name: \"Communicateur\",\n        description: \"Échangé 10 messages avec votre mentor\",\n        icon: \"MessageSquare\",\n        category: \"engagement\",\n        criteria: JSON.stringify({ messageCount: 10 }),\n        points: 20\n      },\n      {\n        name: \"Expert Sécurité\",\n        description: \"Réussi toutes les certifications sécurité\",\n        icon: \"Shield\",\n        category: \"quality\",\n        criteria: JSON.stringify({ securityCertifications: true }),\n        points: 40\n      }\n    ];\n\n    for (const achievement of defaultAchievements) {\n      await this.createAchievement(achievement);\n    }\n  }\n  \n  // Interview Management stubs (temporary implementations for interface compliance)\n  async createInterview(interview: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...interview };\n  }\n  \n  async getInterviews(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  async updateInterview(id: number, data: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id, ...data };\n  }\n  \n  // Interview Evaluations stubs\n  async createInterviewEvaluation(evaluation: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...evaluation };\n  }\n  \n  async getInterviewEvaluations(interviewId: number): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Interview Feedback stubs\n  async createInterviewFeedback(feedback: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...feedback };\n  }\n  \n  async getInterviewFeedback(interviewId: number): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Performance Management stubs\n  async createPerformanceReview(review: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...review };\n  }\n  \n  async getPerformanceReviews(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  async updatePerformanceReview(id: number, data: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id, ...data };\n  }\n  \n  // Training Management stubs\n  async createTrainingProgram(program: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...program };\n  }\n  \n  async getTrainingPrograms(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  async createEmployeeTraining(training: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...training };\n  }\n  \n  async getEmployeeTraining(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Disciplinary Actions stubs\n  async createDisciplinaryAction(action: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...action };\n  }\n  \n  async getDisciplinaryActions(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Employee Documents stubs\n  async createEmployeeDocument(document: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...document };\n  }\n  \n  async getEmployeeDocuments(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Time Tracking stubs\n  async createTimeEntry(entry: any): Promise<any> {\n    // TODO: Implement with actual database tables\n    return { id: 1, ...entry };\n  }\n  \n  async getTimeEntries(): Promise<any[]> {\n    // TODO: Implement with actual database tables\n    return [];\n  }\n  \n  // Candidate Invitations implementation\n  async createCandidateInvitation(invitation: InsertCandidateInvitation): Promise<CandidateInvitation> {\n    const [newInvitation] = await db\n      .insert(candidateInvitations)\n      .values(invitation)\n      .returning();\n    return newInvitation;\n  }\n  \n  async getCandidateInvitations(): Promise<CandidateInvitation[]> {\n    return await db\n      .select()\n      .from(candidateInvitations)\n      .orderBy(desc(candidateInvitations.createdAt));\n  }\n  \n  async getCandidateInvitationByToken(token: string): Promise<CandidateInvitation | undefined> {\n    const [invitation] = await db\n      .select()\n      .from(candidateInvitations)\n      .where(eq(candidateInvitations.invitationToken, token));\n    return invitation || undefined;\n  }\n  \n  async updateCandidateInvitation(id: number, data: Partial<CandidateInvitation>): Promise<CandidateInvitation> {\n    const [updated] = await db\n      .update(candidateInvitations)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(candidateInvitations.id, id))\n      .returning();\n    return updated;\n  }\n}\n\n// Use DatabaseStorage instead of MemStorage\nexport const storage = new DatabaseStorage();\n","size_bytes":86416},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  serial,\n  integer,\n  boolean,\n  decimal,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (supports both Replit Auth and email/password)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\"), // For email/password authentication (nullable for Replit users)\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\"),\n  role: text(\"role\").default(\"candidate\"), // candidate, recruiter, hr, admin\n  \n  // Informations personnelles détaillées\n  gender: text(\"gender\"), // Homme, Femme, Autre\n  maritalStatus: text(\"marital_status\"), // Célibataire, Marié(e), Divorcé(e), Veuf(ve)\n  address: text(\"address\"),\n  residencePlace: varchar(\"residence_place\"),\n  \n  // Pièce d'identité\n  idDocumentType: text(\"id_document_type\"), // CNI, Passeport, Permis de séjour\n  idDocumentNumber: varchar(\"id_document_number\"),\n  \n  // Informations de naissance\n  birthDate: timestamp(\"birth_date\"),\n  birthPlace: varchar(\"birth_place\"),\n  birthCountry: varchar(\"birth_country\"),\n  nationality: varchar(\"nationality\"),\n  \n  // Profil complété\n  profileCompleted: boolean(\"profile_completed\").default(false),\n  \n  // Identifiant employé unique basé sur les initiales\n  employeeId: varchar(\"employee_id\").unique(),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Job postings table\nexport const jobs = pgTable(\"jobs\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  company: text(\"company\").notNull(),\n  location: text(\"location\").notNull(),\n  description: text(\"description\").notNull(),\n  requirements: text(\"requirements\"),\n  salary: text(\"salary\"),\n  contractType: text(\"contract_type\").notNull(), // CDI, CDD, Freelance  \n  experienceLevel: text(\"experience_level\"), // Débutant, Intermédiaire, Senior\n  skills: text(\"skills\").array(),\n  isActive: integer(\"is_active\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Applications table\nexport const applications = pgTable(\"applications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  jobId: integer(\"job_id\").notNull().references(() => jobs.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, reviewed, interview, accepted, rejected\n  coverLetter: text(\"cover_letter\"),\n  cvPath: text(\"cv_path\"),\n  motivationLetterPath: text(\"motivation_letter_path\"),\n  diplomaPath: text(\"diploma_path\"), // Chemin vers la copie du diplôme\n  availability: timestamp(\"availability_date\"),\n  salaryExpectation: text(\"salary_expectation\"),\n  phone: varchar(\"phone\"),\n  assignedRecruiter: varchar(\"assigned_recruiter\").references(() => users.id), // Recruteur assigné\n  autoScore: integer(\"auto_score\").default(0), // Score automatique (0-100)\n  manualScore: integer(\"manual_score\"), // Note manuelle du recruteur (0-100)\n  scoreNotes: text(\"score_notes\"), // Commentaires du recruteur\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Employees table - pour les candidats devenus employés\nexport const employees = pgTable(\"employees\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  employeeNumber: varchar(\"employee_number\").notNull().unique(),\n  department: text(\"department\"),\n  position: text(\"position\").notNull(),\n  manager: varchar(\"manager_id\").references(() => users.id),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, terminated\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contracts table - gestion des contrats\nexport const contracts = pgTable(\"contracts\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  applicationId: integer(\"application_id\").references(() => applications.id),\n  contractType: text(\"contract_type\").notNull(), // CDI, CDD, Stage, Freelance\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  trialPeriodEnd: date(\"trial_period_end\"),\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"EUR\"),\n  workingHours: integer(\"working_hours\").default(35), // heures par semaine\n  vacationDays: integer(\"vacation_days\").default(25), // jours de congés annuels\n  signatureStatus: text(\"signature_status\").default(\"pending\"), // pending, signed, rejected\n  signedAt: timestamp(\"signed_at\"),\n  contractPath: text(\"contract_path\"), // chemin vers le PDF du contrat\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, active, terminated, expired\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contract amendments table - avenants\nexport const contractAmendments = pgTable(\"contract_amendments\", {\n  id: serial(\"id\").primaryKey(),\n  contractId: integer(\"contract_id\").notNull().references(() => contracts.id),\n  amendmentType: text(\"amendment_type\").notNull(), // salary_change, role_change, schedule_change, etc.\n  description: text(\"description\").notNull(),\n  effectiveDate: date(\"effective_date\").notNull(),\n  previousValue: text(\"previous_value\"),\n  newValue: text(\"new_value\").notNull(),\n  signatureStatus: text(\"signature_status\").default(\"pending\"),\n  signedAt: timestamp(\"signed_at\"),\n  documentPath: text(\"document_path\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payroll table - gestion des salaires\nexport const payroll = pgTable(\"payroll\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  period: text(\"period\").notNull(), // YYYY-MM format\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n  bonuses: decimal(\"bonuses\", { precision: 10, scale: 2 }).default(\"0\"),\n  overtime: decimal(\"overtime\", { precision: 10, scale: 2 }).default(\"0\"),\n  deductions: decimal(\"deductions\", { precision: 10, scale: 2 }).default(\"0\"),\n  socialCharges: decimal(\"social_charges\", { precision: 10, scale: 2 }).default(\"0\"),\n  taxes: decimal(\"taxes\", { precision: 10, scale: 2 }).default(\"0\"),\n  netSalary: decimal(\"net_salary\", { precision: 10, scale: 2 }).notNull(),\n  workingDays: integer(\"working_days\").default(22),\n  absenceDays: integer(\"absence_days\").default(0),\n  status: text(\"status\").default(\"draft\"), // draft, validated, paid\n  paymentDate: date(\"payment_date\"),\n  payslipPath: text(\"payslip_path\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leave requests table - demandes de congés\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  leaveType: text(\"leave_type\").notNull(), // vacation, sick, personal, maternity, etc.\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  totalDays: integer(\"total_days\").notNull(),\n  reason: text(\"reason\"),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected, cancelled\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  substituteCoverage: varchar(\"substitute_coverage\").references(() => users.id),\n  emergencyContact: text(\"emergency_contact\"),\n  attachmentPath: text(\"attachment_path\"), // certificat médical, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leave balances table - soldes de congés\nexport const leaveBalances = pgTable(\"leave_balances\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  year: integer(\"year\").notNull(),\n  leaveType: text(\"leave_type\").notNull(),\n  totalDays: integer(\"total_days\").notNull(),\n  usedDays: integer(\"used_days\").default(0),\n  remainingDays: integer(\"remaining_days\").notNull(),\n  carriedOverDays: integer(\"carried_over_days\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// HR requests table - demandes internes RH\nexport const hrRequests = pgTable(\"hr_requests\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").notNull().references(() => employees.id),\n  requestType: text(\"request_type\").notNull(), // address_change, equipment, certificate, etc.\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priority: text(\"priority\").default(\"normal\"), // low, normal, high, urgent\n  status: text(\"status\").default(\"pending\"), // pending, in_progress, completed, rejected\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  attachmentPath: text(\"attachment_path\"),\n  responseNotes: text(\"response_notes\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Onboarding Process Templates table - définit les modèles de processus d'onboarding\nexport const onboardingProcesses = pgTable(\"onboarding_processes\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(), // Ex: \"Onboarding Standard Aviation\", \"Processus Sécurité Aéroport\"\n  description: text(\"description\"),\n  department: text(\"department\"), // Aviation, Sécurité, Administration, etc.\n  isActive: boolean(\"is_active\").default(true),\n  estimatedDuration: integer(\"estimated_duration\"), // Durée estimée en jours\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Onboarding Steps table - définit les étapes de chaque processus\nexport const onboardingSteps = pgTable(\"onboarding_steps\", {\n  id: serial(\"id\").primaryKey(),\n  processId: integer(\"process_id\").notNull().references(() => onboardingProcesses.id),\n  stepNumber: integer(\"step_number\").notNull(), // Ordre de l'étape\n  title: text(\"title\").notNull(), // Ex: \"Formation Sécurité\", \"Remise Badge d'Accès\"\n  description: text(\"description\"),\n  category: text(\"category\"), // documentation, formation, administrative, technique\n  isRequired: boolean(\"is_required\").default(true),\n  estimatedDuration: integer(\"estimated_duration\"), // Durée estimée en heures\n  assignedRole: text(\"assigned_role\"), // admin, hr, security, supervisor\n  requiredDocuments: text(\"required_documents\").array(), // Documents nécessaires\n  completionCriteria: text(\"completion_criteria\"), // Critères de validation\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Candidate Onboarding table - instance d'onboarding pour un candidat spécifique\nexport const candidateOnboarding = pgTable(\"candidate_onboarding\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  processId: integer(\"process_id\").notNull().references(() => onboardingProcesses.id),\n  applicationId: integer(\"application_id\").references(() => applications.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, suspended\n  startDate: date(\"start_date\"),\n  expectedCompletionDate: date(\"expected_completion_date\"),\n  actualCompletionDate: date(\"actual_completion_date\"),\n  assignedMentor: varchar(\"assigned_mentor\").references(() => users.id), // Mentor assigné\n  progress: integer(\"progress\").default(0), // Pourcentage de progression (0-100)\n  notes: text(\"notes\"), // Notes générales sur l'onboarding\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Onboarding Step Completions table - suivi de la complétion de chaque étape\nexport const onboardingStepCompletions = pgTable(\"onboarding_step_completions\", {\n  id: serial(\"id\").primaryKey(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").notNull().references(() => candidateOnboarding.id),\n  stepId: integer(\"step_id\").notNull().references(() => onboardingSteps.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, skipped, blocked\n  startDate: timestamp(\"start_date\"),\n  completionDate: timestamp(\"completion_date\"),\n  completedBy: varchar(\"completed_by\").references(() => users.id), // Qui a validé l'étape\n  notes: text(\"notes\"), // Commentaires sur l'étape\n  attachments: text(\"attachments\").array(), // Fichiers joints (certificats, etc.)\n  validationRequired: boolean(\"validation_required\").default(false),\n  validatedBy: varchar(\"validated_by\").references(() => users.id),\n  validationDate: timestamp(\"validation_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Onboarding notifications\nexport const onboardingNotifications = pgTable(\"onboarding_notifications\", {\n  id: serial(\"id\").primaryKey(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").references(() => candidateOnboarding.id).notNull(),\n  recipientId: varchar(\"recipient_id\", { length: 255 }).notNull(), // User ID\n  type: varchar(\"type\", { length: 50 }).notNull(), // step_completed, step_overdue, process_completed, reminder\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  relatedStepId: integer(\"related_step_id\").references(() => onboardingSteps.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Onboarding communications\nexport const onboardingCommunications = pgTable(\"onboarding_communications\", {\n  id: serial(\"id\").primaryKey(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").references(() => candidateOnboarding.id).notNull(),\n  senderId: varchar(\"sender_id\", { length: 255 }).notNull(),\n  senderRole: varchar(\"sender_role\", { length: 50 }).notNull(), // candidate, mentor, admin\n  message: text(\"message\").notNull(),\n  attachments: text(\"attachments\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Onboarding feedback from candidates\nexport const onboardingFeedback = pgTable(\"onboarding_feedback\", {\n  id: serial(\"id\").primaryKey(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").references(() => candidateOnboarding.id).notNull(),\n  userId: varchar(\"user_id\", { length: 255 }).notNull(),\n  stepId: integer(\"step_id\").references(() => onboardingSteps.id),\n  overallRating: integer(\"overall_rating\").notNull(), // 1-5 stars\n  stepRating: integer(\"step_rating\"), // 1-5 stars for specific step\n  clarity: integer(\"clarity\").notNull(), // 1-5 stars\n  support: integer(\"support\").notNull(), // 1-5 stars  \n  usefulness: integer(\"usefulness\").notNull(), // 1-5 stars\n  comments: text(\"comments\"),\n  suggestions: text(\"suggestions\"),\n  wouldRecommend: boolean(\"would_recommend\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Onboarding achievements/badges\nexport const onboardingAchievements = pgTable(\"onboarding_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\", { length: 100 }), // lucide icon name\n  category: varchar(\"category\", { length: 50 }), // speed, quality, engagement, milestone\n  criteria: text(\"criteria\"), // JSON criteria for earning\n  points: integer(\"points\").default(10),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// User achievements tracking\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\", { length: 255 }).notNull(),\n  achievementId: integer(\"achievement_id\").references(() => onboardingAchievements.id).notNull(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").references(() => candidateOnboarding.id),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Calendar events for onboarding\nexport const onboardingEvents = pgTable(\"onboarding_events\", {\n  id: serial(\"id\").primaryKey(),\n  candidateOnboardingId: integer(\"candidate_onboarding_id\").references(() => candidateOnboarding.id).notNull(),\n  stepId: integer(\"step_id\").references(() => onboardingSteps.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  eventType: varchar(\"event_type\", { length: 50 }), // training, meeting, deadline, review\n  startDateTime: timestamp(\"start_date_time\").notNull(),\n  endDateTime: timestamp(\"end_date_time\"),\n  location: varchar(\"location\", { length: 255 }),\n  attendees: text(\"attendees\").array(), // user IDs\n  isRecurring: boolean(\"is_recurring\").default(false),\n  status: varchar(\"status\", { length: 20 }).default(\"scheduled\"), // scheduled, completed, cancelled\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Interview sessions for candidate evaluation\nexport const interviews = pgTable(\"interviews\", {\n  id: serial(\"id\").primaryKey(),\n  candidateId: varchar(\"candidate_id\", { length: 255 }).notNull(),\n  applicationId: integer(\"application_id\").references(() => applications.id),\n  interviewerId: varchar(\"interviewer_id\", { length: 255 }).notNull(),\n  interviewType: varchar(\"interview_type\", { length: 50 }).notNull(), // phone, video, onsite, technical\n  scheduledDateTime: timestamp(\"scheduled_date_time\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  location: varchar(\"location\", { length: 255 }),\n  meetingLink: varchar(\"meeting_link\", { length: 500 }),\n  status: varchar(\"status\", { length: 20 }).default(\"scheduled\"), // scheduled, completed, cancelled, no_show\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Interview evaluations and scoring\nexport const interviewEvaluations = pgTable(\"interview_evaluations\", {\n  id: serial(\"id\").primaryKey(),\n  interviewId: integer(\"interview_id\").references(() => interviews.id).notNull(),\n  criteriaName: varchar(\"criteria_name\", { length: 255 }).notNull(), // Technical Skills, Communication, Problem Solving, etc.\n  score: integer(\"score\").notNull(), // 1-10 scale\n  maxScore: integer(\"max_score\").default(10),\n  comments: text(\"comments\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Overall interview feedback\nexport const interviewFeedback = pgTable(\"interview_feedback\", {\n  id: serial(\"id\").primaryKey(),\n  interviewId: integer(\"interview_id\").references(() => interviews.id).notNull(),\n  overallScore: integer(\"overall_score\").notNull(), // 1-100\n  recommendation: varchar(\"recommendation\", { length: 50 }).notNull(), // hire, reject, second_interview\n  strengths: text(\"strengths\"),\n  weaknesses: text(\"weaknesses\"),\n  detailedFeedback: text(\"detailed_feedback\"),\n  culturalFit: integer(\"cultural_fit\"), // 1-10 scale\n  technicalCompetency: integer(\"technical_competency\"), // 1-10 scale\n  communicationSkills: integer(\"communication_skills\"), // 1-10 scale\n  problemSolving: integer(\"problem_solving\"), // 1-10 scale\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Employee performance reviews\nexport const performanceReviews = pgTable(\"performance_reviews\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  reviewerId: varchar(\"reviewer_id\", { length: 255 }).notNull(),\n  reviewPeriod: varchar(\"review_period\", { length: 100 }).notNull(), // Q1 2024, Annual 2024, etc.\n  reviewType: varchar(\"review_type\", { length: 50 }).default(\"annual\"), // annual, quarterly, probation\n  overallRating: integer(\"overall_rating\").notNull(), // 1-5 scale\n  goals: text(\"goals\"),\n  achievements: text(\"achievements\"),\n  areasForImprovement: text(\"areas_for_improvement\"),\n  developmentPlan: text(\"development_plan\"),\n  managerComments: text(\"manager_comments\"),\n  employeeComments: text(\"employee_comments\"),\n  status: varchar(\"status\", { length: 20 }).default(\"draft\"), // draft, completed, acknowledged\n  reviewDate: timestamp(\"review_date\").notNull(),\n  nextReviewDate: timestamp(\"next_review_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Training programs and courses\nexport const trainingPrograms = pgTable(\"training_programs\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }), // safety, technical, compliance, leadership\n  duration: integer(\"duration\"), // in hours\n  isRequired: boolean(\"is_required\").default(false),\n  expirationMonths: integer(\"expiration_months\"), // how many months before recertification needed\n  provider: varchar(\"provider\", { length: 255 }),\n  cost: varchar(\"cost\", { length: 50 }),\n  maxParticipants: integer(\"max_participants\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Employee training records\nexport const employeeTraining = pgTable(\"employee_training\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  trainingProgramId: integer(\"training_program_id\").references(() => trainingPrograms.id).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"enrolled\"), // enrolled, in_progress, completed, failed\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow(),\n  startDate: timestamp(\"start_date\"),\n  completionDate: timestamp(\"completion_date\"),\n  expirationDate: timestamp(\"expiration_date\"),\n  score: integer(\"score\"), // percentage score if applicable\n  certificate: varchar(\"certificate\", { length: 500 }), // path to certificate file\n  assignedBy: varchar(\"assigned_by\", { length: 255 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Disciplinary actions\nexport const disciplinaryActions = pgTable(\"disciplinary_actions\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  actionType: varchar(\"action_type\", { length: 50 }).notNull(), // verbal_warning, written_warning, suspension, termination\n  reason: varchar(\"reason\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  actionDate: timestamp(\"action_date\").notNull(),\n  issuedBy: varchar(\"issued_by\", { length: 255 }).notNull(),\n  witnessedBy: varchar(\"witnessed_by\", { length: 255 }),\n  followUpRequired: boolean(\"follow_up_required\").default(false),\n  followUpDate: timestamp(\"follow_up_date\"),\n  employeeResponse: text(\"employee_response\"),\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // active, resolved, appealed\n  attachments: text(\"attachments\").array(), // document paths\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Employee documents management\nexport const employeeDocuments = pgTable(\"employee_documents\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  documentType: varchar(\"document_type\", { length: 100 }).notNull(), // contract, id_copy, diploma, certificate\n  documentName: varchar(\"document_name\", { length: 255 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 500 }).notNull(),\n  uploadedBy: varchar(\"uploaded_by\", { length: 255 }).notNull(),\n  isConfidential: boolean(\"is_confidential\").default(true),\n  expirationDate: timestamp(\"expiration_date\"),\n  tags: text(\"tags\").array(),\n  notes: text(\"notes\"),\n  fileSize: integer(\"file_size\"), // in bytes\n  mimeType: varchar(\"mime_type\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Time tracking and attendance\nexport const timeEntries = pgTable(\"time_entries\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  entryDate: timestamp(\"entry_date\").notNull(),\n  clockIn: timestamp(\"clock_in\"),\n  clockOut: timestamp(\"clock_out\"),\n  breakStart: timestamp(\"break_start\"),\n  breakEnd: timestamp(\"break_end\"),\n  totalHours: varchar(\"total_hours\", { length: 10 }), // HH:MM format\n  overtimeHours: varchar(\"overtime_hours\", { length: 10 }), // HH:MM format\n  entryType: varchar(\"entry_type\", { length: 20 }).default(\"regular\"), // regular, overtime, holiday\n  location: varchar(\"location\", { length: 255 }),\n  notes: text(\"notes\"),\n  approvedBy: varchar(\"approved_by\", { length: 255 }),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, approved, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\n// Export schemas for validation\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  isActive: z.boolean().optional().transform((val) => val ? 1 : 0)\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContractSchema = createInsertSchema(contracts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAmendmentSchema = createInsertSchema(contractAmendments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPayrollSchema = createInsertSchema(payroll).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHrRequestSchema = createInsertSchema(hrRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  availability: z.string().optional().nullable()\n});\n\nexport const updateApplicationSchema = insertApplicationSchema.partial();\n\n// Onboarding schemas\nexport const insertOnboardingProcessSchema = createInsertSchema(onboardingProcesses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOnboardingStepSchema = createInsertSchema(onboardingSteps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCandidateOnboardingSchema = createInsertSchema(candidateOnboarding).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStepCompletionSchema = createInsertSchema(onboardingStepCompletions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOnboardingNotificationSchema = createInsertSchema(onboardingNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOnboardingCommunicationSchema = createInsertSchema(onboardingCommunications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOnboardingFeedbackSchema = createInsertSchema(onboardingFeedback).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOnboardingAchievementSchema = createInsertSchema(onboardingAchievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOnboardingEventSchema = createInsertSchema(onboardingEvents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInterviewEvaluationSchema = createInsertSchema(interviewEvaluations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInterviewFeedbackSchema = createInsertSchema(interviewFeedback).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPerformanceReviewSchema = createInsertSchema(performanceReviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTrainingProgramSchema = createInsertSchema(trainingPrograms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeTrainingSchema = createInsertSchema(employeeTraining).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDisciplinaryActionSchema = createInsertSchema(disciplinaryActions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeDocumentSchema = createInsertSchema(employeeDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTimeEntrySchema = createInsertSchema(timeEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Application = typeof applications.$inferSelect;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type UpdateApplication = z.infer<typeof updateApplicationSchema>;\n\n// New HR module types\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Contract = typeof contracts.$inferSelect;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type ContractAmendment = typeof contractAmendments.$inferSelect;\nexport type InsertAmendment = z.infer<typeof insertAmendmentSchema>;\nexport type Payroll = typeof payroll.$inferSelect;\nexport type InsertPayroll = z.infer<typeof insertPayrollSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type LeaveBalance = typeof leaveBalances.$inferSelect;\nexport type HrRequest = typeof hrRequests.$inferSelect;\nexport type InsertHrRequest = z.infer<typeof insertHrRequestSchema>;\n\n// Onboarding types\nexport type OnboardingProcess = typeof onboardingProcesses.$inferSelect;\nexport type InsertOnboardingProcess = z.infer<typeof insertOnboardingProcessSchema>;\nexport type OnboardingStep = typeof onboardingSteps.$inferSelect;\nexport type InsertOnboardingStep = z.infer<typeof insertOnboardingStepSchema>;\nexport type CandidateOnboarding = typeof candidateOnboarding.$inferSelect;\nexport type InsertCandidateOnboarding = z.infer<typeof insertCandidateOnboardingSchema>;\nexport type OnboardingStepCompletion = typeof onboardingStepCompletions.$inferSelect;\nexport type InsertStepCompletion = z.infer<typeof insertStepCompletionSchema>;\nexport type OnboardingNotification = typeof onboardingNotifications.$inferSelect;\nexport type InsertOnboardingNotification = z.infer<typeof insertOnboardingNotificationSchema>;\nexport type OnboardingCommunication = typeof onboardingCommunications.$inferSelect;\nexport type InsertOnboardingCommunication = z.infer<typeof insertOnboardingCommunicationSchema>;\nexport type OnboardingFeedback = typeof onboardingFeedback.$inferSelect;\nexport type InsertOnboardingFeedback = z.infer<typeof insertOnboardingFeedbackSchema>;\nexport type OnboardingAchievement = typeof onboardingAchievements.$inferSelect;\nexport type InsertOnboardingAchievement = z.infer<typeof insertOnboardingAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type OnboardingEvent = typeof onboardingEvents.$inferSelect;\nexport type InsertOnboardingEvent = z.infer<typeof insertOnboardingEventSchema>;\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\nexport type InterviewEvaluation = typeof interviewEvaluations.$inferSelect;\nexport type InsertInterviewEvaluation = z.infer<typeof insertInterviewEvaluationSchema>;\nexport type InterviewFeedback = typeof interviewFeedback.$inferSelect;\nexport type InsertInterviewFeedback = z.infer<typeof insertInterviewFeedbackSchema>;\nexport type PerformanceReview = typeof performanceReviews.$inferSelect;\nexport type InsertPerformanceReview = z.infer<typeof insertPerformanceReviewSchema>;\nexport type TrainingProgram = typeof trainingPrograms.$inferSelect;\nexport type InsertTrainingProgram = z.infer<typeof insertTrainingProgramSchema>;\nexport type EmployeeTraining = typeof employeeTraining.$inferSelect;\nexport type InsertEmployeeTraining = z.infer<typeof insertEmployeeTrainingSchema>;\nexport type DisciplinaryAction = typeof disciplinaryActions.$inferSelect;\nexport type InsertDisciplinaryAction = z.infer<typeof insertDisciplinaryActionSchema>;\nexport type EmployeeDocument = typeof employeeDocuments.$inferSelect;\nexport type InsertEmployeeDocument = z.infer<typeof insertEmployeeDocumentSchema>;\nexport type TimeEntry = typeof timeEntries.$inferSelect;\nexport type InsertTimeEntry = z.infer<typeof insertTimeEntrySchema>;\n\n// Table des invitations candidats pour présélectionnés\nexport const candidateInvitations = pgTable(\"candidate_invitations\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  jobId: integer(\"job_id\").notNull().references(() => jobs.id),\n  applicationId: integer(\"application_id\").references(() => applications.id),\n  invitationToken: varchar(\"invitation_token\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"sent\"), // sent, opened, completed, expired\n  sentBy: varchar(\"sent_by\").notNull().references(() => users.id),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  emailContent: text(\"email_content\"),\n  personalMessage: text(\"personal_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertCandidateInvitationSchema = createInsertSchema(candidateInvitations);\nexport type InsertCandidateInvitation = typeof candidateInvitations.$inferInsert;\nexport type CandidateInvitation = typeof candidateInvitations.$inferSelect;\n","size_bytes":35713},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport Landing from \"@/pages/Landing\";\nimport CandidateLogin from \"@/pages/CandidateLogin\";\nimport AdminLogin from \"@/pages/AdminLogin\";\n\n// Système de notification simple (remplace Toaster)\nfunction SimpleNotification({ message, type = \"info\" }: { message?: string; type?: \"info\" | \"success\" | \"error\" }) {\n  if (!message) return null;\n  \n  const colors = {\n    info: { bg: '#e3f2fd', border: '#2196f3', text: '#1565c0' },\n    success: { bg: '#e8f5e8', border: '#4caf50', text: '#2e7d32' },\n    error: { bg: '#ffebee', border: '#f44336', text: '#c62828' }\n  };\n  \n  const style = colors[type];\n  \n  return (\n    <div style={{\n      position: 'fixed',\n      top: '20px',\n      right: '20px',\n      padding: '1rem',\n      backgroundColor: style.bg,\n      border: `2px solid ${style.border}`,\n      borderRadius: '8px',\n      color: style.text,\n      zIndex: 1000,\n      maxWidth: '300px'\n    }}>\n      {message}\n    </div>\n  );\n}\n\nfunction Router() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background text-foreground\">\n        Chargement...\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={CandidateLogin} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Landing} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <div id=\"simple-notifications\"></div>\n        <Router />\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":2045},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Guinée-Bissau color scheme with airport theme */\n  --background: hsl(48 20% 96%); /* Light cream background like airport terminals */\n  --foreground: hsl(0 0% 15%); /* Dark gray/black for text */\n  --card: hsl(0 0% 100%); /* Pure white cards */\n  --card-foreground: hsl(0 0% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 15%);\n  --primary: hsl(0 75% 45%); /* Guinea-Bissau red */\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(120 60% 35%); /* Guinea-Bissau green */\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(48 15% 92%); /* Light neutral like airport floors */\n  --muted-foreground: hsl(0 0% 40%);\n  --accent: hsl(45 85% 55%); /* Guinea-Bissau yellow/gold */\n  --accent-foreground: hsl(0 0% 15%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(48 20% 85%); /* Subtle borders */\n  --input: hsl(48 20% 90%);\n  --ring: hsl(0 75% 45%); /* Red focus rings */\n  --chart-1: hsl(0 75% 45%); /* Red */\n  --chart-2: hsl(120 60% 35%); /* Green */\n  --chart-3: hsl(45 85% 55%); /* Yellow */\n  --chart-4: hsl(220 40% 45%); /* Blue for aviation */\n  --chart-5: hsl(0 0% 25%); /* Dark gray */\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 15%);\n  --sidebar-primary: hsl(0 75% 45%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(48 15% 92%);\n  --sidebar-accent-foreground: hsl(0 0% 15%);\n  --sidebar-border: hsl(48 20% 85%);\n  --sidebar-ring: hsl(0 75% 45%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Dark theme with airport night operations feel */\n  --background: hsl(220 25% 8%); /* Dark navy like night sky */\n  --foreground: hsl(48 20% 95%); /* Light cream text */\n  --card: hsl(220 20% 12%); /* Dark cards */\n  --card-foreground: hsl(48 20% 95%);\n  --popover: hsl(220 20% 12%);\n  --popover-foreground: hsl(48 20% 95%);\n  --primary: hsl(0 80% 55%); /* Brighter red for dark mode */\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(120 55% 40%); /* Adjusted green for dark mode */\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(220 20% 15%);\n  --muted-foreground: hsl(220 10% 65%);\n  --accent: hsl(45 90% 65%); /* Brighter yellow for visibility */\n  --accent-foreground: hsl(220 25% 8%);\n  --destructive: hsl(0 62.8% 50%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(220 20% 20%);\n  --input: hsl(220 20% 15%);\n  --ring: hsl(0 80% 55%);\n  --sidebar: hsl(220 20% 12%);\n  --sidebar-foreground: hsl(48 20% 95%);\n  --sidebar-primary: hsl(0 80% 55%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(220 20% 15%);\n  --sidebar-accent-foreground: hsl(48 20% 95%);\n  --sidebar-border: hsl(220 20% 20%);\n  --sidebar-ring: hsl(0 80% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom Airport Theme Styles */\n@layer components {\n  .airport-runway {\n    background: linear-gradient(\n      90deg,\n      hsl(0 0% 85%) 0%,\n      hsl(0 0% 95%) 45%,\n      hsl(0 0% 85%) 55%,\n      hsl(0 0% 95%) 100%\n    );\n  }\n  \n  .airport-lights {\n    position: relative;\n  }\n  \n  .airport-lights::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      radial-gradient(circle at 20% 50%, hsl(45 85% 55% / 0.1) 2px, transparent 2px),\n      radial-gradient(circle at 80% 50%, hsl(0 75% 45% / 0.1) 2px, transparent 2px);\n    background-size: 40px 20px;\n    pointer-events: none;\n  }\n  \n  .plane-path {\n    animation: fly 3s ease-in-out infinite;\n  }\n  \n  @keyframes fly {\n    0%, 100% { transform: translateX(0) rotate(0deg); }\n    50% { transform: translateX(10px) rotate(2deg); }\n  }\n}\n","size_bytes":4554},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ApplicationModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, X } from \"lucide-react\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertApplicationSchema } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Job } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { z } from \"zod\";\n\ninterface ApplicationModalProps {\n  job: Job | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst applicationFormSchema = insertApplicationSchema.extend({\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  email: z.string().email(\"Email invalide\"),\n  phone: z.string().optional(),\n  consent: z.boolean().refine(val => val === true, \"Vous devez accepter le traitement des données\"),\n});\n\nexport function ApplicationModal({ job, isOpen, onClose }: ApplicationModalProps) {\n  const [cvFile, setCvFile] = useState<string | null>(null);\n  const [motivationFile, setMotivationFile] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(applicationFormSchema),\n    defaultValues: {\n      jobId: job?.id || 0,\n      coverLetter: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      availabilityDate: undefined,\n      salaryExpectation: \"\",\n      consent: false,\n    },\n  });\n\n  const createApplicationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const { firstName, lastName, email, phone, consent, ...applicationData } = data;\n      const response = await apiRequest(\"POST\", \"/api/applications\", {\n        ...applicationData,\n        cvPath: cvFile,\n        motivationLetterPath: motivationFile,\n        phone,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Candidature envoyée\",\n        description: \"Votre candidature a été envoyée avec succès. Vous recevrez une confirmation par email.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      onClose();\n      form.reset();\n      setCvFile(null);\n      setMotivationFile(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous devez être connecté. Redirection vers la connexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Une erreur est survenue lors de l'envoi de votre candidature.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCvUpload = async () => {\n    const response = await apiRequest(\"GET\", \"/api/objects/upload\");\n    const { uploadURL } = await response.json();\n    return { method: \"PUT\" as const, url: uploadURL };\n  };\n\n  const handleCvComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful.length > 0) {\n      const uploadURL = result.successful[0].uploadURL as string;\n      const docResponse = await apiRequest(\"PUT\", \"/api/documents\", {\n        documentURL: uploadURL,\n      });\n      const { objectPath } = await docResponse.json();\n      setCvFile(objectPath);\n    }\n  };\n\n  const handleMotivationUpload = async () => {\n    const response = await apiRequest(\"GET\", \"/api/objects/upload\");\n    const { uploadURL } = await response.json();\n    return { method: \"PUT\" as const, url: uploadURL };\n  };\n\n  const handleMotivationComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful.length > 0) {\n      const uploadURL = result.successful[0].uploadURL as string;\n      const docResponse = await apiRequest(\"PUT\", \"/api/documents\", {\n        documentURL: uploadURL,\n      });\n      const { objectPath } = await docResponse.json();\n      setMotivationFile(objectPath);\n    }\n  };\n\n  const onSubmit = (data: any) => {\n    createApplicationMutation.mutate(data);\n  };\n\n  if (!job) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-application\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-modal-title\">\n            Postuler pour {job.title}\n          </DialogTitle>\n          <p className=\"text-muted-foreground\" data-testid=\"text-modal-company\">\n            {job.company}\n          </p>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Personal Information */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                Informations personnelles\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prénom *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          data-testid=\"input-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          data-testid=\"input-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          {...field} \n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Téléphone</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"tel\" \n                          {...field} \n                          placeholder=\"+33 1 23 45 67 89\"\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Documents */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                Documents\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                    CV * (PDF, DOC, DOCX - Max 5MB)\n                  </Label>\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={5 * 1024 * 1024} // 5MB\n                    onGetUploadParameters={handleCvUpload}\n                    onComplete={handleCvComplete}\n                    buttonClassName=\"w-full border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-primary transition-colors\"\n                  >\n                    <div className=\"flex flex-col items-center\" data-testid=\"upload-cv\">\n                      <Upload className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {cvFile ? \"CV téléchargé ✓\" : \"Cliquez pour télécharger votre CV\"}\n                      </p>\n                    </div>\n                  </ObjectUploader>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Lettre de motivation (optionnel)\n                  </Label>\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={5 * 1024 * 1024} // 5MB\n                    onGetUploadParameters={handleMotivationUpload}\n                    onComplete={handleMotivationComplete}\n                    buttonClassName=\"w-full border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-primary transition-colors\"\n                  >\n                    <div className=\"flex flex-col items-center\" data-testid=\"upload-motivation\">\n                      <Upload className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {motivationFile ? \"Lettre téléchargée ✓\" : \"Cliquez pour télécharger votre lettre de motivation\"}\n                      </p>\n                    </div>\n                  </ObjectUploader>\n                </div>\n              </div>\n            </div>\n\n            {/* Cover Letter */}\n            <FormField\n              control={form.control}\n              name=\"coverLetter\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Message de motivation</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      rows={5}\n                      placeholder=\"Expliquez votre motivation pour ce poste et mettez en avant vos compétences clés...\"\n                      data-testid=\"textarea-cover-letter\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Availability */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                Disponibilité\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"availabilityDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date de disponibilité</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field}\n                          value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                          onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                          data-testid=\"input-availability-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"salaryExpectation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prétentions salariales</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Ex: 45k € brut/an\"\n                          data-testid=\"input-salary-expectation\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Consent */}\n            <FormField\n              control={form.control}\n              name=\"consent\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                  <FormControl>\n                    <Checkbox \n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"checkbox-consent\"\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel className=\"text-sm text-muted-foreground\">\n                      J'autorise le traitement de mes données personnelles conformément au RGPD pour les besoins de ce processus de recrutement.{\" \"}\n                      <a href=\"#\" className=\"text-primary hover:text-primary/80\">\n                        En savoir plus\n                      </a>\n                    </FormLabel>\n                    <FormMessage />\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            {/* Submit */}\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createApplicationMutation.isPending || !cvFile}\n                data-testid=\"button-submit-application\"\n              >\n                {createApplicationMutation.isPending ? \"Envoi en cours...\" : \"Envoyer ma candidature\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14952},"client/src/components/JobCard.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Building2, MapPin, Calendar } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr, enUS, pt } from \"date-fns/locale\";\nimport { getLanguage, t } from \"@/lib/i18n\";\nimport type { Job } from \"@shared/schema\";\n\ninterface JobCardProps {\n  job: Job;\n  onApply: (job: Job) => void;\n}\n\nconst locales = {\n  fr: fr,\n  en: enUS,\n  pt: pt,\n};\n\nexport function JobCard({ job, onApply }: JobCardProps) {\n  const currentLang = getLanguage();\n  const locale = locales[currentLang];\n\n  const getContractTypeColor = (contractType: string) => {\n    switch (contractType) {\n      case 'CDI':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100';\n      case 'CDD':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';\n      case 'Freelance':\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  return (\n    <Card \n      className=\"hover:shadow-md transition-shadow cursor-pointer\"\n      data-testid={`card-job-${job.id}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <h3 \n              className=\"text-lg font-semibold text-foreground mb-2\"\n              data-testid={`text-job-title-${job.id}`}\n            >\n              {job.title}\n            </h3>\n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              <span className=\"flex items-center\">\n                <Building2 className=\"h-4 w-4 mr-1\" />\n                <span data-testid={`text-company-${job.id}`}>{job.company}</span>\n              </span>\n              <span className=\"flex items-center\">\n                <MapPin className=\"h-4 w-4 mr-1\" />\n                <span data-testid={`text-location-${job.id}`}>{job.location}</span>\n              </span>\n              <span className=\"flex items-center\">\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                <span data-testid={`text-date-${job.id}`}>\n                  {job.createdAt ? formatDistanceToNow(new Date(job.createdAt), { addSuffix: true, locale }) : 'Inconnu'}\n                </span>\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge \n              className={getContractTypeColor(job.contractType)}\n              data-testid={`badge-contract-${job.id}`}\n            >\n              {job.contractType}\n            </Badge>\n          </div>\n        </div>\n        \n        <p \n          className=\"text-muted-foreground mb-4 line-clamp-3\"\n          data-testid={`text-description-${job.id}`}\n        >\n          {job.description}\n        </p>\n        \n        {job.skills && job.skills.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {job.skills.map((skill, index) => (\n              <Badge \n                key={index}\n                variant=\"secondary\"\n                className=\"text-xs\"\n                data-testid={`badge-skill-${job.id}-${index}`}\n              >\n                {skill}\n              </Badge>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"flex justify-between items-center\">\n          <span \n            className=\"text-sm text-muted-foreground\"\n            data-testid={`text-experience-${job.id}`}\n          >\n            {job.experienceLevel && `${job.experienceLevel} d'expérience`}\n          </span>\n          <Button \n            onClick={() => onApply(job)}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            data-testid={`button-apply-${job.id}`}\n          >\n            {t('apply_button')}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4038},"client/src/components/LanguageSelector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { setLanguage, getLanguage, type Language } from \"@/lib/i18n\";\n\nconst languages = [\n  { code: 'fr' as Language, label: '🇫🇷 Français' },\n  { code: 'en' as Language, label: '🇬🇧 English' },\n  { code: 'pt' as Language, label: '🇵🇹 Português' },\n];\n\ninterface LanguageSelectorProps {\n  onLanguageChange?: () => void;\n}\n\nexport function LanguageSelector({ onLanguageChange }: LanguageSelectorProps) {\n  const [currentLang, setCurrentLang] = useState<Language>('fr');\n\n  useEffect(() => {\n    setCurrentLang(getLanguage());\n  }, []);\n\n  const handleLanguageChange = (newLang: Language) => {\n    setCurrentLang(newLang);\n    setLanguage(newLang);\n    onLanguageChange?.();\n    // Trigger a re-render of the app\n    window.location.reload();\n  };\n\n  return (\n    <Select value={currentLang} onValueChange={handleLanguageChange}>\n      <SelectTrigger \n        className=\"w-[140px] text-sm bg-background border border-border\"\n        data-testid=\"select-language\"\n      >\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent>\n        {languages.map((lang) => (\n          <SelectItem key={lang.code} value={lang.code} data-testid={`option-language-${lang.code}`}>\n            {lang.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":1447},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2782},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":355},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  fr: {\n    // Navigation\n    jobs: \"Offres d'emploi\",\n    about: \"À propos\",\n    contact: \"Contact\",\n    login: \"Connexion candidat\",\n    register: \"S'inscrire\",\n    \n    // Hero section\n    hero_title: \"Trouvez votre prochain emploi\",\n    hero_subtitle: \"Découvrez des milliers d'opportunités professionnelles adaptées à votre profil et candidatez en quelques clics.\",\n    search_placeholder: \"Titre du poste, mot-clé...\",\n    location_placeholder: \"Ville, région...\",\n    search_button: \"Rechercher\",\n    \n    // Job listings\n    jobs_found: \"offres trouvées\",\n    sort_newest: \"Plus récentes\",\n    sort_salary_asc: \"Salaire croissant\",\n    sort_salary_desc: \"Salaire décroissant\",\n    sort_relevance: \"Pertinence\",\n    apply_button: \"Postuler\",\n    \n    // Filters\n    filters: \"Filtres\",\n    contract_type: \"Type de contrat\",\n    salary: \"Salaire\",\n    experience: \"Expérience\",\n    all_salaries: \"Tous les salaires\",\n    \n    // Dashboard\n    dashboard: \"Tableau de bord\",\n    welcome: \"Bienvenue dans votre espace candidat\",\n    applications_sent: \"Candidatures envoyées\",\n    pending: \"En attente\",\n    interviews: \"Entretiens\",\n    profile_completed: \"Profil complété\",\n    recent_applications: \"Candidatures récentes\",\n    \n    // Application statuses\n    status_pending: \"En attente\",\n    status_reviewed: \"Examinée\",\n    status_interview: \"Entretien planifié\",\n    status_accepted: \"Acceptée\",\n    status_rejected: \"Refusée\",\n  },\n  en: {\n    // Navigation\n    jobs: \"Job Listings\",\n    about: \"About\",\n    contact: \"Contact\",\n    login: \"Candidate Login\",\n    register: \"Sign Up\",\n    \n    // Hero section\n    hero_title: \"Find Your Next Job\",\n    hero_subtitle: \"Discover thousands of professional opportunities tailored to your profile and apply with just a few clicks.\",\n    search_placeholder: \"Job title, keyword...\",\n    location_placeholder: \"City, region...\",\n    search_button: \"Search\",\n    \n    // Job listings\n    jobs_found: \"jobs found\",\n    sort_newest: \"Most Recent\",\n    sort_salary_asc: \"Salary Ascending\",\n    sort_salary_desc: \"Salary Descending\",\n    sort_relevance: \"Relevance\",\n    apply_button: \"Apply\",\n    \n    // Filters\n    filters: \"Filters\",\n    contract_type: \"Contract Type\",\n    salary: \"Salary\",\n    experience: \"Experience\",\n    all_salaries: \"All Salaries\",\n    \n    // Dashboard\n    dashboard: \"Dashboard\",\n    welcome: \"Welcome to your candidate area\",\n    applications_sent: \"Applications Sent\",\n    pending: \"Pending\",\n    interviews: \"Interviews\",\n    profile_completed: \"Profile Completed\",\n    recent_applications: \"Recent Applications\",\n    \n    // Application statuses\n    status_pending: \"Pending\",\n    status_reviewed: \"Reviewed\",\n    status_interview: \"Interview Scheduled\",\n    status_accepted: \"Accepted\",\n    status_rejected: \"Rejected\",\n  },\n  pt: {\n    // Navigation\n    jobs: \"Vagas de Emprego\",\n    about: \"Sobre\",\n    contact: \"Contato\",\n    login: \"Login Candidato\",\n    register: \"Cadastrar-se\",\n    \n    // Hero section\n    hero_title: \"Encontre Seu Próximo Emprego\",\n    hero_subtitle: \"Descubra milhares de oportunidades profissionais adaptadas ao seu perfil e candidate-se em poucos cliques.\",\n    search_placeholder: \"Título do cargo, palavra-chave...\",\n    location_placeholder: \"Cidade, região...\",\n    search_button: \"Pesquisar\",\n    \n    // Job listings\n    jobs_found: \"vagas encontradas\",\n    sort_newest: \"Mais Recentes\",\n    sort_salary_asc: \"Salário Crescente\",\n    sort_salary_desc: \"Salário Decrescente\",\n    sort_relevance: \"Relevância\",\n    apply_button: \"Candidatar-se\",\n    \n    // Filters\n    filters: \"Filtros\",\n    contract_type: \"Tipo de Contrato\",\n    salary: \"Salário\",\n    experience: \"Experiência\",\n    all_salaries: \"Todos os Salários\",\n    \n    // Dashboard\n    dashboard: \"Painel\",\n    welcome: \"Bem-vindo à sua área de candidato\",\n    applications_sent: \"Candidaturas Enviadas\",\n    pending: \"Pendente\",\n    interviews: \"Entrevistas\",\n    profile_completed: \"Perfil Completado\",\n    recent_applications: \"Candidaturas Recentes\",\n    \n    // Application statuses\n    status_pending: \"Pendente\",\n    status_reviewed: \"Analisada\",\n    status_interview: \"Entrevista Agendada\",\n    status_accepted: \"Aceita\",\n    status_rejected: \"Rejeitada\",\n  },\n};\n\nexport type Language = keyof typeof translations;\nexport type TranslationKey = keyof typeof translations.fr;\n\nlet currentLanguage: Language = 'fr';\n\nexport function setLanguage(lang: Language) {\n  currentLanguage = lang;\n  if (typeof window !== 'undefined') {\n    localStorage.setItem('language', lang);\n  }\n}\n\nexport function getLanguage(): Language {\n  if (typeof window === 'undefined') {\n    return 'fr';\n  }\n  try {\n    const stored = localStorage.getItem('language') as Language;\n    return stored && stored in translations ? stored : 'fr';\n  } catch {\n    return 'fr';\n  }\n}\n\nexport function t(key: TranslationKey): string {\n  try {\n    return translations[currentLanguage]?.[key] || translations.fr[key] || key;\n  } catch {\n    return key;\n  }\n}\n\n// Initialize language from localStorage safely\nif (typeof window !== 'undefined') {\n  try {\n    currentLanguage = getLanguage();\n  } catch {\n    currentLanguage = 'fr';\n  }\n}\n","size_bytes":5241},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// API request function for handling HTTP requests\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1434},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Users, \n  Briefcase, \n  FileText, \n  TrendingUp, \n  LogOut,\n  Plus,\n  BarChart3,\n  PieChart,\n  Target,\n  Award,\n  Activity,\n  Clock,\n  CheckCircle,\n  X,\n  Trash2,\n  UserCheck,\n  Building,\n  ArrowRight,\n  Mail\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart as RechartsPieChart,\n  Cell,\n  BarChart,\n  Bar\n} from \"recharts\";\n\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#84CC16'];\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [skills, setSkills] = useState<string[]>(['']);\n  const [jobTitle, setJobTitle] = useState('');\n  const [company, setCompany] = useState('');\n  const [location, setLocation] = useState('');\n  const [description, setDescription] = useState('');\n  const [requirements, setRequirements] = useState('');\n  const [salary, setSalary] = useState('');\n  const [contractType, setContractType] = useState('');\n  const [experienceLevel, setExperienceLevel] = useState('');\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [\"/api/admin/jobs\"],\n  });\n\n  const { data: applications = [] } = useQuery({\n    queryKey: [\"/api/admin/applications\"],\n  });\n  \n  const { data: kpis, isLoading: kpisLoading } = useQuery({\n    queryKey: [\"/api/admin/kpis\"],\n  });\n  \n  const { data: applicationAnalytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/admin/analytics/applications\"],\n  });\n  \n  const { data: jobAnalytics, isLoading: jobAnalyticsLoading } = useQuery({\n    queryKey: [\"/api/admin/analytics/jobs\"],\n  });\n\n  // Mutation pour créer un nouvel emploi\n  const createJobMutation = useMutation({\n    mutationFn: async (jobData: {\n      title: string;\n      company: string;\n      location: string;\n      description: string;\n      requirements?: string;\n      salary?: string;\n      contractType: string;\n      experienceLevel?: string;\n      skills?: string[];\n    }) => {\n      const response = await fetch('/api/admin/jobs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...jobData,\n          isActive: true\n        })\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Erreur lors de la création de l\\'offre');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs\"] });\n      resetForm();\n      toast({\n        title: \"Succès\",\n        description: \"L'offre d'emploi a été créée avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const addSkill = () => {\n    setSkills([...skills, '']);\n  };\n\n  const removeSkill = (index: number) => {\n    setSkills(skills.filter((_, i) => i !== index));\n  };\n\n  const updateSkill = (index: number, value: string) => {\n    const newSkills = [...skills];\n    newSkills[index] = value;\n    setSkills(newSkills);\n  };\n\n  const resetForm = () => {\n    setJobTitle('');\n    setCompany('');\n    setLocation('');\n    setDescription('');\n    setRequirements('');\n    setSalary('');\n    setContractType('');\n    setExperienceLevel('');\n    setSkills(['']);\n  };\n\n  const previewJob = () => ({\n    title: jobTitle,\n    company: company,\n    location: location,\n    description: description,\n    requirements: requirements,\n    salary: salary,\n    contractType: contractType,\n    experienceLevel: experienceLevel,\n    skills: skills.filter(skill => skill.trim() !== '')\n  });\n\n  const handleCreateJob = () => {\n    // Validation des champs requis\n    if (!jobTitle.trim()) {\n      toast({\n        title: \"Erreur de validation\",\n        description: \"Le titre du poste est obligatoire\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!company.trim()) {\n      toast({\n        title: \"Erreur de validation\", \n        description: \"Le nom de l'entreprise est obligatoire\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!location.trim()) {\n      toast({\n        title: \"Erreur de validation\",\n        description: \"La localisation est obligatoire\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!description.trim()) {\n      toast({\n        title: \"Erreur de validation\",\n        description: \"La description est obligatoire\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!contractType) {\n      toast({\n        title: \"Erreur de validation\",\n        description: \"Le type de contrat est obligatoire\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const jobData = previewJob();\n    createJobMutation.mutate(jobData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Admin RH</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {(user as any)?.firstName} {(user as any)?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {(user as any)?.role === \"admin\" ? \"Super Admin\" : \n                 (user as any)?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Tableau de bord\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <PieChart className=\"h-4 w-4\" />\n              Analyse\n            </TabsTrigger>\n            <TabsTrigger value=\"jobs\" className=\"flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              Créer une offre\n            </TabsTrigger>\n            <TabsTrigger value=\"management\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Gestion\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-bold\">Vue d'ensemble</h2>\n              <div className=\"flex space-x-2\">\n                <Link to=\"/admin/applications\">\n                  <Button variant=\"outline\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Candidatures\n                  </Button>\n                </Link>\n                <Link to=\"/admin/jobs\">\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Nouvelle offre\n                  </Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* KPIs Cards */}\n            {kpisLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                {[1, 2, 3, 4].map(i => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-8 bg-muted rounded w-1/2 mb-1\"></div>\n                        <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Candidatures</CardTitle>\n                    <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{applications.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Taux conversion: {applications.length > 0 ? ((applications.filter((a: any) => a.status === 'accepted').length / applications.length) * 100).toFixed(1) : 0}%\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Offres Actives</CardTitle>\n                    <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{jobs.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Set(applications.map((a: any) => a.userId)).size} candidats inscrits\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Temps Moyen</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">5</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      jours de traitement\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Équipe RH</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">3</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      recruteurs actifs\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Status Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Répartition des Candidatures</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-4 md:grid-cols-7 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">{applications.filter((a: any) => a.status === 'pending').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">En attente</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{applications.filter((a: any) => a.status === 'assigned').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Assignées</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">{applications.filter((a: any) => a.status === 'scored').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Notées</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-indigo-600\">{applications.filter((a: any) => a.status === 'reviewed').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Examinées</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-orange-600\">{applications.filter((a: any) => a.status === 'interview').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Entretiens</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">{applications.filter((a: any) => a.status === 'accepted').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Acceptées</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">{applications.filter((a: any) => a.status === 'rejected').length}</div>\n                    <div className=\"text-sm text-muted-foreground\">Refusées</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top Jobs */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Offres les plus populaires</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {jobs.slice(0, 3).map((job: any, index: number) => {\n                    const jobApplications = applications.filter((a: any) => a.jobId === job.id);\n                    return (\n                      <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                          <h4 className=\"font-semibold\">{job.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{job.company}</p>\n                        </div>\n                        <Badge variant=\"secondary\">{jobApplications.length} candidatures</Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Analyses et Graphiques</h2>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Monthly Applications */}\n              {applicationAnalytics?.monthlyApplications && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Évolution des Candidatures</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <AreaChart data={applicationAnalytics.monthlyApplications}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Area \n                          type=\"monotone\" \n                          dataKey=\"count\" \n                          stroke=\"#3B82F6\" \n                          fill=\"#3B82F6\" \n                          fillOpacity={0.3} \n                        />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Status Distribution Pie */}\n              {applicationAnalytics?.statusDistribution && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Répartition par Statut</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <RechartsPieChart>\n                        <Pie\n                          data={applicationAnalytics.statusDistribution}\n                          dataKey=\"value\"\n                          nameKey=\"name\"\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          label\n                        >\n                          {applicationAnalytics.statusDistribution.map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </RechartsPieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Job Popularity */}\n              {jobAnalytics?.jobPopularity && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Popularité des Offres</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={jobAnalytics.jobPopularity}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={80} />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"applications\" fill=\"#10B981\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Score Distribution */}\n              {applicationAnalytics?.scoreDistribution && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Distribution des Scores</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={applicationAnalytics.scoreDistribution}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"count\" fill=\"#8B5CF6\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"jobs\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Créer une nouvelle offre</h2>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Form */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Formulaire Dynamique</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"jobTitle\">Titre du poste *</Label>\n                    <Input \n                      id=\"jobTitle\"\n                      value={jobTitle}\n                      onChange={(e) => setJobTitle(e.target.value)}\n                      placeholder=\"Ex: Développeur Full Stack\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"company\">Entreprise *</Label>\n                    <Input \n                      id=\"company\"\n                      value={company}\n                      onChange={(e) => setCompany(e.target.value)}\n                      placeholder=\"Ex: TechCorp\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"location\">Localisation *</Label>\n                    <Input \n                      id=\"location\"\n                      value={location}\n                      onChange={(e) => setLocation(e.target.value)}\n                      placeholder=\"Ex: Paris, France\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"contractType\">Type de contrat</Label>\n                      <Select value={contractType} onValueChange={setContractType}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Sélectionner\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"CDI\">CDI</SelectItem>\n                          <SelectItem value=\"CDD\">CDD</SelectItem>\n                          <SelectItem value=\"Freelance\">Freelance</SelectItem>\n                          <SelectItem value=\"Stage\">Stage</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"experienceLevel\">Niveau d'expérience</Label>\n                      <Select value={experienceLevel} onValueChange={setExperienceLevel}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Sélectionner\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Débutant\">Débutant</SelectItem>\n                          <SelectItem value=\"Intermédiaire\">Intermédiaire</SelectItem>\n                          <SelectItem value=\"Senior\">Senior</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"salary\">Salaire</Label>\n                    <Input \n                      id=\"salary\"\n                      value={salary}\n                      onChange={(e) => setSalary(e.target.value)}\n                      placeholder=\"Ex: 45k - 60k €\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Description *</Label>\n                    <Textarea \n                      id=\"description\"\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      placeholder=\"Décrivez le poste, les missions...\"\n                      rows={4}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"requirements\">Exigences</Label>\n                    <Textarea \n                      id=\"requirements\"\n                      value={requirements}\n                      onChange={(e) => setRequirements(e.target.value)}\n                      placeholder=\"Formation, expérience requise...\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {/* Dynamic Skills */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Label>Compétences requises</Label>\n                      <Button type=\"button\" onClick={addSkill} size=\"sm\">\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Ajouter\n                      </Button>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {skills.map((skill, index) => (\n                        <div key={index} className=\"flex items-center gap-2\">\n                          <Input\n                            value={skill}\n                            onChange={(e) => updateSkill(index, e.target.value)}\n                            placeholder=\"Ex: React, Node.js, SQL...\"\n                          />\n                          {skills.length > 1 && (\n                            <Button \n                              type=\"button\" \n                              onClick={() => removeSkill(index)}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between pt-4\">\n                    <Button variant=\"outline\" onClick={resetForm}>\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Réinitialiser\n                    </Button>\n                    <Button \n                      onClick={handleCreateJob}\n                      disabled={createJobMutation.isPending}\n                      data-testid=\"button-create-job\"\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      {createJobMutation.isPending ? 'Création...' : 'Créer l\\'offre'}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Real-time Preview */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Aperçu en temps réel</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4 p-6 bg-muted/30 rounded-lg\">\n                    <div>\n                      <h3 className=\"text-xl font-bold text-primary\">\n                        {jobTitle || \"Titre du poste\"}\n                      </h3>\n                      <p className=\"text-lg text-muted-foreground\">\n                        {company || \"Nom de l'entreprise\"}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        📍 {location || \"Localisation\"}\n                      </p>\n                    </div>\n\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {contractType && (\n                        <Badge variant=\"secondary\">{contractType}</Badge>\n                      )}\n                      {experienceLevel && (\n                        <Badge variant=\"outline\">{experienceLevel}</Badge>\n                      )}\n                      {salary && (\n                        <Badge variant=\"default\">💰 {salary}</Badge>\n                      )}\n                    </div>\n\n                    {description && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Description</h4>\n                        <p className=\"text-sm\">{description}</p>\n                      </div>\n                    )}\n\n                    {requirements && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Exigences</h4>\n                        <p className=\"text-sm\">{requirements}</p>\n                      </div>\n                    )}\n\n                    {skills.filter(skill => skill.trim() !== '').length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Compétences</h4>\n                        <div className=\"flex gap-2 flex-wrap\">\n                          {skills.filter(skill => skill.trim() !== '').map((skill, index) => (\n                            <Badge key={index} variant=\"outline\">{skill}</Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"management\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Gestion</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Link to=\"/admin/applications\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Candidatures\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Gérer toutes les candidatures reçues\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link to=\"/admin/jobs\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Briefcase className=\"h-5 w-5\" />\n                      Offres d'emploi\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Consulter et modifier les offres\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link to=\"/admin/onboarding\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <UserCheck className=\"h-5 w-5\" />\n                      Onboarding\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Gérer l'intégration des nouveaux employés\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link to=\"/admin/interviews\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      Entretiens\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Évaluation et gestion des entretiens\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link to=\"/admin/employees\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building className=\"h-5 w-5\" />\n                      Gestion RH\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Performance, formations et disciplines\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link to=\"/admin/invitations\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Mail className=\"h-5 w-5\" />\n                      Invitations Candidats\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Inviter des candidats présélectionnés\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {(user as any)?.role === \"admin\" && (\n                <Link to=\"/admin/users\">\n                  <Card className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Users className=\"h-5 w-5\" />\n                        Utilisateurs\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Gestion des comptes utilisateurs\n                      </p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":33702},"client/src/pages/ApplicationManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Search, \n  Eye, \n  Download,\n  User,\n  Mail,\n  Phone,\n  Calendar,\n  FileText,\n  Briefcase,\n  LogOut,\n  Edit,\n  Trash2,\n  X,\n  Plus\n} from \"lucide-react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nexport default function ApplicationManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const queryClient = useQueryClient();\n  \n  // État pour la modal d'édition\n  const [editingApplication, setEditingApplication] = useState<any>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editForm, setEditForm] = useState({\n    status: \"\",\n    assignedRecruiter: \"\",\n    manualScore: \"\",\n    scoreNotes: \"\"\n  });\n\n  const { data: applications = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/applications\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ applicationId, status }: { applicationId: number, status: string }) => {\n      const response = await fetch(`/api/admin/applications/${applicationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/applications\"] });\n      toast({\n        title: \"Succès\",\n        description: \"Le statut de la candidature a été mis à jour\",\n      });\n    }\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ applicationId, data }: { applicationId: number, data: any }) => {\n      const response = await fetch(`/api/admin/applications/${applicationId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Erreur lors de la mise à jour');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/applications\"] });\n      setIsEditDialogOpen(false);\n      toast({\n        title: \"Succès\",\n        description: \"La candidature a été mise à jour avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteApplicationMutation = useMutation({\n    mutationFn: async (applicationId: number) => {\n      const response = await fetch(`/api/admin/applications/${applicationId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/applications\"] });\n      toast({\n        title: \"Succès\",\n        description: \"La candidature a été supprimée avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const filteredApplications = applications.filter((app: any) => {\n    const matchesSearch = \n      app.candidate?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      app.candidate?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      app.job?.title?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || app.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const colors = {\n      pending: \"bg-yellow-100 text-yellow-800\",\n      reviewed: \"bg-blue-100 text-blue-800\", \n      interview: \"bg-purple-100 text-purple-800\",\n      accepted: \"bg-green-100 text-green-800\",\n      rejected: \"bg-red-100 text-red-800\"\n    };\n    return colors[status as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getStatusText = (status: string) => {\n    const texts = {\n      pending: \"En attente\",\n      reviewed: \"Examinée\",\n      interview: \"Entretien\",\n      accepted: \"Acceptée\", \n      rejected: \"Refusée\"\n    };\n    return texts[status as keyof typeof texts] || status;\n  };\n\n  const handleStatusChange = (applicationId: number, newStatus: string) => {\n    updateStatusMutation.mutate({ applicationId, status: newStatus });\n  };\n\n  const handleEditApplication = (application: any) => {\n    setEditingApplication(application);\n    setEditForm({\n      status: application.status || \"\",\n      assignedRecruiter: application.assignedRecruiter || \"\",\n      manualScore: application.manualScore?.toString() || \"\",\n      scoreNotes: application.scoreNotes || \"\"\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateApplication = () => {\n    if (!editingApplication) return;\n    \n    const updateData = {\n      ...editForm,\n      manualScore: editForm.manualScore ? parseInt(editForm.manualScore) : null\n    };\n    \n    updateApplicationMutation.mutate({\n      applicationId: editingApplication.id,\n      data: updateData\n    });\n  };\n\n  const handleDeleteApplication = (applicationId: number) => {\n    if (confirm('Êtes-vous sûr de vouloir supprimer cette candidature ?')) {\n      deleteApplicationMutation.mutate(applicationId);\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Admin RH</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {user?.role === \"admin\" ? \"Super Admin\" : \n                 user?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <div className=\"flex space-x-6 mb-8 border-b border-border\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Tableau de bord\n            </Button>\n          </Link>\n          <Link href=\"/admin/jobs\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Offres d'emploi\n            </Button>\n          </Link>\n          <Button variant=\"ghost\" className=\"border-b-2 border-primary text-primary\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Candidatures\n          </Button>\n          {user?.role === \"admin\" && (\n            <Link href=\"/admin/users\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground\">\n                <User className=\"h-4 w-4 mr-2\" />\n                Utilisateurs\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        <h1 className=\"text-2xl font-bold mb-6\">Gestion des Candidatures</h1>\n\n        {/* Filters */}\n        <div className=\"flex space-x-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Rechercher par nom de candidat ou poste...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filtrer par statut\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tous les statuts</SelectItem>\n              <SelectItem value=\"pending\">En attente</SelectItem>\n              <SelectItem value=\"reviewed\">Examinées</SelectItem>\n              <SelectItem value=\"interview\">Entretiens</SelectItem>\n              <SelectItem value=\"accepted\">Acceptées</SelectItem>\n              <SelectItem value=\"rejected\">Refusées</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Applications List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Chargement...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredApplications.map((application: any) => (\n              <Card key={application.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold\">\n                            {application.candidate?.firstName} {application.candidate?.lastName}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Candidature pour: <span className=\"font-medium\">{application.job?.title}</span>\n                          </p>\n                        </div>\n                        <Badge className={getStatusBadge(application.status)}>\n                          {getStatusText(application.status)}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{application.candidate?.email || 'Non renseigné'}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{application.phone || 'Non renseigné'}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>\n                            {application.createdAt ? \n                              formatDistanceToNow(new Date(application.createdAt), { addSuffix: true, locale: fr }) :\n                              'Date inconnue'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>\n                            Disponible: {application.availabilityDate ? \n                              new Date(application.availabilityDate).toLocaleDateString('fr-FR') :\n                              'Immédiatement'\n                            }\n                          </span>\n                        </div>\n                      </div>\n\n                      {application.coverLetter && (\n                        <div className=\"mb-4\">\n                          <h4 className=\"text-sm font-medium mb-2\">Lettre de motivation:</h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                            {application.coverLetter}\n                          </p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        {application.cvPath && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            CV\n                          </Button>\n                        )}\n                        {application.motivationLetterPath && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Lettre\n                          </Button>\n                        )}\n                        {application.salaryExpectation && (\n                          <span className=\"text-sm text-muted-foreground\">\n                            Salaire: {application.salaryExpectation}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col space-y-2 ml-6\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleEditApplication(app)}\n                          data-testid={`button-edit-application-${app.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteApplication(app.id)}\n                          className=\"text-red-600 hover:text-red-700\"\n                          data-testid={`button-delete-application-${app.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      \n                      <Select \n                        value={app.status} \n                        onValueChange={(value) => handleStatusChange(app.id, value)}\n                      >\n                        <SelectTrigger className=\"w-36\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">En attente</SelectItem>\n                          <SelectItem value=\"reviewed\">Examinée</SelectItem>\n                          <SelectItem value=\"interview\">Entretien</SelectItem>\n                          <SelectItem value=\"accepted\">Acceptée</SelectItem>\n                          <SelectItem value=\"rejected\">Refusée</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {filteredApplications.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Aucune candidature trouvée\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Modal d'édition */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Modifier la candidature</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-status\">Statut</Label>\n                <Select \n                  value={editForm.status} \n                  onValueChange={(value) => setEditForm({ ...editForm, status: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner un statut\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">En attente</SelectItem>\n                    <SelectItem value=\"reviewed\">Examinée</SelectItem>\n                    <SelectItem value=\"interview\">Entretien</SelectItem>\n                    <SelectItem value=\"accepted\">Acceptée</SelectItem>\n                    <SelectItem value=\"rejected\">Refusée</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-recruiter\">Recruteur assigné</Label>\n                <Input\n                  id=\"edit-recruiter\"\n                  value={editForm.assignedRecruiter}\n                  onChange={(e) => setEditForm({ ...editForm, assignedRecruiter: e.target.value })}\n                  placeholder=\"ID du recruteur\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-score\">Note manuelle (0-100)</Label>\n              <Input\n                id=\"edit-score\"\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n                value={editForm.manualScore}\n                onChange={(e) => setEditForm({ ...editForm, manualScore: e.target.value })}\n                placeholder=\"Score de 0 à 100\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-notes\">Notes du recruteur</Label>\n              <Textarea\n                id=\"edit-notes\"\n                value={editForm.scoreNotes}\n                onChange={(e) => setEditForm({ ...editForm, scoreNotes: e.target.value })}\n                placeholder=\"Commentaires et observations...\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Annuler\n              </Button>\n              <Button \n                onClick={handleUpdateApplication}\n                disabled={updateApplicationMutation.isPending}\n                data-testid=\"button-save-application\"\n              >\n                {updateApplicationMutation.isPending ? 'Mise à jour...' : 'Sauvegarder'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19789},"client/src/pages/Applications.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Briefcase, \n  Bell, \n  User, \n  LogOut, \n  LayoutDashboard,\n  FileText,\n  Search,\n  Folder,\n  Building2,\n  MapPin,\n  Calendar,\n  Eye\n} from \"lucide-react\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr, enUS, pt } from \"date-fns/locale\";\nimport { getLanguage } from \"@/lib/i18n\";\nimport { ApplicationTimeline } from \"@/components/ApplicationTimeline\";\n\nconst locales = {\n  fr: fr,\n  en: enUS,\n  pt: pt,\n};\n\nexport default function Applications() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const currentLang = getLanguage();\n  const locale = locales[currentLang];\n\n  const { data: applications = [], isLoading: applicationsLoading } = useQuery({\n    queryKey: [\"/api/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous devez être connecté. Redirection vers la connexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100';\n      case 'reviewed':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';\n      case 'interview':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100';\n      case 'accepted':\n        return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-100';\n      case 'rejected':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    const translations = {\n      pending: \"En attente\",\n      reviewed: \"Examinée\", \n      interview: \"Entretien planifié\",\n      accepted: \"Acceptée\",\n      rejected: \"Refusée\",\n    };\n    return translations[status as keyof typeof translations] || status;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Briefcase className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-xl font-bold text-foreground\">JobPortal</span>\n                <span className=\"text-sm text-muted-foreground\">Espace candidat</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageSelector />\n              \n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-8 w-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                  {user.firstName?.[0] || user.email?.[0] || 'U'}\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                  {user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={() => import(\"@/lib/logout\").then(m => m.handleLogout())}\n                  data-testid=\"button-logout\"\n                  title=\"Se déconnecter\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"flex\">\n        {/* Sidebar Navigation */}\n        <nav className=\"w-64 bg-card shadow-sm border-r border-border min-h-screen\">\n          <div className=\"p-6\">\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-dashboard\">\n                    <LayoutDashboard className=\"h-5 w-5\" />\n                    <span>Tableau de bord</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#applications\" className=\"flex items-center space-x-3 p-3 text-primary bg-primary/10 rounded-md\">\n                  <FileText className=\"h-5 w-5\" />\n                  <span className=\"font-medium\">Mes candidatures</span>\n                </a>\n              </li>\n              <li>\n                <Link href=\"/profile\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-profile\">\n                    <User className=\"h-5 w-5\" />\n                    <span>Mon profil</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/jobs\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-search\">\n                    <Search className=\"h-5 w-5\" />\n                    <span>Rechercher</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#documents\" className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-documents\">\n                  <Folder className=\"h-5 w-5\" />\n                  <span>Mes documents</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        \n        {/* Main Content */}\n        <main className=\"flex-1 p-8 bg-background\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-applications-title\">\n              Mes candidatures\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Suivez l'état de vos candidatures et gérez votre parcours professionnel\n            </p>\n          </div>\n          \n          {applicationsLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : applications.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Aucune candidature</h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-applications\">\n                  Vous n'avez pas encore envoyé de candidature. Découvrez nos offres d'emploi !\n                </p>\n                <Link href=\"/jobs\">\n                  <Button data-testid=\"button-browse-jobs\">\n                    Parcourir les offres\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {applications.map((application) => (\n                <Card \n                  key={application.id}\n                  className=\"hover:shadow-md transition-shadow\"\n                  data-testid={`card-application-${application.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid={`text-job-title-${application.id}`}>\n                          {application.job?.title || 'Poste supprimé'}\n                        </h3>\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span className=\"flex items-center\">\n                            <Building2 className=\"h-4 w-4 mr-1\" />\n                            <span data-testid={`text-company-${application.id}`}>{application.job?.company || 'Entreprise inconnue'}</span>\n                          </span>\n                          <span className=\"flex items-center\">\n                            <MapPin className=\"h-4 w-4 mr-1\" />\n                            <span data-testid={`text-location-${application.id}`}>{application.job?.location || 'Location inconnue'}</span>\n                          </span>\n                          <span className=\"flex items-center\">\n                            <Calendar className=\"h-4 w-4 mr-1\" />\n                            <span data-testid={`text-applied-date-${application.id}`}>\n                              Candidature envoyée {formatDistanceToNow(application.createdAt, { addSuffix: true, locale })}\n                            </span>\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge \n                          className={getStatusColor(application.status)}\n                          data-testid={`badge-status-${application.id}`}\n                        >\n                          {getStatusText(application.status)}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    {application.coverLetter && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-cover-letter-${application.id}`}>\n                          {application.coverLetter}\n                        </p>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex justify-between items-center mb-6\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        {application.salaryExpectation && (\n                          <span data-testid={`text-salary-expectation-${application.id}`}>\n                            Prétentions: {application.salaryExpectation}\n                          </span>\n                        )}\n                        {application.availabilityDate && (\n                          <span data-testid={`text-availability-${application.id}`}>\n                            Disponible: {new Date(application.availabilityDate).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"flex items-center space-x-2\"\n                        data-testid={`button-view-application-${application.id}`}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                        <span>Voir détails</span>\n                      </Button>\n                    </div>\n                    \n                    {/* Timeline de suivi pour chaque candidature */}\n                    <div className=\"border-t pt-6\">\n                      <ApplicationTimeline application={application} />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13537},"client/src/pages/CandidateAssignment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Users, \n  Award, \n  TrendingUp, \n  UserCheck,\n  Briefcase,\n  LogOut,\n  Star,\n  Target\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CandidateScore {\n  applicationId: number;\n  candidate: any;\n  job: any;\n  autoScore: number;\n  totalScore: number;\n  factors: {\n    experienceMatch: number;\n    skillsMatch: number;\n    availabilityScore: number;\n    salaryFit: number;\n    applicationQuality: number;\n  };\n}\n\nexport default function CandidateAssignment() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedJob, setSelectedJob] = useState<string>(\"\");\n  const [selectedCandidates, setSelectedCandidates] = useState<number[]>([]);\n  const [selectedRecruiter, setSelectedRecruiter] = useState<string>(\"\");\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [\"/api/admin/jobs\"],\n  });\n\n  const { data: recruiters = [] } = useQuery({\n    queryKey: [\"/api/admin/recruiters\"],\n  });\n\n  const { data: topCandidates = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/top-candidates\", selectedJob],\n    enabled: !!selectedJob,\n  });\n\n  const assignMutation = useMutation({\n    mutationFn: async ({ candidateIds, recruiterId }: { candidateIds: number[], recruiterId: string }) => {\n      await apiRequest(\"POST\", \"/api/admin/assign-candidates\", {\n        applicationIds: candidateIds,\n        recruiterId\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Affectation réussie\",\n        description: \"Les candidats ont été assignés avec succès.\",\n      });\n      setSelectedCandidates([]);\n      setSelectedRecruiter(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/top-candidates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de l'affectation des candidats.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCandidateSelect = (candidateId: number, checked: boolean) => {\n    if (checked) {\n      setSelectedCandidates(prev => [...prev, candidateId]);\n    } else {\n      setSelectedCandidates(prev => prev.filter(id => id !== candidateId));\n    }\n  };\n\n  const handleAssignCandidates = () => {\n    if (selectedCandidates.length === 0 || !selectedRecruiter) {\n      toast({\n        title: \"Sélection incomplète\",\n        description: \"Veuillez sélectionner des candidats et un recruteur.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    assignMutation.mutate({\n      candidateIds: selectedCandidates,\n      recruiterId: selectedRecruiter\n    });\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600 font-semibold\";\n    if (score >= 60) return \"text-blue-600 font-semibold\";\n    if (score >= 40) return \"text-yellow-600 font-semibold\";\n    return \"text-red-600 font-semibold\";\n  };\n\n  const getScoreBadge = (score: number) => {\n    if (score >= 80) return \"bg-green-100 text-green-800\";\n    if (score >= 60) return \"bg-blue-100 text-blue-800\";\n    if (score >= 40) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-red-100 text-red-800\";\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Admin RH</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {user?.role === \"admin\" ? \"Super Admin\" : \n                 user?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <div className=\"flex space-x-6 mb-8 border-b border-border\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Tableau de bord\n            </Button>\n          </Link>\n          <Button variant=\"ghost\" className=\"border-b-2 border-primary text-primary\">\n            <Target className=\"h-4 w-4 mr-2\" />\n            Affectation Candidats\n          </Button>\n          <Link href=\"/admin/scoring\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Award className=\"h-4 w-4 mr-2\" />\n              Notation\n            </Button>\n          </Link>\n        </div>\n\n        <h1 className=\"text-2xl font-bold mb-6\">Affectation des Candidats - Top 10 Automatique</h1>\n\n        {/* Job Selection */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>1. Sélectionner l'offre d'emploi</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={selectedJob} onValueChange={setSelectedJob}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Choisissez une offre d'emploi\" />\n              </SelectTrigger>\n              <SelectContent>\n                {jobs.map((job: any) => (\n                  <SelectItem key={job.id} value={job.id.toString()}>\n                    {job.title} - {job.company}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        {/* Top 10 Candidates */}\n        {selectedJob && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                2. Top 10 des Meilleurs Candidats (Tri Automatique)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">Calcul des scores en cours...</div>\n              ) : topCandidates.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Aucune candidature pour cette offre\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {topCandidates.map((candidate: CandidateScore, index: number) => (\n                    <div key={candidate.applicationId} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Checkbox\n                          checked={selectedCandidates.includes(candidate.applicationId)}\n                          onCheckedChange={(checked) => \n                            handleCandidateSelect(candidate.applicationId, checked as boolean)\n                          }\n                        />\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              #{index + 1}\n                            </Badge>\n                            <h4 className=\"text-lg font-semibold\">\n                              {candidate.candidate.firstName} {candidate.candidate.lastName}\n                            </h4>\n                            <Badge className={getScoreBadge(candidate.totalScore)}>\n                              {candidate.totalScore}/100\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-3\">\n                            <div className=\"text-sm\">\n                              <strong>Email:</strong> {candidate.candidate.email}\n                            </div>\n                            <div className=\"text-sm\">\n                              <strong>Téléphone:</strong> {candidate.candidate.phone || 'Non renseigné'}\n                            </div>\n                          </div>\n\n                          {/* Score Details */}\n                          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2 text-xs\">\n                            <div className=\"text-center p-2 bg-gray-50 rounded\">\n                              <div className=\"font-semibold\">Expérience</div>\n                              <div className={getScoreColor(candidate.factors.experienceMatch)}>\n                                {candidate.factors.experienceMatch}/25\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-gray-50 rounded\">\n                              <div className=\"font-semibold\">Compétences</div>\n                              <div className={getScoreColor(candidate.factors.skillsMatch)}>\n                                {candidate.factors.skillsMatch}/30\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-gray-50 rounded\">\n                              <div className=\"font-semibold\">Disponibilité</div>\n                              <div className={getScoreColor(candidate.factors.availabilityScore)}>\n                                {candidate.factors.availabilityScore}/15\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-gray-50 rounded\">\n                              <div className=\"font-semibold\">Salaire</div>\n                              <div className={getScoreColor(candidate.factors.salaryFit)}>\n                                {candidate.factors.salaryFit}/15\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-gray-50 rounded\">\n                              <div className=\"font-semibold\">Qualité</div>\n                              <div className={getScoreColor(candidate.factors.applicationQuality)}>\n                                {candidate.factors.applicationQuality}/15\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Assignment Section */}\n        {selectedCandidates.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Affecter aux Recruteurs pour Notation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    {selectedCandidates.length} candidat(s) sélectionné(s)\n                  </p>\n                  \n                  <Select value={selectedRecruiter} onValueChange={setSelectedRecruiter}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Choisissez un recruteur\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {recruiters.map((recruiter: any) => (\n                        <SelectItem key={recruiter.id} value={recruiter.id}>\n                          {recruiter.firstName} {recruiter.lastName} - {recruiter.role}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Button \n                  onClick={handleAssignCandidates}\n                  disabled={assignMutation.isPending}\n                  className=\"w-full\"\n                >\n                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                  {assignMutation.isPending ? \"Attribution en cours...\" : \"Affecter les Candidats\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13211},"client/src/pages/CandidateDashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Briefcase, \n  Bell, \n  User, \n  LogOut, \n  LayoutDashboard,\n  FileText,\n  Search,\n  Folder,\n  Send,\n  Clock,\n  Calendar,\n  UserCheck,\n  CheckCircle,\n  Circle\n} from \"lucide-react\";\nimport { t } from \"@/lib/i18n\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr, enUS, pt } from \"date-fns/locale\";\nimport { getLanguage } from \"@/lib/i18n\";\nimport { ApplicationTimeline } from \"@/components/ApplicationTimeline\";\n\nconst locales = {\n  fr: fr,\n  en: enUS,\n  pt: pt,\n};\n\nexport default function CandidateDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const currentLang = getLanguage();\n  const locale = locales[currentLang];\n\n  const { data: applications = [], isLoading: applicationsLoading } = useQuery({\n    queryKey: [\"/api/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous devez être connecté. Redirection vers la connexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const stats = {\n    applicationsCount: applications.length,\n    pendingCount: applications.filter(app => app.status === 'pending').length,\n    interviewsCount: applications.filter(app => app.status === 'interview').length,\n    profileCompletion: 85, // This would be calculated based on completed profile fields\n  };\n\n  const recentApplications = applications.slice(0, 3);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100';\n      case 'reviewed':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';\n      case 'interview':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100';\n      case 'accepted':\n        return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-100';\n      case 'rejected':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    return t(`status_${status}` as any) || status;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Briefcase className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-xl font-bold text-foreground\">JobPortal</span>\n                <span className=\"text-sm text-muted-foreground\">Espace candidat</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageSelector />\n              \n              {/* Notifications */}\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n              \n              {/* User Menu */}\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-8 w-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                  {user.firstName?.[0] || user.email?.[0] || 'U'}\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                  {user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={() => import(\"@/lib/logout\").then(m => m.handleLogout())}\n                  data-testid=\"button-logout\"\n                  title=\"Se déconnecter\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"flex\">\n        {/* Sidebar Navigation */}\n        <nav className=\"w-64 bg-card shadow-sm border-r border-border min-h-screen\">\n          <div className=\"p-6\">\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"flex items-center space-x-3 p-3 text-primary bg-primary/10 rounded-md\">\n                    <LayoutDashboard className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">{t('dashboard')}</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/applications\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-applications\">\n                    <FileText className=\"h-5 w-5\" />\n                    <span>Mes candidatures</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/profile\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-profile\">\n                    <User className=\"h-5 w-5\" />\n                    <span>Mon profil</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/onboarding\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-onboarding\">\n                    <UserCheck className=\"h-5 w-5\" />\n                    <span>Mon onboarding</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/jobs\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-search\">\n                    <Search className=\"h-5 w-5\" />\n                    <span>Rechercher</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#documents\" className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-documents\">\n                  <Folder className=\"h-5 w-5\" />\n                  <span>Mes documents</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        \n        {/* Main Content */}\n        <main className=\"flex-1 p-8 bg-background\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-dashboard-title\">\n              {t('dashboard')}\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-welcome-message\">\n              {t('welcome')}\n            </p>\n          </div>\n          \n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{t('applications_sent')}</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-applications-count\">\n                      {stats.applicationsCount}\n                    </p>\n                  </div>\n                  <Send className=\"h-8 w-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{t('pending')}</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-pending-count\">\n                      {stats.pendingCount}\n                    </p>\n                  </div>\n                  <Clock className=\"h-8 w-8 text-yellow-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{t('interviews')}</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-interviews-count\">\n                      {stats.interviewsCount}\n                    </p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">{t('profile_completed')}</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-profile-completion\">\n                      {stats.profileCompletion}%\n                    </p>\n                  </div>\n                  <UserCheck className=\"h-8 w-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Timeline de candidature principale */}\n          {recentApplications.length > 0 && (\n            <div className=\"mb-8\">\n              <ApplicationTimeline application={recentApplications[0]} />\n            </div>\n          )}\n          \n          {/* Recent Applications and Profile Completion */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                  {t('recent_applications')}\n                </h3>\n                {applicationsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse p-4 bg-background rounded-lg\">\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : recentApplications.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-applications\">\n                    Aucune candidature envoyée pour le moment.\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentApplications.map((application) => (\n                      <div \n                        key={application.id}\n                        className=\"flex items-center justify-between p-4 bg-background rounded-lg\"\n                        data-testid={`application-item-${application.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\" data-testid={`text-job-title-${application.id}`}>\n                            {application.job?.title || 'Poste supprimé'}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-company-${application.id}`}>\n                            {application.job?.company || 'Entreprise inconnue'}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`text-date-${application.id}`}>\n                            Candidature envoyée {formatDistanceToNow(application.createdAt, { addSuffix: true, locale })}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            className={getStatusColor(application.status)}\n                            data-testid={`badge-status-${application.id}`}\n                          >\n                            {getStatusText(application.status)}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div className=\"mt-4\">\n                  <Link href=\"/applications\">\n                    <a className=\"text-primary hover:text-primary/80 text-sm font-medium\" data-testid=\"link-view-all-applications\">\n                      Voir toutes mes candidatures →\n                    </a>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Profile Completion */}\n            <Card className=\"shadow-sm\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                  Complétez votre profil\n                </h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-foreground\">Informations personnelles</span>\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-foreground\">Email vérifié</span>\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Photo de profil</span>\n                    <Circle className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Expériences professionnelles</span>\n                    <Circle className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Compétences</span>\n                    <Circle className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                </div>\n                <div className=\"mt-6\">\n                  <Link href=\"/profile\">\n                    <Button className=\"w-full\" data-testid=\"button-complete-profile\">\n                      Compléter mon profil\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'pending':\n      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100';\n    case 'reviewed':\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';\n    case 'interview':\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100';\n    case 'accepted':\n      return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-100';\n    case 'rejected':\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n  }\n}\n\nfunction getStatusText(status: string) {\n  const translations = {\n    pending: \"En attente\",\n    reviewed: \"Examinée\", \n    interview: \"Entretien planifié\",\n    accepted: \"Acceptée\",\n    rejected: \"Refusée\",\n  };\n  return translations[status as keyof typeof translations] || status;\n}\n","size_bytes":17543},"client/src/pages/CandidateLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, UserPlus, LogIn, ArrowLeft, Plane } from \"lucide-react\";\nimport { useSimpleToast } from \"@/lib/simpleToast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\")\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\")\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function CandidateLogin() {\n  const [, setLocation] = useLocation();\n  const [isRegisterMode, setIsRegisterMode] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useSimpleToast();\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\"\n    }\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      try {\n        const response = await fetch(\"/api/auth/login\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n          credentials: \"include\",\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Erreur de connexion\");\n        }\n        \n        return response.json();\n      } catch (error) {\n        throw error;\n      }\n    },\n    onSuccess: (response) => {\n      toast({\n        description: \"Connexion réussie !\",\n        variant: \"default\"\n      });\n      // Redirection vers le dashboard candidat\n      window.location.href = response.redirectPath || \"/\";\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Erreur de connexion\";\n      setError(errorMessage);\n      toast({\n        title: \"Erreur de connexion\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      try {\n        const response = await fetch(\"/api/auth/register\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n          credentials: \"include\",\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Erreur lors de la création du compte\");\n        }\n        \n        return response.json();\n      } catch (error) {\n        throw error;\n      }\n    },\n    onSuccess: (response) => {\n      toast({\n        description: \"Compte créé avec succès !\",\n        variant: \"default\"\n      });\n      // Redirection vers le dashboard candidat  \n      window.location.href = response.redirectPath || \"/\";\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Erreur lors de la création du compte\";\n      setError(errorMessage);\n      toast({\n        title: \"Erreur d'inscription\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onLoginSubmit = (data: LoginFormData) => {\n    setError(null);\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormData) => {\n    setError(null);\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header avec retour */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/\")}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n        </div>\n\n        {/* Logo/Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center items-center gap-3 mb-4\">\n            <div className=\"p-3 bg-blue-600 rounded-xl\">\n              <Plane className=\"h-8 w-8 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">AeroRecrutement</h1>\n          </div>\n          <p className=\"text-gray-600\">Votre carrière dans l'aviation commence ici</p>\n        </div>\n\n        {/* Formulaire principal */}\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center gap-2 text-xl\">\n              {isRegisterMode ? (\n                <>\n                  <UserPlus className=\"h-5 w-5\" />\n                  Créer un compte candidat\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"h-5 w-5\" />\n                  Connexion candidat\n                </>\n              )}\n            </CardTitle>\n            <CardDescription className=\"text-blue-100\">\n              {isRegisterMode ? \n                \"Rejoignez AeroRecrutement pour accéder aux meilleures opportunités\" :\n                \"Connectez-vous pour accéder à votre espace candidat\"\n              }\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-4 p-6\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {isRegisterMode ? (\n              /* Formulaire d'inscription */\n              <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Prénom</Label>\n                    <Input\n                      id=\"firstName\"\n                      {...registerForm.register(\"firstName\")}\n                      placeholder=\"Jean\"\n                      data-testid=\"input-firstName\"\n                    />\n                    {registerForm.formState.errors.firstName && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {registerForm.formState.errors.firstName.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Nom</Label>\n                    <Input\n                      id=\"lastName\"\n                      {...registerForm.register(\"lastName\")}\n                      placeholder=\"Dupont\"\n                      data-testid=\"input-lastName\"\n                    />\n                    {registerForm.formState.errors.lastName && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {registerForm.formState.errors.lastName.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    {...registerForm.register(\"email\")}\n                    placeholder=\"jean.dupont@example.com\"\n                    data-testid=\"input-register-email\"\n                  />\n                  {registerForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-password\">Mot de passe</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      {...registerForm.register(\"password\")}\n                      placeholder=\"Min. 6 caractères\"\n                      data-testid=\"input-register-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  {registerForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {registerForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Inscription...\" : \"Créer mon compte\"}\n                </Button>\n              </form>\n            ) : (\n              /* Formulaire de connexion */\n              <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...loginForm.register(\"email\")}\n                    placeholder=\"votre@email.com\"\n                    data-testid=\"input-email\"\n                  />\n                  {loginForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"password\">Mot de passe</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      {...loginForm.register(\"password\")}\n                      placeholder=\"Votre mot de passe\"\n                      data-testid=\"input-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Connexion...\" : \"Se connecter\"}\n                </Button>\n              </form>\n            )}\n\n            {/* Bouton pour basculer entre connexion/inscription */}\n            <div className=\"text-center pt-4 border-t\">\n              <Button\n                variant=\"link\"\n                onClick={() => {\n                  setIsRegisterMode(!isRegisterMode);\n                  setError(null);\n                  loginForm.reset();\n                  registerForm.reset();\n                }}\n                data-testid=\"button-switch-mode\"\n              >\n                {isRegisterMode ? \n                  \"Déjà un compte ? Se connecter\" : \n                  \"Pas de compte ? Créer un compte\"\n                }\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Lien vers l'administration */}\n        <div className=\"text-center mt-6\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/admin/login\")}\n            data-testid=\"link-admin\"\n            className=\"border-blue-200 text-blue-600 hover:bg-blue-50\"\n          >\n            Accès administration →\n          </Button>\n        </div>\n\n        {/* Comptes de test */}\n        <div className=\"mt-8 p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n          <h3 className=\"font-medium text-yellow-800 mb-2\">💡 Comptes de test</h3>\n          <div className=\"text-sm text-yellow-700 space-y-1\">\n            <p><strong>Candidat:</strong> candidat.test@example.com / candidate123</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14572},"client/src/pages/CandidateScoring.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Award, \n  Star, \n  Send,\n  Briefcase,\n  LogOut,\n  User,\n  Target,\n  Trophy\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CandidateScoring() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [scores, setScores] = useState<{ [key: number]: number }>({});\n  const [notes, setNotes] = useState<{ [key: number]: string }>({});\n\n  const { data: assignedCandidates = [], isLoading } = useQuery({\n    queryKey: [\"/api/recruiter/assigned-candidates\"],\n  });\n\n  const scoreMutation = useMutation({\n    mutationFn: async ({ applicationId, score, note }: { applicationId: number, score: number, note?: string }) => {\n      await apiRequest(\"PUT\", `/api/recruiter/score/${applicationId}`, {\n        score,\n        notes: note\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Note enregistrée\",\n        description: \"La note a été enregistrée avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recruiter/assigned-candidates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de l'enregistrement de la note.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleScoreChange = (applicationId: number, value: number[]) => {\n    setScores(prev => ({ ...prev, [applicationId]: value[0] }));\n  };\n\n  const handleNotesChange = (applicationId: number, value: string) => {\n    setNotes(prev => ({ ...prev, [applicationId]: value }));\n  };\n\n  const handleSubmitScore = (applicationId: number) => {\n    const score = scores[applicationId];\n    const note = notes[applicationId];\n\n    if (score === undefined) {\n      toast({\n        title: \"Note requise\",\n        description: \"Veuillez attribuer une note avant de valider.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    scoreMutation.mutate({ applicationId, score, note });\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600\";\n    if (score >= 60) return \"text-blue-600\";\n    if (score >= 40) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 90) return \"Excellent\";\n    if (score >= 80) return \"Très Bon\";\n    if (score >= 70) return \"Bon\";\n    if (score >= 60) return \"Moyen\";\n    if (score >= 40) return \"Passable\";\n    return \"Insuffisant\";\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Interface Recruteur</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {user?.role === \"admin\" ? \"Super Admin\" : \n                 user?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <div className=\"flex space-x-6 mb-8 border-b border-border\">\n          {(user?.role === \"hr\" || user?.role === \"admin\") && (\n            <>\n              <Link href=\"/admin\">\n                <Button variant=\"ghost\" className=\"text-muted-foreground\">\n                  <Briefcase className=\"h-4 w-4 mr-2\" />\n                  Tableau de bord\n                </Button>\n              </Link>\n              <Link href=\"/admin/assignment\">\n                <Button variant=\"ghost\" className=\"text-muted-foreground\">\n                  <Target className=\"h-4 w-4 mr-2\" />\n                  Affectation\n                </Button>\n              </Link>\n            </>\n          )}\n          <Button variant=\"ghost\" className=\"border-b-2 border-primary text-primary\">\n            <Award className=\"h-4 w-4 mr-2\" />\n            Notation des Candidats\n          </Button>\n          {(user?.role === \"hr\" || user?.role === \"admin\") && (\n            <Link href=\"/admin/final-results\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground\">\n                <Trophy className=\"h-4 w-4 mr-2\" />\n                Résultats Finaux\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        <h1 className=\"text-2xl font-bold mb-6\">Notation des Candidats Assignés</h1>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">Chargement des candidats...</div>\n        ) : assignedCandidates.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <User className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">\n                Aucun candidat ne vous a été assigné pour le moment.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {assignedCandidates.map((application: any) => (\n              <Card key={application.id}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>\n                          {application.candidate.firstName} {application.candidate.lastName}\n                        </span>\n                        {application.manualScore && (\n                          <Badge variant=\"secondary\">\n                            Déjà noté: {application.manualScore}/100\n                          </Badge>\n                        )}\n                      </CardTitle>\n                      <p className=\"text-muted-foreground\">\n                        Candidature pour: <strong>{application.job.title}</strong>\n                      </p>\n                    </div>\n                    <Badge className=\"bg-blue-100 text-blue-800\">\n                      Score Auto: {application.autoScore}/100\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  {/* Candidate Info */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <strong>Email:</strong> {application.candidate.email}\n                    </div>\n                    <div>\n                      <strong>Téléphone:</strong> {application.candidate.phone || 'Non renseigné'}\n                    </div>\n                    <div>\n                      <strong>Disponibilité:</strong> {\n                        application.availabilityDate \n                          ? new Date(application.availabilityDate).toLocaleDateString('fr-FR')\n                          : 'Immédiatement'\n                      }\n                    </div>\n                    <div>\n                      <strong>Salaire souhaité:</strong> {application.salaryExpectation || 'Non précisé'}\n                    </div>\n                  </div>\n\n                  {/* Cover Letter */}\n                  {application.coverLetter && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Lettre de motivation:</h4>\n                      <p className=\"text-sm text-muted-foreground p-3 bg-gray-50 rounded\">\n                        {application.coverLetter}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Score automatique details */}\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Détail du score automatique:</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2 text-xs\">\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <div className=\"font-semibold\">Expérience</div>\n                        <div className=\"text-blue-600\">\n                          {application.factors?.experienceMatch || 0}/25\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <div className=\"font-semibold\">Compétences</div>\n                        <div className=\"text-blue-600\">\n                          {application.factors?.skillsMatch || 0}/30\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <div className=\"font-semibold\">Disponibilité</div>\n                        <div className=\"text-blue-600\">\n                          {application.factors?.availabilityScore || 0}/15\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <div className=\"font-semibold\">Salaire</div>\n                        <div className=\"text-blue-600\">\n                          {application.factors?.salaryFit || 0}/15\n                        </div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <div className=\"font-semibold\">Qualité</div>\n                        <div className=\"text-blue-600\">\n                          {application.factors?.applicationQuality || 0}/15\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Manual Scoring */}\n                  <div className=\"border-t pt-6\">\n                    <h4 className=\"font-semibold mb-4\">Votre évaluation:</h4>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <label className=\"text-sm font-medium\">\n                            Note globale: {scores[application.id] || application.manualScore || 0}/100\n                          </label>\n                          <span className={`text-sm font-semibold ${getScoreColor(scores[application.id] || application.manualScore || 0)}`}>\n                            {getScoreLabel(scores[application.id] || application.manualScore || 0)}\n                          </span>\n                        </div>\n                        <Slider\n                          value={[scores[application.id] || application.manualScore || 0]}\n                          onValueChange={(value) => handleScoreChange(application.id, value)}\n                          max={100}\n                          step={5}\n                          className=\"w-full\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">\n                          Commentaires (optionnel):\n                        </label>\n                        <Textarea\n                          placeholder=\"Vos observations sur ce candidat...\"\n                          value={notes[application.id] || application.scoreNotes || ''}\n                          onChange={(e) => handleNotesChange(application.id, e.target.value)}\n                          rows={3}\n                        />\n                      </div>\n                      \n                      <Button \n                        onClick={() => handleSubmitScore(application.id)}\n                        disabled={scoreMutation.isPending}\n                        className=\"w-full\"\n                      >\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        {scoreMutation.isPending ? \"Enregistrement...\" : \"Enregistrer l'Évaluation\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13151},"client/src/pages/ContractManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  FileText,\n  Calendar,\n  DollarSign,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  Plus,\n  Edit,\n  Eye,\n  Download,\n  Signature\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface ContractFormData {\n  applicationId: number;\n  contractType: string;\n  startDate: string;\n  endDate?: string;\n  baseSalary: number;\n  workingHours: number;\n  vacationDays: number;\n}\n\ninterface AmendmentFormData {\n  amendmentType: string;\n  description: string;\n  effectiveDate: string;\n  previousValue?: string;\n  newValue: string;\n}\n\nexport default function ContractManagement() {\n  const { user } = useAuth();\n  const [selectedApplication, setSelectedApplication] = useState<number | null>(null);\n  const [showContractForm, setShowContractForm] = useState(false);\n  const [showAmendmentForm, setShowAmendmentForm] = useState(false);\n  const [selectedContract, setSelectedContract] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Formulaires\n  const [contractForm, setContractForm] = useState<ContractFormData>({\n    applicationId: 0,\n    contractType: \"CDI\",\n    startDate: \"\",\n    endDate: \"\",\n    baseSalary: 0,\n    workingHours: 35,\n    vacationDays: 25,\n  });\n\n  const [amendmentForm, setAmendmentForm] = useState<AmendmentFormData>({\n    amendmentType: \"\",\n    description: \"\",\n    effectiveDate: \"\",\n    previousValue: \"\",\n    newValue: \"\",\n  });\n\n  // Queries\n  const { data: contracts = [] } = useQuery({\n    queryKey: [\"/api/contracts\"],\n  });\n\n  const { data: pendingContracts = [] } = useQuery({\n    queryKey: [\"/api/contracts/pending\"],\n  });\n\n  const { data: acceptedApplications = [] } = useQuery({\n    queryKey: [\"/api/admin/applications\"],\n    select: (data: any[]) => data.filter(app => app.status === \"accepted\" || app.status === \"validated\"),\n  });\n\n  // Mutations\n  const generateContractMutation = useMutation({\n    mutationFn: async (data: { applicationId: number; contractData: any }) =>\n      apiRequest(\"POST\", \"/api/contracts/generate\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      setShowContractForm(false);\n      setContractForm({\n        applicationId: 0,\n        contractType: \"CDI\",\n        startDate: \"\",\n        endDate: \"\",\n        baseSalary: 0,\n        workingHours: 35,\n        vacationDays: 25,\n      });\n    },\n  });\n\n  const activateContractMutation = useMutation({\n    mutationFn: async (contractId: number) =>\n      apiRequest(\"PUT\", `/api/contracts/${contractId}/activate`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n    },\n  });\n\n  const createAmendmentMutation = useMutation({\n    mutationFn: async (data: { contractId: number; amendmentData: any }) =>\n      apiRequest(\"POST\", `/api/contracts/${data.contractId}/amendments`, data.amendmentData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      setShowAmendmentForm(false);\n      setAmendmentForm({\n        amendmentType: \"\",\n        description: \"\",\n        effectiveDate: \"\",\n        previousValue: \"\",\n        newValue: \"\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      draft: \"secondary\",\n      active: \"default\",\n      pending: \"outline\",\n      signed: \"default\",\n      terminated: \"destructive\",\n    } as const;\n    \n    const colors = {\n      draft: \"bg-gray-100 text-gray-800\",\n      active: \"bg-green-100 text-green-800\",\n      pending: \"bg-yellow-100 text-yellow-800\",\n      signed: \"bg-blue-100 text-blue-800\",\n      terminated: \"bg-red-100 text-red-800\",\n    };\n\n    return colors[status as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getStatusText = (status: string) => {\n    const texts = {\n      draft: \"Brouillon\",\n      active: \"Actif\",\n      pending: \"En attente\",\n      signed: \"Signé\",\n      terminated: \"Terminé\",\n    };\n    return texts[status as keyof typeof texts] || status;\n  };\n\n  const handleGenerateContract = () => {\n    if (!selectedApplication) return;\n\n    generateContractMutation.mutate({\n      applicationId: selectedApplication,\n      contractData: {\n        contractType: contractForm.contractType,\n        startDate: contractForm.startDate,\n        endDate: contractForm.contractType === \"CDD\" ? contractForm.endDate : null,\n        baseSalary: contractForm.baseSalary,\n        workingHours: contractForm.workingHours,\n        vacationDays: contractForm.vacationDays,\n      },\n    });\n  };\n\n  const handleCreateAmendment = () => {\n    if (!selectedContract) return;\n\n    createAmendmentMutation.mutate({\n      contractId: selectedContract.id,\n      amendmentData: amendmentForm,\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestion des Contrats</h1>\n          <p className=\"text-muted-foreground\">\n            Automatisation de la génération et gestion des contrats employés\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Vue d'ensemble</TabsTrigger>\n          <TabsTrigger value=\"generate\">Générer Contrats</TabsTrigger>\n          <TabsTrigger value=\"active\">Contrats Actifs</TabsTrigger>\n          <TabsTrigger value=\"amendments\">Avenants</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Contrats Actifs</CardTitle>\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {contracts.filter((c: any) => c.status === \"active\").length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {contracts.length} au total\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">En Attente</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{pendingContracts.length}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  signature requise\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Candidats Validés</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{acceptedApplications.length}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  prêts pour contrat\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Expiration</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {contracts.filter((c: any) => {\n                    if (!c.endDate) return false;\n                    const endDate = new Date(c.endDate);\n                    const today = new Date();\n                    const diffTime = endDate.getTime() - today.getTime();\n                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                    return diffDays <= 30 && diffDays > 0;\n                  }).length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  dans 30 jours\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contrats en attente de signature */}\n          {pendingContracts.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Contrats en Attente de Signature</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {pendingContracts.map((contract: any) => (\n                    <div key={contract.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"space-y-1\">\n                        <p className=\"font-semibold\">Contrat #{contract.id}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {contract.contractType} - {contract.baseSalary}€\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Début: {new Date(contract.startDate).toLocaleDateString('fr-FR')}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getStatusBadge(contract.signatureStatus)}>\n                          {getStatusText(contract.signatureStatus)}\n                        </Badge>\n                        <Button\n                          onClick={() => activateContractMutation.mutate(contract.id)}\n                          size=\"sm\"\n                          disabled={contract.signatureStatus !== \"signed\"}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Activer\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"generate\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Générer un Contrat</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Sélectionnez un candidat validé pour générer automatiquement son contrat\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {acceptedApplications.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  Aucun candidat validé disponible pour la génération de contrat\n                </p>\n              ) : (\n                <>\n                  <div>\n                    <Label htmlFor=\"candidate-select\">Sélectionner un candidat</Label>\n                    <Select\n                      value={selectedApplication?.toString() || \"\"}\n                      onValueChange={(value) => setSelectedApplication(parseInt(value))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Choisir un candidat...\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {acceptedApplications.map((application: any) => (\n                          <SelectItem key={application.id} value={application.id.toString()}>\n                            {application.user?.firstName} {application.user?.lastName} - {application.job?.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedApplication && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"contract-type\">Type de contrat</Label>\n                        <Select\n                          value={contractForm.contractType}\n                          onValueChange={(value) => setContractForm(prev => ({ ...prev, contractType: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"CDI\">CDI</SelectItem>\n                            <SelectItem value=\"CDD\">CDD</SelectItem>\n                            <SelectItem value=\"Stage\">Stage</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"start-date\">Date de début</Label>\n                        <Input\n                          type=\"date\"\n                          value={contractForm.startDate}\n                          onChange={(e) => setContractForm(prev => ({ ...prev, startDate: e.target.value }))}\n                        />\n                      </div>\n\n                      {contractForm.contractType === \"CDD\" && (\n                        <div>\n                          <Label htmlFor=\"end-date\">Date de fin</Label>\n                          <Input\n                            type=\"date\"\n                            value={contractForm.endDate}\n                            onChange={(e) => setContractForm(prev => ({ ...prev, endDate: e.target.value }))}\n                          />\n                        </div>\n                      )}\n\n                      <div>\n                        <Label htmlFor=\"salary\">Salaire de base (€)</Label>\n                        <Input\n                          type=\"number\"\n                          value={contractForm.baseSalary}\n                          onChange={(e) => setContractForm(prev => ({ ...prev, baseSalary: parseInt(e.target.value) }))}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"working-hours\">Heures hebdomadaires</Label>\n                        <Input\n                          type=\"number\"\n                          value={contractForm.workingHours}\n                          onChange={(e) => setContractForm(prev => ({ ...prev, workingHours: parseInt(e.target.value) }))}\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"vacation-days\">Jours de congés annuels</Label>\n                        <Input\n                          type=\"number\"\n                          value={contractForm.vacationDays}\n                          onChange={(e) => setContractForm(prev => ({ ...prev, vacationDays: parseInt(e.target.value) }))}\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end\">\n                    <Button\n                      onClick={handleGenerateContract}\n                      disabled={!selectedApplication || generateContractMutation.isPending}\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      {generateContractMutation.isPending ? \"Génération...\" : \"Générer le Contrat\"}\n                    </Button>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"active\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Contrats Actifs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {contracts.filter((c: any) => c.status === \"active\").map((contract: any) => (\n                  <div key={contract.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"space-y-1\">\n                      <p className=\"font-semibold\">Contrat #{contract.id}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {contract.contractType} - {contract.baseSalary}€\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Du {new Date(contract.startDate).toLocaleDateString('fr-FR')}\n                        {contract.endDate && ` au ${new Date(contract.endDate).toLocaleDateString('fr-FR')}`}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getStatusBadge(contract.status)}>\n                        {getStatusText(contract.status)}\n                      </Badge>\n                      <Button\n                        onClick={() => {\n                          setSelectedContract(contract);\n                          setShowAmendmentForm(true);\n                        }}\n                        size=\"sm\"\n                        variant=\"outline\"\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Avenant\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        PDF\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"amendments\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Gestion des Avenants</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Modifications et avenants aux contrats existants\n              </p>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-center text-muted-foreground py-8\">\n                Les avenants seront listés ici une fois créés\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modal pour créer un avenant */}\n      <Dialog open={showAmendmentForm} onOpenChange={setShowAmendmentForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Créer un Avenant</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"amendment-type\">Type d'avenant</Label>\n              <Select\n                value={amendmentForm.amendmentType}\n                onValueChange={(value) => setAmendmentForm(prev => ({ ...prev, amendmentType: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Sélectionner le type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"salary_change\">Modification salaire</SelectItem>\n                  <SelectItem value=\"role_change\">Changement de poste</SelectItem>\n                  <SelectItem value=\"schedule_change\">Modification horaires</SelectItem>\n                  <SelectItem value=\"location_change\">Changement de lieu</SelectItem>\n                  <SelectItem value=\"other\">Autre</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                value={amendmentForm.description}\n                onChange={(e) => setAmendmentForm(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Décrivez la modification...\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"effective-date\">Date d'effet</Label>\n              <Input\n                type=\"date\"\n                value={amendmentForm.effectiveDate}\n                onChange={(e) => setAmendmentForm(prev => ({ ...prev, effectiveDate: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"previous-value\">Valeur précédente</Label>\n              <Input\n                value={amendmentForm.previousValue}\n                onChange={(e) => setAmendmentForm(prev => ({ ...prev, previousValue: e.target.value }))}\n                placeholder=\"Ex: 2500€\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"new-value\">Nouvelle valeur</Label>\n              <Input\n                value={amendmentForm.newValue}\n                onChange={(e) => setAmendmentForm(prev => ({ ...prev, newValue: e.target.value }))}\n                placeholder=\"Ex: 2800€\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowAmendmentForm(false)}>\n                Annuler\n              </Button>\n              <Button\n                onClick={handleCreateAmendment}\n                disabled={createAmendmentMutation.isPending}\n              >\n                {createAmendmentMutation.isPending ? \"Création...\" : \"Créer l'Avenant\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22322},"client/src/pages/FinalResults.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Trophy, \n  Medal,\n  Award,\n  Crown,\n  Star,\n  Briefcase,\n  LogOut,\n  Target,\n  TrendingUp\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\n\ninterface CandidateScore {\n  applicationId: number;\n  candidate: any;\n  job: any;\n  autoScore: number;\n  manualScore: number;\n  totalScore: number;\n  factors: any;\n}\n\nexport default function FinalResults() {\n  const { user } = useAuth();\n  const [selectedJob, setSelectedJob] = useState<string>(\"\");\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [\"/api/admin/jobs\"],\n  });\n\n  const { data: finalTop3 = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/final-top3\", selectedJob],\n    enabled: !!selectedJob,\n  });\n\n  const getPodiumIcon = (rank: number) => {\n    switch (rank) {\n      case 1: return <Crown className=\"h-8 w-8 text-yellow-500\" />;\n      case 2: return <Medal className=\"h-8 w-8 text-gray-400\" />;\n      case 3: return <Award className=\"h-8 w-8 text-amber-600\" />;\n      default: return <Star className=\"h-6 w-6 text-blue-500\" />;\n    }\n  };\n\n  const getPodiumColor = (rank: number) => {\n    switch (rank) {\n      case 1: return \"from-yellow-100 to-yellow-50 border-yellow-200\";\n      case 2: return \"from-gray-100 to-gray-50 border-gray-200\";\n      case 3: return \"from-amber-100 to-amber-50 border-amber-200\";\n      default: return \"from-blue-100 to-blue-50 border-blue-200\";\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Résultats Finaux</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {(user as any)?.role === \"admin\" ? \"Super Admin\" : \n                 (user as any)?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <div className=\"flex space-x-6 mb-8 border-b border-border\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Tableau de bord\n            </Button>\n          </Link>\n          <Link href=\"/admin/assignment\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Target className=\"h-4 w-4 mr-2\" />\n              Affectation\n            </Button>\n          </Link>\n          <Link href=\"/admin/scoring\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Award className=\"h-4 w-4 mr-2\" />\n              Notation\n            </Button>\n          </Link>\n          <Button variant=\"ghost\" className=\"border-b-2 border-primary text-primary\">\n            <Trophy className=\"h-4 w-4 mr-2\" />\n            Résultats Finaux\n          </Button>\n        </div>\n\n        <div className=\"text-center mb-8\">\n          <Trophy className=\"h-16 w-16 mx-auto text-yellow-500 mb-4\" />\n          <h1 className=\"text-3xl font-bold mb-2\">TOP 3 FINAL</h1>\n          <p className=\"text-muted-foreground\">\n            Les 3 meilleurs candidats sélectionnés après évaluation complète\n          </p>\n        </div>\n\n        {/* Job Selection */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Sélectionner l'offre d'emploi</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={selectedJob} onValueChange={setSelectedJob}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Choisissez une offre d'emploi pour voir les résultats\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(jobs as any[]).map((job: any) => (\n                  <SelectItem key={job.id} value={job.id.toString()}>\n                    {job.title} - {job.company}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        {/* Results */}\n        {selectedJob && (\n          <>\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <TrendingUp className=\"h-12 w-12 mx-auto text-muted-foreground mb-4 animate-pulse\" />\n                <p>Calcul des résultats finaux...</p>\n              </div>\n            ) : (finalTop3 as any[]).length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Trophy className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Aucun résultat disponible</h3>\n                  <p className=\"text-muted-foreground\">\n                    Aucun candidat n'a encore été noté par les recruteurs pour cette offre.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-6\">\n                {(finalTop3 as CandidateScore[]).map((candidate: CandidateScore, index: number) => (\n                  <Card key={candidate.applicationId} className={`bg-gradient-to-r ${getPodiumColor(index + 1)} border-2`}>\n                    <CardHeader>\n                      <div className=\"flex items-center space-x-4\">\n                        {getPodiumIcon(index + 1)}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <CardTitle className=\"text-2xl\">\n                              #{index + 1} - {candidate.candidate.firstName} {candidate.candidate.lastName}\n                            </CardTitle>\n                            <Badge variant=\"default\" className=\"text-lg px-3 py-1\">\n                              {candidate.totalScore}/100\n                            </Badge>\n                          </div>\n                          <p className=\"text-lg text-muted-foreground\">\n                            {candidate.job.title} - {candidate.job.company}\n                          </p>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent className=\"space-y-6\">\n                      {/* Contact Info */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-white/70 rounded-lg\">\n                        <div>\n                          <strong>Email:</strong> {candidate.candidate.email}\n                        </div>\n                        <div>\n                          <strong>Téléphone:</strong> {candidate.candidate.phone || 'Non renseigné'}\n                        </div>\n                        <div>\n                          <strong>Salaire souhaité:</strong> {candidate.job.salaryExpectation || 'Non précisé'}\n                        </div>\n                      </div>\n\n                      {/* Score Breakdown */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <h4 className=\"font-semibold mb-3 flex items-center\">\n                            <TrendingUp className=\"h-4 w-4 mr-2\" />\n                            Scores Détaillés\n                          </h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between items-center p-2 bg-white/50 rounded\">\n                              <span className=\"text-sm\">Score Automatique:</span>\n                              <Badge variant=\"outline\">{candidate.autoScore}/100</Badge>\n                            </div>\n                            <div className=\"flex justify-between items-center p-2 bg-white/50 rounded\">\n                              <span className=\"text-sm\">Note Recruteur:</span>\n                              <Badge variant=\"outline\">{candidate.manualScore}/100</Badge>\n                            </div>\n                            <div className=\"flex justify-between items-center p-2 bg-primary text-primary-foreground rounded font-semibold\">\n                              <span>Score Final:</span>\n                              <span>{candidate.totalScore}/100</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-semibold mb-3\">Critères Automatiques</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                            <div className=\"text-center p-2 bg-white/50 rounded\">\n                              <div className=\"font-semibold\">Expérience</div>\n                              <div className=\"text-blue-600\">\n                                {candidate.factors.experienceMatch}/25\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-white/50 rounded\">\n                              <div className=\"font-semibold\">Compétences</div>\n                              <div className=\"text-blue-600\">\n                                {candidate.factors.skillsMatch}/30\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-white/50 rounded\">\n                              <div className=\"font-semibold\">Disponibilité</div>\n                              <div className=\"text-blue-600\">\n                                {candidate.factors.availabilityScore}/15\n                              </div>\n                            </div>\n                            <div className=\"text-center p-2 bg-white/50 rounded\">\n                              <div className=\"font-semibold\">Salaire</div>\n                              <div className=\"text-blue-600\">\n                                {candidate.factors.salaryFit}/15\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Recruiter Notes */}\n                      {candidate.candidate.scoreNotes && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Notes du Recruteur:</h4>\n                          <p className=\"text-sm p-3 bg-white/50 rounded italic\">\n                            \"{candidate.candidate.scoreNotes}\"\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n\n                {/* Summary */}\n                <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200\">\n                  <CardHeader>\n                    <CardTitle className=\"text-center flex items-center justify-center\">\n                      <Star className=\"h-6 w-6 mr-2 text-blue-600\" />\n                      Processus de Sélection Terminé\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <p className=\"text-muted-foreground mb-4\">\n                      Les 3 meilleurs candidats ont été identifiés grâce à notre processus de sélection en 2 étapes :\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div className=\"p-3 bg-white/70 rounded\">\n                        <strong>1. Tri Automatique</strong><br />\n                        Analyse de l'expérience, compétences, disponibilité et adéquation salariale\n                      </div>\n                      <div className=\"p-3 bg-white/70 rounded\">\n                        <strong>2. Évaluation Humaine</strong><br />\n                        Notation détaillée par les recruteurs experts\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13222},"client/src/pages/HRManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  DollarSign,\n  Calendar,\n  Clock,\n  Users,\n  FileText,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Plus,\n  Eye,\n  Download,\n  Send,\n  User,\n  Briefcase,\n  Settings\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface PayrollFormData {\n  employeeId: number;\n  period: string;\n  baseSalary: number;\n  bonuses?: number;\n  overtime?: number;\n  absenceDays?: number;\n}\n\ninterface LeaveRequestFormData {\n  leaveType: string;\n  startDate: string;\n  endDate: string;\n  reason?: string;\n}\n\ninterface HRRequestFormData {\n  requestType: string;\n  title: string;\n  description: string;\n  priority: string;\n}\n\nexport default function HRManagement() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [showPayrollForm, setShowPayrollForm] = useState(false);\n  const [showLeaveForm, setShowLeaveForm] = useState(false);\n  const [showHRRequestForm, setShowHRRequestForm] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<any>(null);\n\n  const [payrollForm, setPayrollForm] = useState<PayrollFormData>({\n    employeeId: 0,\n    period: new Date().toISOString().slice(0, 7), // YYYY-MM\n    baseSalary: 0,\n    bonuses: 0,\n    overtime: 0,\n    absenceDays: 0,\n  });\n\n  const [leaveForm, setLeaveForm] = useState<LeaveRequestFormData>({\n    leaveType: \"vacation\",\n    startDate: \"\",\n    endDate: \"\",\n    reason: \"\",\n  });\n\n  const [hrRequestForm, setHRRequestForm] = useState<HRRequestFormData>({\n    requestType: \"address_change\",\n    title: \"\",\n    description: \"\",\n    priority: \"normal\",\n  });\n\n  // Queries\n  const { data: hrMetrics } = useQuery({\n    queryKey: [\"/api/hr/metrics\"],\n  });\n\n  const { data: employees = [] } = useQuery({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const { data: leaveRequests = [] } = useQuery({\n    queryKey: [\"/api/leave/requests\"],\n  });\n\n  const { data: hrRequests = [] } = useQuery({\n    queryKey: [\"/api/hr/requests\"],\n  });\n\n  // Mutations\n  const generatePayrollMutation = useMutation({\n    mutationFn: async (data: { employeeId: number; period: string; payrollData: any }) =>\n      apiRequest(\"POST\", \"/api/payroll/generate\", data),\n    onSuccess: () => {\n      setShowPayrollForm(false);\n      resetPayrollForm();\n    },\n  });\n\n  const createLeaveRequestMutation = useMutation({\n    mutationFn: async (data: LeaveRequestFormData) =>\n      apiRequest(\"POST\", \"/api/leave/request\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave/requests\"] });\n      setShowLeaveForm(false);\n      resetLeaveForm();\n    },\n  });\n\n  const approveLeaveRequestMutation = useMutation({\n    mutationFn: async (id: number) =>\n      apiRequest(\"PUT\", `/api/leave/requests/${id}/approve`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave/requests\"] });\n    },\n  });\n\n  const rejectLeaveRequestMutation = useMutation({\n    mutationFn: async ({ id, reason }: { id: number; reason: string }) =>\n      apiRequest(\"PUT\", `/api/leave/requests/${id}/reject`, { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave/requests\"] });\n    },\n  });\n\n  const createHRRequestMutation = useMutation({\n    mutationFn: async (data: HRRequestFormData) =>\n      apiRequest(\"POST\", \"/api/hr/requests\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hr/requests\"] });\n      setShowHRRequestForm(false);\n      resetHRRequestForm();\n    },\n  });\n\n  const resetPayrollForm = () => {\n    setPayrollForm({\n      employeeId: 0,\n      period: new Date().toISOString().slice(0, 7),\n      baseSalary: 0,\n      bonuses: 0,\n      overtime: 0,\n      absenceDays: 0,\n    });\n  };\n\n  const resetLeaveForm = () => {\n    setLeaveForm({\n      leaveType: \"vacation\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n    });\n  };\n\n  const resetHRRequestForm = () => {\n    setHRRequestForm({\n      requestType: \"address_change\",\n      title: \"\",\n      description: \"\",\n      priority: \"normal\",\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const colors = {\n      pending: \"bg-yellow-100 text-yellow-800\",\n      approved: \"bg-green-100 text-green-800\",\n      rejected: \"bg-red-100 text-red-800\",\n      in_progress: \"bg-blue-100 text-blue-800\",\n      completed: \"bg-green-100 text-green-800\",\n      cancelled: \"bg-gray-100 text-gray-800\",\n    };\n    return colors[status as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getStatusText = (status: string) => {\n    const texts = {\n      pending: \"En attente\",\n      approved: \"Approuvée\",\n      rejected: \"Refusée\",\n      in_progress: \"En cours\",\n      completed: \"Terminée\",\n      cancelled: \"Annulée\",\n    };\n    return texts[status as keyof typeof texts] || status;\n  };\n\n  const getLeaveTypeText = (type: string) => {\n    const types = {\n      vacation: \"Congés payés\",\n      sick: \"Congé maladie\",\n      personal: \"Congé personnel\",\n      maternity: \"Congé maternité\",\n      paternity: \"Congé paternité\",\n    };\n    return types[type as keyof typeof types] || type;\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const colors = {\n      low: \"bg-gray-100 text-gray-800\",\n      normal: \"bg-blue-100 text-blue-800\",\n      high: \"bg-orange-100 text-orange-800\",\n      urgent: \"bg-red-100 text-red-800\",\n    };\n    return colors[priority as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const isAdmin = (user as any)?.role === \"admin\" || (user as any)?.role === \"hr\";\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestion RH</h1>\n          <p className=\"text-muted-foreground\">\n            Paie, congés, demandes internes et gestion du personnel\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"dashboard\">Tableau de bord</TabsTrigger>\n          <TabsTrigger value=\"payroll\">Paie</TabsTrigger>\n          <TabsTrigger value=\"leaves\">Congés</TabsTrigger>\n          <TabsTrigger value=\"requests\">Demandes RH</TabsTrigger>\n          <TabsTrigger value=\"employees\">Employés</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"dashboard\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Employés</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{hrMetrics?.totalEmployees || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {hrMetrics?.activeContracts || 0} contrats actifs\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Demandes Congés</CardTitle>\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{hrMetrics?.pendingLeaveRequests || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {hrMetrics?.upcomingLeaves || 0} congés à venir\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Fiches de Paie</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{hrMetrics?.payrollToPrepare || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  à préparer ce mois\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Demandes en Attente</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Demandes de congés</span>\n                    <Badge variant=\"secondary\">{hrMetrics?.pendingLeaveRequests || 0}</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Demandes RH</span>\n                    <Badge variant=\"secondary\">{hrMetrics?.pendingHrRequests || 0}</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Fiches de paie</span>\n                    <Badge variant=\"secondary\">{hrMetrics?.payrollToPrepare || 0}</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Actions Rapides</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {isAdmin && (\n                  <Button\n                    onClick={() => setShowPayrollForm(true)}\n                    className=\"w-full justify-start\"\n                    variant=\"outline\"\n                  >\n                    <DollarSign className=\"h-4 w-4 mr-2\" />\n                    Générer Fiche de Paie\n                  </Button>\n                )}\n                <Button\n                  onClick={() => setShowLeaveForm(true)}\n                  className=\"w-full justify-start\"\n                  variant=\"outline\"\n                >\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Demande de Congés\n                </Button>\n                <Button\n                  onClick={() => setShowHRRequestForm(true)}\n                  className=\"w-full justify-start\"\n                  variant=\"outline\"\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Demande RH\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"payroll\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold\">Gestion de la Paie</h2>\n            {isAdmin && (\n              <Button onClick={() => setShowPayrollForm(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Générer Fiche de Paie\n              </Button>\n            )}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Fiches de Paie du Mois</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-center text-muted-foreground py-8\">\n                Les fiches de paie seront affichées ici une fois générées\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"leaves\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold\">Gestion des Congés</h2>\n            <Button onClick={() => setShowLeaveForm(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouvelle Demande\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Demandes de Congés</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {leaveRequests.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Aucune demande de congés\n                  </p>\n                ) : (\n                  leaveRequests.map((request: any) => (\n                    <div key={request.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"space-y-1\">\n                        <p className=\"font-semibold\">\n                          {getLeaveTypeText(request.leaveType)}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Du {new Date(request.startDate).toLocaleDateString('fr-FR')} au{' '}\n                          {new Date(request.endDate).toLocaleDateString('fr-FR')}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {request.totalDays} jour{request.totalDays > 1 ? 's' : ''}\n                          {request.reason && ` - ${request.reason}`}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getStatusBadge(request.status)}>\n                          {getStatusText(request.status)}\n                        </Badge>\n                        {isAdmin && request.status === \"pending\" && (\n                          <div className=\"flex gap-1\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => approveLeaveRequestMutation.mutate(request.id)}\n                            >\n                              <CheckCircle className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => rejectLeaveRequestMutation.mutate({\n                                id: request.id,\n                                reason: \"À préciser\"\n                              })}\n                            >\n                              <XCircle className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"requests\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold\">Demandes RH</h2>\n            <Button onClick={() => setShowHRRequestForm(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouvelle Demande\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Demandes Internes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {hrRequests.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Aucune demande RH\n                  </p>\n                ) : (\n                  hrRequests.map((request: any) => (\n                    <div key={request.id} className=\"flex items-start justify-between p-4 border rounded-lg\">\n                      <div className=\"space-y-1 flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <p className=\"font-semibold\">{request.title}</p>\n                          <Badge className={getPriorityBadge(request.priority)}>\n                            {request.priority}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {request.description}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Type: {request.requestType} • Créée le{' '}\n                          {new Date(request.createdAt).toLocaleDateString('fr-FR')}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2 ml-4\">\n                        <Badge className={getStatusBadge(request.status)}>\n                          {getStatusText(request.status)}\n                        </Badge>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"employees\" className=\"space-y-6\">\n          <h2 className=\"text-2xl font-semibold\">Gestion des Employés</h2>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Liste des Employés</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {employees.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Aucun employé enregistré\n                  </p>\n                ) : (\n                  employees.map((employee: any) => (\n                    <div key={employee.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"h-10 w-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <User className=\"h-5 w-5\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">\n                            {employee.user?.firstName} {employee.user?.lastName}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {employee.position} • {employee.department}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            N° employé: {employee.employeeNumber} • Depuis le{' '}\n                            {new Date(employee.startDate).toLocaleDateString('fr-FR')}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={employee.status === \"active\" ? \"default\" : \"secondary\"}>\n                          {employee.status === \"active\" ? \"Actif\" : \"Inactif\"}\n                        </Badge>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modal Fiche de Paie */}\n      <Dialog open={showPayrollForm} onOpenChange={setShowPayrollForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Générer Fiche de Paie</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"employee\">Employé</Label>\n              <Select\n                value={payrollForm.employeeId.toString()}\n                onValueChange={(value) => setPayrollForm(prev => ({ ...prev, employeeId: parseInt(value) }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Sélectionner un employé\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {employees.map((employee: any) => (\n                    <SelectItem key={employee.id} value={employee.id.toString()}>\n                      {employee.user?.firstName} {employee.user?.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"period\">Période</Label>\n              <Input\n                type=\"month\"\n                value={payrollForm.period}\n                onChange={(e) => setPayrollForm(prev => ({ ...prev, period: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"base-salary\">Salaire de base (€)</Label>\n              <Input\n                type=\"number\"\n                value={payrollForm.baseSalary}\n                onChange={(e) => setPayrollForm(prev => ({ ...prev, baseSalary: parseFloat(e.target.value) }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"bonuses\">Primes (€)</Label>\n              <Input\n                type=\"number\"\n                value={payrollForm.bonuses}\n                onChange={(e) => setPayrollForm(prev => ({ ...prev, bonuses: parseFloat(e.target.value) }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"overtime\">Heures supplémentaires (€)</Label>\n              <Input\n                type=\"number\"\n                value={payrollForm.overtime}\n                onChange={(e) => setPayrollForm(prev => ({ ...prev, overtime: parseFloat(e.target.value) }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"absence-days\">Jours d'absence</Label>\n              <Input\n                type=\"number\"\n                value={payrollForm.absenceDays}\n                onChange={(e) => setPayrollForm(prev => ({ ...prev, absenceDays: parseInt(e.target.value) }))}\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowPayrollForm(false)}>\n                Annuler\n              </Button>\n              <Button\n                onClick={() => generatePayrollMutation.mutate({\n                  employeeId: payrollForm.employeeId,\n                  period: payrollForm.period,\n                  payrollData: {\n                    baseSalary: payrollForm.baseSalary,\n                    bonuses: payrollForm.bonuses,\n                    overtime: payrollForm.overtime,\n                    absenceDays: payrollForm.absenceDays,\n                  },\n                })}\n                disabled={generatePayrollMutation.isPending}\n              >\n                {generatePayrollMutation.isPending ? \"Génération...\" : \"Générer\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal Demande de Congés */}\n      <Dialog open={showLeaveForm} onOpenChange={setShowLeaveForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Demande de Congés</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"leave-type\">Type de congé</Label>\n              <Select\n                value={leaveForm.leaveType}\n                onValueChange={(value) => setLeaveForm(prev => ({ ...prev, leaveType: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"vacation\">Congés payés</SelectItem>\n                  <SelectItem value=\"sick\">Congé maladie</SelectItem>\n                  <SelectItem value=\"personal\">Congé personnel</SelectItem>\n                  <SelectItem value=\"maternity\">Congé maternité</SelectItem>\n                  <SelectItem value=\"paternity\">Congé paternité</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"start-date\">Date de début</Label>\n              <Input\n                type=\"date\"\n                value={leaveForm.startDate}\n                onChange={(e) => setLeaveForm(prev => ({ ...prev, startDate: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"end-date\">Date de fin</Label>\n              <Input\n                type=\"date\"\n                value={leaveForm.endDate}\n                onChange={(e) => setLeaveForm(prev => ({ ...prev, endDate: e.target.value }))}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"reason\">Motif (optionnel)</Label>\n              <Textarea\n                value={leaveForm.reason}\n                onChange={(e) => setLeaveForm(prev => ({ ...prev, reason: e.target.value }))}\n                placeholder=\"Précisez le motif si nécessaire...\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowLeaveForm(false)}>\n                Annuler\n              </Button>\n              <Button\n                onClick={() => createLeaveRequestMutation.mutate(leaveForm)}\n                disabled={createLeaveRequestMutation.isPending}\n              >\n                {createLeaveRequestMutation.isPending ? \"Envoi...\" : \"Envoyer la Demande\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal Demande RH */}\n      <Dialog open={showHRRequestForm} onOpenChange={setShowHRRequestForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Nouvelle Demande RH</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"request-type\">Type de demande</Label>\n              <Select\n                value={hrRequestForm.requestType}\n                onValueChange={(value) => setHRRequestForm(prev => ({ ...prev, requestType: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"address_change\">Changement d'adresse</SelectItem>\n                  <SelectItem value=\"equipment\">Demande de matériel</SelectItem>\n                  <SelectItem value=\"certificate\">Attestation</SelectItem>\n                  <SelectItem value=\"training\">Formation</SelectItem>\n                  <SelectItem value=\"other\">Autre</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"title\">Titre de la demande</Label>\n              <Input\n                value={hrRequestForm.title}\n                onChange={(e) => setHRRequestForm(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Ex: Demande d'ordinateur portable\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"priority\">Priorité</Label>\n              <Select\n                value={hrRequestForm.priority}\n                onValueChange={(value) => setHRRequestForm(prev => ({ ...prev, priority: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Faible</SelectItem>\n                  <SelectItem value=\"normal\">Normale</SelectItem>\n                  <SelectItem value=\"high\">Élevée</SelectItem>\n                  <SelectItem value=\"urgent\">Urgente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                value={hrRequestForm.description}\n                onChange={(e) => setHRRequestForm(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Décrivez votre demande en détail...\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowHRRequestForm(false)}>\n                Annuler\n              </Button>\n              <Button\n                onClick={() => createHRRequestMutation.mutate(hrRequestForm)}\n                disabled={createHRRequestMutation.isPending}\n              >\n                {createHRRequestMutation.isPending ? \"Envoi...\" : \"Envoyer la Demande\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":29528},"client/src/pages/JobManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Eye, \n  EyeOff, \n  Trash2,\n  Briefcase,\n  LogOut,\n  Building2,\n  MapPin,\n  Calendar\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nexport default function JobManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const queryClient = useQueryClient();\n  \n  // État pour la modal d'édition\n  const [editingJob, setEditingJob] = useState<any>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editForm, setEditForm] = useState({\n    title: \"\",\n    company: \"\",\n    location: \"\",\n    description: \"\",\n    requirements: \"\",\n    salary: \"\",\n    contractType: \"\",\n    experienceLevel: \"\",\n    skills: [] as string[]\n  });\n\n  // État pour la modal de création\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [createForm, setCreateForm] = useState({\n    title: \"\",\n    company: \"\",\n    location: \"\",\n    description: \"\",\n    requirements: \"\",\n    salary: \"\",\n    contractType: \"\",\n    experienceLevel: \"\",\n    skills: [] as string[],\n    isActive: true\n  });\n\n  const { data: jobs = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/jobs\"],\n  });\n\n  const toggleJobMutation = useMutation({\n    mutationFn: async ({ jobId, isActive }: { jobId: number, isActive: boolean }) => {\n      // API call pour activer/désactiver une offre\n      const response = await fetch(`/api/admin/jobs/${jobId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs\"] });\n    }\n  });\n\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: number) => {\n      const response = await fetch(`/api/admin/jobs/${jobId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs\"] });\n      toast({\n        title: \"Succès\",\n        description: \"L'offre d'emploi a été supprimée avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateJobMutation = useMutation({\n    mutationFn: async ({ jobId, data }: { jobId: number, data: any }) => {\n      const response = await fetch(`/api/admin/jobs/${jobId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Erreur lors de la mise à jour');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs\"] });\n      setIsEditDialogOpen(false);\n      toast({\n        title: \"Succès\",\n        description: \"L'offre d'emploi a été mise à jour avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/admin/jobs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Erreur lors de la création');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs\"] });\n      setIsCreateDialogOpen(false);\n      setCreateForm({\n        title: \"\",\n        company: \"\",\n        location: \"\",\n        description: \"\",\n        requirements: \"\",\n        salary: \"\",\n        contractType: \"\",\n        experienceLevel: \"\",\n        skills: [],\n        isActive: true\n      });\n      toast({\n        title: \"Succès\",\n        description: \"L'offre d'emploi a été créée avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const filteredJobs = jobs.filter((job: any) =>\n    job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    job.company.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getContractTypeColor = (contractType: string) => {\n    switch (contractType) {\n      case 'CDI':\n        return 'bg-green-100 text-green-800';\n      case 'CDD':\n        return 'bg-blue-100 text-blue-800';\n      case 'Freelance':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleToggleJob = (jobId: number, currentStatus: boolean) => {\n    toggleJobMutation.mutate({ jobId, isActive: !currentStatus });\n  };\n\n  const handleDeleteJob = (jobId: number) => {\n    if (confirm('Êtes-vous sûr de vouloir supprimer cette offre ?')) {\n      deleteJobMutation.mutate(jobId);\n    }\n  };\n\n  const handleEditJob = (job: any) => {\n    setEditingJob(job);\n    setEditForm({\n      title: job.title || \"\",\n      company: job.company || \"\",\n      location: job.location || \"\",\n      description: job.description || \"\",\n      requirements: job.requirements || \"\",\n      salary: job.salary || \"\",\n      contractType: job.contractType || \"\",\n      experienceLevel: job.experienceLevel || \"\",\n      skills: job.skills || []\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateJob = () => {\n    if (!editingJob) return;\n    \n    const updateData = {\n      ...editForm,\n      skills: editForm.skills.filter(skill => skill.trim() !== '')\n    };\n    \n    updateJobMutation.mutate({\n      jobId: editingJob.id,\n      data: updateData\n    });\n  };\n\n  const handleCreateJob = () => {\n    const jobData = {\n      ...createForm,\n      skills: createForm.skills.filter(skill => skill.trim() !== \"\"),\n      isActive: true\n    };\n    \n    createJobMutation.mutate(jobData);\n  };\n\n  const handleSkillChange = (index: number, value: string) => {\n    const newSkills = [...editForm.skills];\n    newSkills[index] = value;\n    setEditForm({ ...editForm, skills: newSkills });\n  };\n\n  const addSkill = () => {\n    setEditForm({ ...editForm, skills: [...editForm.skills, \"\"] });\n  };\n\n  const removeSkill = (index: number) => {\n    const newSkills = editForm.skills.filter((_, i) => i !== index);\n    setEditForm({ ...editForm, skills: newSkills });\n  };\n\n  const handleCreateSkillChange = (index: number, value: string) => {\n    const newSkills = [...createForm.skills];\n    newSkills[index] = value;\n    setCreateForm({ ...createForm, skills: newSkills });\n  };\n\n  const addCreateSkill = () => {\n    setCreateForm({ ...createForm, skills: [...createForm.skills, \"\"] });\n  };\n\n  const removeCreateSkill = (index: number) => {\n    const newSkills = createForm.skills.filter((_, i) => i !== index);\n    setCreateForm({ ...createForm, skills: newSkills });\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold text-foreground\">Admin RH</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Badge variant=\"secondary\">\n                {user?.role === \"admin\" ? \"Super Admin\" : \n                 user?.role === \"hr\" ? \"RH\" : \"Recruteur\"}\n              </Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <div className=\"flex space-x-6 mb-8 border-b border-border\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Tableau de bord\n            </Button>\n          </Link>\n          <Button variant=\"ghost\" className=\"border-b-2 border-primary text-primary\">\n            <Briefcase className=\"h-4 w-4 mr-2\" />\n            Offres d'emploi\n          </Button>\n          <Link href=\"/admin/applications\">\n            <Button variant=\"ghost\" className=\"text-muted-foreground\">\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Candidatures\n            </Button>\n          </Link>\n          {user?.role === \"admin\" && (\n            <Link href=\"/admin/users\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground\">\n                <Briefcase className=\"h-4 w-4 mr-2\" />\n                Utilisateurs\n              </Button>\n            </Link>\n          )}\n        </div>\n\n        {/* Header Actions */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold\">Gestion des Offres d'Emploi</h1>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-new-job\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nouvelle Offre\n              </Button>\n            </DialogTrigger>\n          </Dialog>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative mb-6\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Rechercher par titre ou entreprise...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        {/* Jobs List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Chargement...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredJobs.map((job: any) => (\n              <Card key={job.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h3 className=\"text-lg font-semibold\">{job.title}</h3>\n                        {job.isActive ? (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            <Eye className=\"h-3 w-3 mr-1\" />\n                            Publiée\n                          </Badge>\n                        ) : (\n                          <Badge className=\"bg-gray-100 text-gray-800\">\n                            <EyeOff className=\"h-3 w-3 mr-1\" />\n                            Masquée\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-3\">\n                        <span className=\"flex items-center\">\n                          <Building2 className=\"h-4 w-4 mr-1\" />\n                          {job.company}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          {job.location}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          {job.createdAt ? formatDistanceToNow(new Date(job.createdAt), { addSuffix: true, locale: fr }) : ''}\n                        </span>\n                      </div>\n\n                      <p className=\"text-muted-foreground mb-3 line-clamp-2\">\n                        {job.description}\n                      </p>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={getContractTypeColor(job.contractType)}>\n                          {job.contractType}\n                        </Badge>\n                        {job.experienceLevel && (\n                          <Badge variant=\"outline\">\n                            {job.experienceLevel}\n                          </Badge>\n                        )}\n                        <span className=\"text-sm text-muted-foreground ml-4\">\n                          {job.applicationsCount || 0} candidature(s)\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleEditJob(job)}\n                        data-testid={`button-edit-job-${job.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleToggleJob(job.id, job.isActive)}\n                        data-testid={`button-toggle-job-${job.id}`}\n                      >\n                        {job.isActive ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleDeleteJob(job.id)}\n                        className=\"text-red-600 hover:text-red-700\"\n                        data-testid={`button-delete-job-${job.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {filteredJobs.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Aucune offre d'emploi trouvée\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Modal d'édition */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Modifier l'offre d'emploi</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-title\">Titre du poste</Label>\n                <Input\n                  id=\"edit-title\"\n                  value={editForm.title}\n                  onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}\n                  placeholder=\"Ex: Développeur Full Stack\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-company\">Entreprise</Label>\n                <Input\n                  id=\"edit-company\"\n                  value={editForm.company}\n                  onChange={(e) => setEditForm({ ...editForm, company: e.target.value })}\n                  placeholder=\"Ex: TechCorp\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-location\">Localisation</Label>\n                <Input\n                  id=\"edit-location\"\n                  value={editForm.location}\n                  onChange={(e) => setEditForm({ ...editForm, location: e.target.value })}\n                  placeholder=\"Ex: Paris, France\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-salary\">Salaire</Label>\n                <Input\n                  id=\"edit-salary\"\n                  value={editForm.salary}\n                  onChange={(e) => setEditForm({ ...editForm, salary: e.target.value })}\n                  placeholder=\"Ex: 45k - 60k €\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={editForm.description}\n                onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}\n                placeholder=\"Description du poste...\"\n                rows={3}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-requirements\">Exigences</Label>\n              <Textarea\n                id=\"edit-requirements\"\n                value={editForm.requirements}\n                onChange={(e) => setEditForm({ ...editForm, requirements: e.target.value })}\n                placeholder=\"Exigences et qualifications...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Type de contrat</Label>\n                <Select \n                  value={editForm.contractType} \n                  onValueChange={(value) => setEditForm({ ...editForm, contractType: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CDI\">CDI</SelectItem>\n                    <SelectItem value=\"CDD\">CDD</SelectItem>\n                    <SelectItem value=\"Freelance\">Freelance</SelectItem>\n                    <SelectItem value=\"Stage\">Stage</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Niveau d'expérience</Label>\n                <Select \n                  value={editForm.experienceLevel} \n                  onValueChange={(value) => setEditForm({ ...editForm, experienceLevel: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Débutant\">Débutant</SelectItem>\n                    <SelectItem value=\"Intermédiaire\">Intermédiaire</SelectItem>\n                    <SelectItem value=\"Senior\">Senior</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label>Compétences</Label>\n              <div className=\"space-y-2\">\n                {editForm.skills.map((skill, index) => (\n                  <div key={index} className=\"flex gap-2\">\n                    <Input\n                      value={skill}\n                      onChange={(e) => handleSkillChange(index, e.target.value)}\n                      placeholder=\"Ex: React, Node.js...\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeSkill(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addSkill}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Ajouter une compétence\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Annuler\n              </Button>\n              <Button \n                onClick={handleUpdateJob}\n                disabled={updateJobMutation.isPending}\n                data-testid=\"button-save-job\"\n              >\n                {updateJobMutation.isPending ? 'Mise à jour...' : 'Sauvegarder'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de création d'offre */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Créer une nouvelle offre d'emploi</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"create-title\">Titre du poste *</Label>\n                <Input\n                  id=\"create-title\"\n                  value={createForm.title}\n                  onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })}\n                  placeholder=\"Ex: Développeur Full Stack\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"create-company\">Entreprise *</Label>\n                <Input\n                  id=\"create-company\"\n                  value={createForm.company}\n                  onChange={(e) => setCreateForm({ ...createForm, company: e.target.value })}\n                  placeholder=\"Ex: AeroTech Solutions\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"create-location\">Localisation *</Label>\n                <Input\n                  id=\"create-location\"\n                  value={createForm.location}\n                  onChange={(e) => setCreateForm({ ...createForm, location: e.target.value })}\n                  placeholder=\"Ex: Paris, France\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"create-salary\">Salaire</Label>\n                <Input\n                  id=\"create-salary\"\n                  value={createForm.salary}\n                  onChange={(e) => setCreateForm({ ...createForm, salary: e.target.value })}\n                  placeholder=\"Ex: 45000-60000€\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"create-contract\">Type de contrat *</Label>\n                <Select value={createForm.contractType} onValueChange={(value) => setCreateForm({ ...createForm, contractType: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner un type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CDI\">CDI</SelectItem>\n                    <SelectItem value=\"CDD\">CDD</SelectItem>\n                    <SelectItem value=\"Freelance\">Freelance</SelectItem>\n                    <SelectItem value=\"Stage\">Stage</SelectItem>\n                    <SelectItem value=\"Apprentissage\">Apprentissage</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"create-experience\">Niveau d'expérience</Label>\n                <Select value={createForm.experienceLevel} onValueChange={(value) => setCreateForm({ ...createForm, experienceLevel: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner un niveau\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Débutant\">Débutant</SelectItem>\n                    <SelectItem value=\"Intermédiaire\">Intermédiaire</SelectItem>\n                    <SelectItem value=\"Senior\">Senior</SelectItem>\n                    <SelectItem value=\"Expert\">Expert</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"create-description\">Description du poste *</Label>\n              <Textarea\n                id=\"create-description\"\n                value={createForm.description}\n                onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })}\n                placeholder=\"Décrivez le poste en détail...\"\n                rows={4}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"create-requirements\">Exigences et qualifications</Label>\n              <Textarea\n                id=\"create-requirements\"\n                value={createForm.requirements}\n                onChange={(e) => setCreateForm({ ...createForm, requirements: e.target.value })}\n                placeholder=\"Compétences requises, diplômes, expérience...\"\n                rows={3}\n              />\n            </div>\n\n            <div>\n              <Label>Compétences techniques</Label>\n              <div className=\"space-y-2\">\n                {createForm.skills.map((skill, index) => (\n                  <div key={index} className=\"flex space-x-2\">\n                    <Input\n                      value={skill}\n                      onChange={(e) => handleCreateSkillChange(index, e.target.value)}\n                      placeholder=\"Ex: React.js\"\n                    />\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => removeCreateSkill(index)}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={addCreateSkill}\n                >\n                  + Ajouter une compétence\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2 pt-4 pb-2\">\n              <Checkbox\n                id=\"create-active\"\n                checked={createForm.isActive}\n                onCheckedChange={(checked) => setCreateForm({ ...createForm, isActive: !!checked })}\n                data-testid=\"checkbox-active\"\n              />\n              <Label htmlFor=\"create-active\" className=\"text-sm font-medium cursor-pointer\">\n                Publier cette offre immédiatement\n              </Label>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsCreateDialogOpen(false)}\n              >\n                Annuler\n              </Button>\n              <Button \n                onClick={handleCreateJob}\n                disabled={createJobMutation.isPending || !createForm.title || !createForm.company || !createForm.location || !createForm.description || !createForm.contractType}\n                data-testid=\"button-create-job\"\n              >\n                {createJobMutation.isPending ? 'Création...' : 'Créer l\\'offre'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":29062},"client/src/pages/Landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\nimport { JobCard } from \"@/components/JobCard\";\nimport { \n  Plane, \n  Search, \n  MapPin, \n  Menu,\n  Linkedin,\n  Twitter,\n  Facebook,\n  Globe,\n  Users,\n  TrendingUp,\n  Shield\n} from \"lucide-react\";\nimport { t } from \"@/lib/i18n\";\nimport type { Job } from \"@shared/schema\";\n\nexport default function Landing() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [locationQuery, setLocationQuery] = useState(\"\");\n  const [contractFilters, setContractFilters] = useState<string[]>([]);\n  const [experienceFilters, setExperienceFilters] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: jobs = [], isLoading } = useQuery<Job[]>({\n    queryKey: [\"/api/jobs\", searchQuery, locationQuery, contractFilters.join(','), experienceFilters.join(',')],\n  });\n\n  const handleSearch = () => {\n    // Search is reactive through the query key\n  };\n\n  const handleApply = (job: Job) => {\n    // Redirection vers la page de connexion candidat\n    window.location.href = \"/login\";\n  };\n\n  const handleContractFilter = (contractType: string, checked: boolean) => {\n    if (checked) {\n      setContractFilters(prev => [...prev, contractType]);\n    } else {\n      setContractFilters(prev => prev.filter(c => c !== contractType));\n    }\n  };\n\n  const handleExperienceFilter = (experience: string, checked: boolean) => {\n    if (checked) {\n      setExperienceFilters(prev => [...prev, experience]);\n    } else {\n      setExperienceFilters(prev => prev.filter(e => e !== experience));\n    }\n  };\n\n  const contractTypeCounts = {\n    'CDI': jobs.filter((job: Job) => job.contractType === 'CDI').length,\n    'CDD': jobs.filter((job: Job) => job.contractType === 'CDD').length,\n    'Freelance': jobs.filter((job: Job) => job.contractType === 'Freelance').length,\n  };\n\n  const experienceCounts = {\n    'Débutant': jobs.filter((job: Job) => job.experienceLevel === 'Débutant').length,\n    'Intermédiaire': jobs.filter((job: Job) => job.experienceLevel === 'Intermédiaire').length,\n    'Senior': jobs.filter((job: Job) => job.experienceLevel === 'Senior').length,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Plane className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-xl font-bold text-foreground\">AeroRecrutement</span>\n              </div>\n              <nav className=\"hidden md:flex space-x-6\">\n                <a \n                  href=\"#jobs\" \n                  className=\"text-foreground hover:text-primary transition-colors font-medium\"\n                  data-testid=\"link-jobs\"\n                >\n                  {t('jobs')}\n                </a>\n                <a \n                  href=\"#about\" \n                  className=\"text-muted-foreground hover:text-primary transition-colors\"\n                  data-testid=\"link-about\"\n                >\n                  {t('about')}\n                </a>\n                <a \n                  href=\"#contact\" \n                  className=\"text-muted-foreground hover:text-primary transition-colors\"\n                  data-testid=\"link-contact\"\n                >\n                  {t('contact')}\n                </a>\n              </nav>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageSelector />\n              \n              <div className=\"hidden sm:flex items-center space-x-2\">\n              </div>\n              \n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-background via-accent/10 to-secondary/10 py-20 relative overflow-hidden\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute top-10 left-10 w-8 h-8 border-2 border-primary rotate-45\"></div>\n          <div className=\"absolute top-20 right-20 w-6 h-6 border-2 border-secondary rotate-12\"></div>\n          <div className=\"absolute bottom-20 left-20 w-10 h-10 border-2 border-accent rotate-45\"></div>\n          <div className=\"absolute bottom-10 right-10 w-4 h-4 border-2 border-primary rotate-12\"></div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <div className=\"flex items-center justify-center mb-6 space-x-4\">\n            <Globe className=\"h-8 w-8 text-secondary\" />\n            <Plane className=\"h-12 w-12 text-primary plane-path\" />\n            <Users className=\"h-8 w-8 text-accent\" />\n          </div>\n          \n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\" data-testid=\"text-hero-title\">\n            <span className=\"text-primary\">Carrières Aéroportuaires</span><br />\n            <span className=\"text-secondary\">en Guinée-Bissau</span>\n          </h1>\n          \n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\" data-testid=\"text-hero-subtitle\">\n            Découvrez les opportunités d'emploi dans le secteur aéroportuaire et de l'aviation. \n            Rejoignez les équipes qui connectent la Guinée-Bissau au monde.\n          </p>\n          \n          <div className=\"flex items-center justify-center space-x-8 mb-8 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-primary\" />\n              <span>Emplois Sécurisés</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-secondary\" />\n              <span>Croissance Garantie</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"h-5 w-5 text-accent\" />\n              <span>Connexion Internationale</span>\n            </div>\n          </div>\n          \n          {/* Job Search Form */}\n          <Card className=\"max-w-4xl mx-auto shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-5 w-5 text-muted-foreground\" />\n                  <Input\n                    type=\"text\"\n                    placeholder={t('search_placeholder')}\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-jobs\"\n                  />\n                </div>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-3 h-5 w-5 text-muted-foreground\" />\n                  <Input\n                    type=\"text\"\n                    placeholder={t('location_placeholder')}\n                    value={locationQuery}\n                    onChange={(e) => setLocationQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-location\"\n                  />\n                </div>\n                <Button \n                  onClick={handleSearch}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90 flex items-center justify-center space-x-2\"\n                  data-testid=\"button-search\"\n                >\n                  <Search className=\"h-5 w-5\" />\n                  <span>{t('search_button')}</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Job Listings Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            \n            {/* Filters Sidebar */}\n            <aside className=\"w-full lg:w-64 space-y-6\">\n              <Card className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-4 text-foreground\">{t('filters')}</h3>\n                  \n                  {/* Contract Type Filter */}\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-foreground mb-2\">{t('contract_type')}</h4>\n                    <div className=\"space-y-2\">\n                      {Object.entries(contractTypeCounts).map(([type, count]) => (\n                        <label key={type} className=\"flex items-center\">\n                          <Checkbox \n                            checked={contractFilters.includes(type)}\n                            onCheckedChange={(checked) => handleContractFilter(type, checked as boolean)}\n                            data-testid={`checkbox-contract-${type.toLowerCase()}`}\n                          />\n                          <span className=\"ml-2 text-sm\">\n                            {type} ({count})\n                          </span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Experience Level */}\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-foreground mb-2\">{t('experience')}</h4>\n                    <div className=\"space-y-2\">\n                      {Object.entries(experienceCounts).map(([level, count]) => (\n                        <label key={level} className=\"flex items-center\">\n                          <Checkbox \n                            checked={experienceFilters.includes(level)}\n                            onCheckedChange={(checked) => handleExperienceFilter(level, checked as boolean)}\n                            data-testid={`checkbox-experience-${level.toLowerCase()}`}\n                          />\n                          <span className=\"ml-2 text-sm\">\n                            {level} ({count})\n                          </span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </aside>\n            \n            {/* Job Listings */}\n            <main className=\"flex-1\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-jobs-count\">\n                  {jobs.length} {t('jobs_found')}\n                </h2>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"newest\">{t('sort_newest')}</SelectItem>\n                    <SelectItem value=\"salary_asc\">{t('sort_salary_asc')}</SelectItem>\n                    <SelectItem value=\"salary_desc\">{t('sort_salary_desc')}</SelectItem>\n                    <SelectItem value=\"relevance\">{t('sort_relevance')}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                        <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : jobs.length === 0 ? (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <p className=\"text-muted-foreground\" data-testid=\"text-no-jobs\">\n                      Aucune offre d'emploi trouvée. Essayez de modifier vos critères de recherche.\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {jobs.map((job: Job) => (\n                    <JobCard \n                      key={job.id} \n                      job={job} \n                      onApply={handleApply}\n                    />\n                  ))}\n                </div>\n              )}\n            </main>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Plane className=\"h-6 w-6 text-primary\" />\n                <span className=\"text-lg font-bold text-foreground\">AeroRecrutement</span>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                Plateforme de recrutement dédiée au secteur aéroportuaire et de l'aviation en Guinée-Bissau.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Candidats</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Rechercher un emploi</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Créer un CV</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Conseils carrière</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Entreprises</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Publier une offre</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Rechercher des talents</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Solutions RH</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Support</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Centre d'aide</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Confidentialité</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-border flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 JobPortal. Tous droits réservés.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                <Facebook className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n    </div>\n  );\n}\n","size_bytes":16744},"client/src/pages/Profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Briefcase, \n  Bell, \n  User, \n  ChevronDown, \n  LayoutDashboard,\n  FileText,\n  Search,\n  Folder,\n  Save,\n  Upload\n} from \"lucide-react\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\n\nexport default function Profile() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    bio: \"\",\n    experience: \"\",\n    skills: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous devez être connecté. Redirection vers la connexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (user) {\n      setFormData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        phone: \"\",\n        bio: \"\",\n        experience: \"\",\n        skills: \"\",\n      });\n    }\n  }, [isAuthenticated, isLoading, toast, user]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    toast({\n      title: \"Profil mis à jour\",\n      description: \"Vos informations ont été sauvegardées avec succès.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Briefcase className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-xl font-bold text-foreground\">JobPortal</span>\n                <span className=\"text-sm text-muted-foreground\">Espace candidat</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageSelector />\n              \n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-8 w-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                  {user.firstName?.[0] || user.email?.[0] || 'U'}\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                  {user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={() => window.location.href = \"/api/logout\"}\n                  data-testid=\"button-logout\"\n                >\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"flex\">\n        {/* Sidebar Navigation */}\n        <nav className=\"w-64 bg-card shadow-sm border-r border-border min-h-screen\">\n          <div className=\"p-6\">\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-dashboard\">\n                    <LayoutDashboard className=\"h-5 w-5\" />\n                    <span>Tableau de bord</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/applications\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-applications\">\n                    <FileText className=\"h-5 w-5\" />\n                    <span>Mes candidatures</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#profile\" className=\"flex items-center space-x-3 p-3 text-primary bg-primary/10 rounded-md\">\n                  <User className=\"h-5 w-5\" />\n                  <span className=\"font-medium\">Mon profil</span>\n                </a>\n              </li>\n              <li>\n                <Link href=\"/jobs\">\n                  <a className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-search\">\n                    <Search className=\"h-5 w-5\" />\n                    <span>Rechercher</span>\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <a href=\"#documents\" className=\"flex items-center space-x-3 p-3 text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors\" data-testid=\"link-documents\">\n                  <Folder className=\"h-5 w-5\" />\n                  <span>Mes documents</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        \n        {/* Main Content */}\n        <main className=\"flex-1 p-8 bg-background\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-profile-title\">\n              Mon profil\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Gérez vos informations personnelles et professionnelles\n            </p>\n          </div>\n          \n          <div className=\"max-w-2xl\">\n            <form onSubmit={handleSave} className=\"space-y-6\">\n              {/* Personal Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Informations personnelles</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">Prénom</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                        data-testid=\"input-profile-first-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Nom</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                        data-testid=\"input-profile-last-name\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      data-testid=\"input-profile-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Téléphone</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                      placeholder=\"+33 1 23 45 67 89\"\n                      data-testid=\"input-profile-phone\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Professional Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Informations professionnelles</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"bio\">Présentation</Label>\n                    <Textarea\n                      id=\"bio\"\n                      value={formData.bio}\n                      onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}\n                      placeholder=\"Décrivez brièvement votre parcours et vos objectifs professionnels...\"\n                      rows={4}\n                      data-testid=\"textarea-profile-bio\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"experience\">Expérience professionnelle</Label>\n                    <Textarea\n                      id=\"experience\"\n                      value={formData.experience}\n                      onChange={(e) => setFormData(prev => ({ ...prev, experience: e.target.value }))}\n                      placeholder=\"Décrivez vos expériences professionnelles...\"\n                      rows={6}\n                      data-testid=\"textarea-profile-experience\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"skills\">Compétences</Label>\n                    <Textarea\n                      id=\"skills\"\n                      value={formData.skills}\n                      onChange={(e) => setFormData(prev => ({ ...prev, skills: e.target.value }))}\n                      placeholder=\"Listez vos compétences principales (séparées par des virgules)...\"\n                      rows={3}\n                      data-testid=\"textarea-profile-skills\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Save Button */}\n              <div className=\"flex justify-end\">\n                <Button \n                  type=\"submit\"\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-save-profile\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  <span>Sauvegarder</span>\n                </Button>\n              </div>\n            </form>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11546},"client/src/pages/ProfileCompletion.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, User, MapPin, FileText, Globe, LogOut } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiPut } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { cn } from \"@/lib/utils\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(2, \"Le prénom doit contenir au moins 2 caractères\"),\n  lastName: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\n  gender: z.string().min(1, \"Veuillez sélectionner votre sexe\"),\n  maritalStatus: z.string().min(1, \"Veuillez sélectionner votre situation matrimoniale\"),\n  phone: z.string().min(8, \"Le numéro de téléphone doit contenir au moins 8 chiffres\"),\n  address: z.string().min(10, \"L'adresse doit être complète\"),\n  residencePlace: z.string().min(2, \"Veuillez indiquer votre lieu de résidence\"),\n  idDocumentType: z.string().min(1, \"Veuillez sélectionner le type de pièce d'identité\"),\n  idDocumentNumber: z.string().min(5, \"Le numéro d'identification doit contenir au moins 5 caractères\"),\n  birthDate: z.date({\n    required_error: \"La date de naissance est requise\",\n  }),\n  birthPlace: z.string().min(2, \"Veuillez indiquer votre lieu de naissance\"),\n  birthCountry: z.string().min(2, \"Veuillez sélectionner votre pays de naissance\"),\n  nationality: z.string().min(2, \"Veuillez sélectionner votre nationalité\"),\n});\n\ntype ProfileForm = z.infer<typeof profileSchema>;\n\nconst COUNTRIES = [\n  \"Sénégal\", \"France\", \"Côte d'Ivoire\", \"Mali\", \"Burkina Faso\", \"Niger\", \n  \"Guinée\", \"Mauritanie\", \"Gambie\", \"Guinée-Bissau\", \"Cap-Vert\",\n  \"Maroc\", \"Algérie\", \"Tunisie\", \"Cameroun\", \"Gabon\", \"Congo\",\n  \"République Démocratique du Congo\", \"Bénin\", \"Togo\", \"Ghana\",\n  \"Nigeria\", \"Libéria\", \"Sierra Leone\", \"Autres...\"\n];\n\nexport default function ProfileCompletion() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [step, setStep] = useState(1);\n\n  const form = useForm<ProfileForm>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: (user as any)?.firstName || \"\",\n      lastName: (user as any)?.lastName || \"\",\n      gender: \"\",\n      maritalStatus: \"\",\n      phone: (user as any)?.phone || \"\",\n      address: \"\",\n      residencePlace: \"\",\n      idDocumentType: \"\",\n      idDocumentNumber: \"\",\n      birthDate: undefined,\n      birthPlace: \"\",\n      birthCountry: \"\",\n      nationality: \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileForm) => {\n      await apiPut(\"/api/profile/complete\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profil complété\",\n        description: \"Vos informations ont été enregistrées avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      window.location.href = \"/\"; // Redirect to dashboard\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Une erreur est survenue lors de l'enregistrement.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmit = (data: ProfileForm) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    setStep(prev => Math.min(prev + 1, 4));\n  };\n\n  const prevStep = () => {\n    setStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const renderStep1 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center mb-4\">\n        <User className=\"h-5 w-5 mr-2 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">Informations Personnelles</h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <FormField\n          control={form.control}\n          name=\"firstName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Prénom *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Votre prénom\" {...field} data-testid=\"input-firstname\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"lastName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nom *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Votre nom\" {...field} data-testid=\"input-lastname\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"gender\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Sexe *</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-gender\">\n                    <SelectValue placeholder=\"Sélectionnez votre sexe\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"Homme\">Homme</SelectItem>\n                  <SelectItem value=\"Femme\">Femme</SelectItem>\n                  <SelectItem value=\"Autre\">Autre</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"maritalStatus\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Situation matrimoniale *</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-marital-status\">\n                    <SelectValue placeholder=\"Sélectionnez votre situation\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"Célibataire\">Célibataire</SelectItem>\n                  <SelectItem value=\"Marié(e)\">Marié(e)</SelectItem>\n                  <SelectItem value=\"Divorcé(e)\">Divorcé(e)</SelectItem>\n                  <SelectItem value=\"Veuf(ve)\">Veuf(ve)</SelectItem>\n                  <SelectItem value=\"Union libre\">Union libre</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Téléphone *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: +221 77 123 45 67\" {...field} data-testid=\"input-phone\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n    </div>\n  );\n\n  const renderStep2 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center mb-4\">\n        <MapPin className=\"h-5 w-5 mr-2 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">Adresse et Résidence</h3>\n      </div>\n      \n      <FormField\n        control={form.control}\n        name=\"address\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Adresse *</FormLabel>\n            <FormControl>\n              <Textarea \n                placeholder=\"Adresse complète (rue, quartier, ville...)\" \n                {...field} \n                data-testid=\"textarea-address\"\n                rows={3}\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"residencePlace\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Lieu de résidence *</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Ex: Dakar, Thiès, Saint-Louis...\" {...field} data-testid=\"input-residence\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n\n  const renderStep3 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center mb-4\">\n        <FileText className=\"h-5 w-5 mr-2 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">Pièce d'Identité</h3>\n      </div>\n      \n      <FormField\n        control={form.control}\n        name=\"idDocumentType\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Type de pièce d'identification nationale *</FormLabel>\n            <Select onValueChange={field.onChange} value={field.value}>\n              <FormControl>\n                <SelectTrigger data-testid=\"select-id-type\">\n                  <SelectValue placeholder=\"Sélectionnez le type de pièce\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                <SelectItem value=\"CNI\">Carte Nationale d'Identité (CNI)</SelectItem>\n                <SelectItem value=\"Passeport\">Passeport</SelectItem>\n                <SelectItem value=\"Permis de séjour\">Permis de séjour</SelectItem>\n                <SelectItem value=\"Carte consulaire\">Carte consulaire</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"idDocumentNumber\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>N° d'identification nationale *</FormLabel>\n            <FormControl>\n              <Input \n                placeholder=\"Numéro de votre pièce d'identité\" \n                {...field} \n                data-testid=\"input-id-number\"\n              />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n\n  const renderStep4 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center mb-4\">\n        <Globe className=\"h-5 w-5 mr-2 text-primary\" />\n        <h3 className=\"text-lg font-semibold\">Informations de Naissance</h3>\n      </div>\n      \n      <FormField\n        control={form.control}\n        name=\"birthDate\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Date de naissance *</FormLabel>\n            <Popover>\n              <PopoverTrigger asChild>\n                <FormControl>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full pl-3 text-left font-normal\",\n                      !field.value && \"text-muted-foreground\"\n                    )}\n                    data-testid=\"button-birth-date\"\n                  >\n                    {field.value ? (\n                      format(field.value, \"dd MMMM yyyy\", { locale: fr })\n                    ) : (\n                      <span>Sélectionnez votre date de naissance</span>\n                    )}\n                    <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                  </Button>\n                </FormControl>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={field.value}\n                  onSelect={field.onChange}\n                  locale={fr}\n                  disabled={(date) =>\n                    date > new Date() || date < new Date(\"1900-01-01\")\n                  }\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"birthPlace\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Lieu de naissance *</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Ville ou lieu de naissance\" {...field} data-testid=\"input-birth-place\" />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"birthCountry\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Pays de naissance *</FormLabel>\n            <Select onValueChange={field.onChange} value={field.value}>\n              <FormControl>\n                <SelectTrigger data-testid=\"select-birth-country\">\n                  <SelectValue placeholder=\"Sélectionnez votre pays de naissance\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                {COUNTRIES.map((country) => (\n                  <SelectItem key={country} value={country}>\n                    {country}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"nationality\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Nationalité *</FormLabel>\n            <Select onValueChange={field.onChange} value={field.value}>\n              <FormControl>\n                <SelectTrigger data-testid=\"select-nationality\">\n                  <SelectValue placeholder=\"Sélectionnez votre nationalité\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                <SelectItem value=\"Sénégalaise\">Sénégalaise</SelectItem>\n                <SelectItem value=\"Française\">Française</SelectItem>\n                <SelectItem value=\"Ivoirienne\">Ivoirienne</SelectItem>\n                <SelectItem value=\"Malienne\">Malienne</SelectItem>\n                <SelectItem value=\"Burkinabè\">Burkinabè</SelectItem>\n                <SelectItem value=\"Nigérienne\">Nigérienne</SelectItem>\n                <SelectItem value=\"Guinéenne\">Guinéenne</SelectItem>\n                <SelectItem value=\"Mauritanienne\">Mauritanienne</SelectItem>\n                <SelectItem value=\"Gambienne\">Gambienne</SelectItem>\n                <SelectItem value=\"Bissau-Guinéenne\">Bissau-Guinéenne</SelectItem>\n                <SelectItem value=\"Cap-verdienne\">Cap-verdienne</SelectItem>\n                <SelectItem value=\"Double nationalité\">Double nationalité</SelectItem>\n                <SelectItem value=\"Autre\">Autre</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <h1 className=\"text-xl font-bold text-foreground\">Compléter votre profil</h1>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\">\n                {(user as any)?.firstName} {(user as any)?.lastName}\n              </span>\n              <Badge variant=\"secondary\">Candidat</Badge>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Déconnexion\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Progress */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <span className=\"text-sm font-medium text-primary\">Étape {step} sur 4</span>\n            <span className=\"text-sm text-muted-foreground\">{Math.round((step / 4) * 100)}% complété</span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-in-out\" \n              style={{ width: `${(step / 4) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {step === 1 && \"Informations Personnelles\"}\n                  {step === 2 && \"Adresse et Résidence\"}\n                  {step === 3 && \"Pièce d'Identité\"}\n                  {step === 4 && \"Informations de Naissance\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {step === 1 && renderStep1()}\n                {step === 2 && renderStep2()}\n                {step === 3 && renderStep3()}\n                {step === 4 && renderStep4()}\n              </CardContent>\n            </Card>\n\n            {/* Navigation */}\n            <div className=\"flex justify-between\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={prevStep}\n                disabled={step === 1}\n                data-testid=\"button-previous\"\n              >\n                Précédent\n              </Button>\n              \n              {step < 4 ? (\n                <Button \n                  type=\"button\" \n                  onClick={nextStep}\n                  data-testid=\"button-next\"\n                >\n                  Suivant\n                </Button>\n              ) : (\n                <Button \n                  type=\"submit\" \n                  disabled={updateProfileMutation.isPending}\n                  data-testid=\"button-complete-profile\"\n                >\n                  {updateProfileMutation.isPending ? \"Enregistrement...\" : \"Terminer mon profil\"}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}","size_bytes":18850},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/AchievementsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { \n  Trophy, \n  Star, \n  Zap, \n  Plane, \n  MessageSquare, \n  Shield,\n  Award,\n  ArrowLeft,\n  Calendar,\n  Target\n} from \"lucide-react\";\n\ninterface Achievement {\n  id: number;\n  name: string;\n  description: string;\n  icon: string;\n  category: string;\n  points: number;\n  isActive: boolean;\n}\n\ninterface UserAchievement {\n  id: number;\n  userId: string;\n  achievementId: number;\n  candidateOnboardingId?: number;\n  earnedAt: string;\n  achievement: Achievement;\n}\n\nexport default function AchievementsPage() {\n  const { user } = useAuth();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  // Fetch all available achievements\n  const { data: allAchievements = [], isLoading: achievementsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/achievements\"],\n    enabled: !!user?.id,\n  });\n\n  // Fetch user's earned achievements\n  const { data: userAchievements = [], isLoading: userAchievementsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/user-achievements\"],\n    enabled: !!user?.id,\n  });\n\n  const getIcon = (iconName: string) => {\n    const iconMap: { [key: string]: any } = {\n      Star,\n      Zap,\n      Plane,\n      MessageSquare,\n      Shield,\n      Award,\n      Trophy,\n      Target\n    };\n    return iconMap[iconName] || Star;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'milestone': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'speed': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'quality': return 'bg-green-100 text-green-800 border-green-200';\n      case 'engagement': return 'bg-purple-100 text-purple-800 border-purple-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getCategoryName = (category: string) => {\n    switch (category) {\n      case 'milestone': return 'Étapes Clés';\n      case 'speed': return 'Rapidité';\n      case 'quality': return 'Qualité';\n      case 'engagement': return 'Engagement';\n      default: return 'Autre';\n    }\n  };\n\n  const earnedAchievementIds = userAchievements.map((ua: UserAchievement) => ua.achievementId);\n  const totalPoints = userAchievements.reduce((sum: number, ua: UserAchievement) => sum + (ua.achievement?.points || 0), 0);\n  const totalPossiblePoints = allAchievements.reduce((sum: number, a: Achievement) => sum + a.points, 0);\n  const completionPercentage = totalPossiblePoints > 0 ? (totalPoints / totalPossiblePoints) * 100 : 0;\n\n  const categories = [\"all\", ...new Set(allAchievements.map((a: Achievement) => a.category))];\n  const filteredAchievements = selectedCategory === \"all\" \n    ? allAchievements \n    : allAchievements.filter((a: Achievement) => a.category === selectedCategory);\n\n  if (achievementsLoading || userAchievementsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center space-x-3\">\n              <Trophy className=\"h-8 w-8 text-yellow-500\" />\n              <span>Mes Badges & Achievements</span>\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Débloquez des badges en progressant dans votre onboarding\n            </p>\n          </div>\n          <Link to=\"/candidate-onboarding\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour\n            </Button>\n          </Link>\n        </div>\n\n        {/* Progress Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Progression Globale\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary\">{userAchievements.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Badges Obtenus</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-yellow-600\">{totalPoints}</div>\n                <div className=\"text-sm text-muted-foreground\">Points Totaux</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold\">{allAchievements.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Badges Disponibles</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-600\">{Math.round(completionPercentage)}%</div>\n                <div className=\"text-sm text-muted-foreground\">Complété</div>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n                <span>Progression</span>\n                <span>{userAchievements.length} / {allAchievements.length}</span>\n              </div>\n              <Progress value={(userAchievements.length / allAchievements.length) * 100} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Category Filter */}\n        <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n          {categories.map((category) => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(category)}\n              className=\"whitespace-nowrap\"\n              data-testid={`filter-${category}`}\n            >\n              {category === \"all\" ? \"Tous\" : getCategoryName(category)}\n            </Button>\n          ))}\n        </div>\n\n        {/* Recent Achievements */}\n        {userAchievements.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Derniers Badges Obtenus\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {userAchievements\n                  .sort((a: UserAchievement, b: UserAchievement) => new Date(b.earnedAt).getTime() - new Date(a.earnedAt).getTime())\n                  .slice(0, 3)\n                  .map((userAchievement: UserAchievement) => {\n                    const IconComponent = getIcon(userAchievement.achievement.icon);\n                    return (\n                      <div\n                        key={userAchievement.id}\n                        className=\"flex items-center space-x-3 p-3 rounded-lg bg-muted/50\"\n                        data-testid={`recent-achievement-${userAchievement.achievement.id}`}\n                      >\n                        <div className=\"p-2 rounded-full bg-primary/10\">\n                          <IconComponent className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{userAchievement.achievement.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {new Date(userAchievement.earnedAt).toLocaleDateString('fr-FR')}\n                          </div>\n                        </div>\n                        <Badge variant=\"secondary\">+{userAchievement.achievement.points}</Badge>\n                      </div>\n                    );\n                  })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* All Achievements Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredAchievements.map((achievement: Achievement) => {\n            const IconComponent = getIcon(achievement.icon);\n            const isEarned = earnedAchievementIds.includes(achievement.id);\n            const userAchievement = userAchievements.find((ua: UserAchievement) => ua.achievementId === achievement.id);\n            \n            return (\n              <Card \n                key={achievement.id} \n                className={`transition-all duration-200 ${\n                  isEarned \n                    ? \"ring-2 ring-primary/20 bg-primary/5\" \n                    : \"opacity-75 hover:opacity-100\"\n                }`}\n                data-testid={`achievement-${achievement.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className={`p-3 rounded-full ${\n                      isEarned ? \"bg-primary text-primary-foreground\" : \"bg-muted\"\n                    }`}>\n                      <IconComponent className=\"h-6 w-6\" />\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge \n                        variant=\"outline\" \n                        className={getCategoryColor(achievement.category)}\n                      >\n                        {getCategoryName(achievement.category)}\n                      </Badge>\n                      {isEarned && (\n                        <div className=\"mt-1\">\n                          <Badge variant=\"default\" className=\"bg-green-600\">\n                            ✓ Obtenu\n                          </Badge>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <h3 className=\"font-semibold text-lg mb-2\">{achievement.name}</h3>\n                  <p className=\"text-muted-foreground text-sm mb-3\">\n                    {achievement.description}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"h-4 w-4 text-yellow-500\" />\n                      <span className=\"text-sm font-medium\">{achievement.points} points</span>\n                    </div>\n                    {isEarned && userAchievement && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(userAchievement.earnedAt).toLocaleDateString('fr-FR')}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {filteredAchievements.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Trophy className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Aucun badge dans cette catégorie</h3>\n            <p className=\"text-muted-foreground\">\n              Essayez une autre catégorie ou revenez plus tard !\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11719},"client/src/pages/CandidateOnboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { \n  CheckCircle, \n  Clock, \n  AlertCircle,\n  Plane,\n  FileText,\n  Calendar,\n  User,\n  Target,\n  MessageCircle,\n  Trophy,\n  Star,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface OnboardingStep {\n  id: number;\n  stepNumber: number;\n  title: string;\n  description: string;\n  category: string;\n  isRequired: boolean;\n  estimatedDuration: number;\n  assignedRole: string;\n}\n\ninterface StepCompletion {\n  id: number;\n  candidateOnboardingId: number;\n  stepId: number;\n  status: string;\n  completionDate?: string;\n  notes?: string;\n  completedBy?: string;\n  step?: OnboardingStep;\n}\n\ninterface CandidateOnboarding {\n  id: number;\n  userId: string;\n  processId: number;\n  status: string;\n  progress: number;\n  startDate: string;\n  expectedCompletionDate: string;\n  assignedMentor: string;\n  notes: string;\n  actualCompletionDate?: string;\n}\n\nexport default function CandidateOnboarding() {\n  const { user } = useAuth();\n  const [selectedCompletion, setSelectedCompletion] = useState<StepCompletion | null>(null);\n  const [completionDialogOpen, setCompletionDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch candidate's onboarding records\n  const { data: onboardings = [], isLoading: onboardingsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/candidates/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const currentOnboarding = onboardings.find((o: CandidateOnboarding) => o.status !== 'completed');\n\n  // Fetch onboarding steps for current onboarding\n  const { data: stepCompletions = [], isLoading: stepsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/candidates\", currentOnboarding?.id, \"steps\"],\n    enabled: !!currentOnboarding?.id,\n  });\n\n  // Update step completion mutation\n  const updateStepMutation = useMutation({\n    mutationFn: async ({ completionId, data }: { completionId: number; data: any }) =>\n      apiRequest(\"PUT\", `/api/onboarding/steps/${completionId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/candidates\"] });\n      setCompletionDialogOpen(false);\n      setSelectedCompletion(null);\n      toast({\n        title: \"Étape mise à jour\",\n        description: \"Le statut de l'étape a été mis à jour avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour de l'étape.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkComplete = (completion: StepCompletion) => {\n    setSelectedCompletion(completion);\n    setCompletionDialogOpen(true);\n  };\n\n  const handleSubmitCompletion = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!selectedCompletion) return;\n\n    const formData = new FormData(event.currentTarget);\n    const notes = formData.get(\"notes\") as string;\n\n    updateStepMutation.mutate({\n      completionId: selectedCompletion.id,\n      data: {\n        status: \"completed\",\n        notes: notes,\n        candidateOnboardingId: selectedCompletion.candidateOnboardingId\n      }\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'text-green-600 bg-green-100';\n      case 'in_progress': return 'text-blue-600 bg-blue-100';\n      case 'pending': return 'text-yellow-600 bg-yellow-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'in_progress': return <Clock className=\"h-4 w-4 text-blue-600\" />;\n      case 'pending': return <AlertCircle className=\"h-4 w-4 text-yellow-600\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category?.toLowerCase()) {\n      case 'documentation': return <FileText className=\"h-4 w-4\" />;\n      case 'formation': return <Target className=\"h-4 w-4\" />;\n      case 'administrative': return <User className=\"h-4 w-4\" />;\n      case 'technique': return <Plane className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (onboardingsLoading || stepsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!currentOnboarding) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <Plane className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Aucun Onboarding en Cours</h1>\n            <p className=\"text-muted-foreground\">\n              Vous n'avez actuellement aucun processus d'onboarding en cours. \n              Contactez votre responsable RH pour plus d'informations.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const completedSteps = stepCompletions.filter((sc: StepCompletion) => sc.status === 'completed').length;\n  const totalSteps = stepCompletions.length;\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <Plane className=\"h-8 w-8 text-primary\" />\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Mon Onboarding</h1>\n              <p className=\"text-muted-foreground\">Suivez votre progression d'intégration</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Link to=\"/achievements\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-full bg-yellow-100\">\n                    <Trophy className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">Mes Badges</h3>\n                    <p className=\"text-sm text-muted-foreground\">Découvrez vos achievements</p>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link to=\"/onboarding-calendar\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-full bg-blue-100\">\n                    <Calendar className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">Calendrier</h3>\n                    <p className=\"text-sm text-muted-foreground\">Planifiez vos événements</p>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link to=\"/onboarding-feedback\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-full bg-green-100\">\n                    <Star className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">Feedback</h3>\n                    <p className=\"text-sm text-muted-foreground\">Évaluez votre expérience</p>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Progress Overview */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Vue d'ensemble de votre progression\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{currentOnboarding.progress}%</div>\n                <div className=\"text-sm text-muted-foreground\">Progression</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">{completedSteps}/{totalSteps}</div>\n                <div className=\"text-sm text-muted-foreground\">Étapes terminées</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">{totalSteps - completedSteps}</div>\n                <div className=\"text-sm text-muted-foreground\">Étapes restantes</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-2\">\n                  {getStatusIcon(currentOnboarding.status)}\n                  <Badge className={getStatusColor(currentOnboarding.status)}>\n                    {currentOnboarding.status === 'pending' ? 'En attente' :\n                     currentOnboarding.status === 'in_progress' ? 'En cours' : 'Terminé'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n\n            <Progress value={currentOnboarding.progress} className=\"h-3\" />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span>Début : {new Date(currentOnboarding.startDate).toLocaleDateString('fr-FR')}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span>Fin prévue : {new Date(currentOnboarding.expectedCompletionDate).toLocaleDateString('fr-FR')}</span>\n              </div>\n            </div>\n\n            {currentOnboarding.notes && (\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <MessageCircle className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Notes</span>\n                </div>\n                <p className=\"text-sm\">{currentOnboarding.notes}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Onboarding Steps */}\n        <div className=\"grid gap-4\">\n          <h2 className=\"text-2xl font-bold\">Étapes d'onboarding</h2>\n          \n          {stepCompletions.map((completion: StepCompletion) => (\n            <Card key={completion.id} className={`transition-all ${\n              completion.status === 'completed' ? 'border-green-200 bg-green-50/50' :\n              completion.status === 'in_progress' ? 'border-blue-200 bg-blue-50/50' :\n              'border-gray-200'\n            }`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getCategoryIcon(completion.step?.category || '')}\n                      <span className=\"text-sm font-medium text-muted-foreground\">\n                        Étape {completion.step?.stepNumber}\n                      </span>\n                    </div>\n                    <CardTitle className=\"text-lg\">{completion.step?.title}</CardTitle>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(completion.status)}\n                    <Badge className={getStatusColor(completion.status)}>\n                      {completion.status === 'pending' ? 'En attente' :\n                       completion.status === 'in_progress' ? 'En cours' : 'Terminé'}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {completion.step?.description && (\n                  <p className=\"text-muted-foreground\">{completion.step.description}</p>\n                )}\n                \n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{completion.step?.estimatedDuration}h estimées</span>\n                    </div>\n                    <Badge variant=\"outline\">{completion.step?.category}</Badge>\n                    {completion.step?.isRequired && (\n                      <Badge variant=\"destructive\">Obligatoire</Badge>\n                    )}\n                  </div>\n                  \n                  {completion.status !== 'completed' && (\n                    <Button \n                      onClick={() => handleMarkComplete(completion)}\n                      size=\"sm\"\n                      className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Marquer comme terminé\n                    </Button>\n                  )}\n                </div>\n\n                {completion.status === 'completed' && (\n                  <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"font-medium text-green-800\">Étape terminée</span>\n                      {completion.completionDate && (\n                        <span className=\"text-sm text-green-600\">\n                          le {new Date(completion.completionDate).toLocaleDateString('fr-FR')}\n                        </span>\n                      )}\n                    </div>\n                    {completion.notes && (\n                      <p className=\"text-sm text-green-700 mt-2\">{completion.notes}</p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Completion Dialog */}\n        <Dialog open={completionDialogOpen} onOpenChange={setCompletionDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Marquer l'étape comme terminée</DialogTitle>\n            </DialogHeader>\n            \n            {selectedCompletion && (\n              <form onSubmit={handleSubmitCompletion} className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h3 className=\"font-medium mb-2\">{selectedCompletion.step?.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCompletion.step?.description}</p>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"notes\">Notes (optionnel)</Label>\n                  <Textarea \n                    id=\"notes\" \n                    name=\"notes\" \n                    placeholder=\"Ajoutez des notes sur la réalisation de cette étape...\"\n                    className=\"mt-2\"\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setCompletionDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button type=\"submit\" disabled={updateStepMutation.isPending}>\n                    {updateStepMutation.isPending ? \"Marquage...\" : \"Marquer comme terminé\"}\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":17424},"client/src/pages/OnboardingCalendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  Plus,\n  ArrowLeft,\n  Plane,\n  Video,\n  UserCheck,\n  FileText,\n  Target,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface OnboardingEvent {\n  id: number;\n  candidateOnboardingId: number;\n  stepId?: number;\n  title: string;\n  description?: string;\n  eventType: string;\n  startDateTime: string;\n  endDateTime?: string;\n  location?: string;\n  attendees?: string[];\n  isRecurring: boolean;\n  status: string;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface CandidateOnboarding {\n  id: number;\n  userId: string;\n  processId: number;\n  status: string;\n  progress: number;\n  startDate: string;\n  expectedCompletionDate: string;\n  assignedMentor: string;\n  notes: string;\n}\n\nexport default function OnboardingCalendar() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [viewMode, setViewMode] = useState<'week' | 'month'>('week');\n  const [createEventOpen, setCreateEventOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<OnboardingEvent | null>(null);\n  const [eventFormData, setEventFormData] = useState({\n    title: \"\",\n    description: \"\",\n    eventType: \"meeting\",\n    startDateTime: \"\",\n    endDateTime: \"\",\n    location: \"\",\n    candidateOnboardingId: 0\n  });\n\n  // Fetch candidate's onboarding records\n  const { data: onboardings = [], isLoading: onboardingsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/candidates/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const currentOnboarding = onboardings.find((o: CandidateOnboarding) => o.status !== 'completed');\n\n  // Fetch events for current onboarding\n  const { data: events = [], isLoading: eventsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/events\"],\n    enabled: !!currentOnboarding?.id,\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) =>\n      apiRequest(\"POST\", \"/api/onboarding/events\", eventData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/events\"] });\n      setCreateEventOpen(false);\n      setEventFormData({\n        title: \"\",\n        description: \"\",\n        eventType: \"meeting\",\n        startDateTime: \"\",\n        endDateTime: \"\",\n        location: \"\",\n        candidateOnboardingId: 0\n      });\n      toast({\n        title: \"Événement créé\",\n        description: \"L'événement a été ajouté à votre calendrier.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création de l'événement.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getEventTypeIcon = (eventType: string) => {\n    switch (eventType) {\n      case 'training': return <Target className=\"h-4 w-4\" />;\n      case 'meeting': return <Users className=\"h-4 w-4\" />;\n      case 'deadline': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'review': return <FileText className=\"h-4 w-4\" />;\n      default: return <Calendar className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEventTypeColor = (eventType: string) => {\n    switch (eventType) {\n      case 'training': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'meeting': return 'bg-green-100 text-green-800 border-green-200';\n      case 'deadline': return 'bg-red-100 text-red-800 border-red-200';\n      case 'review': return 'bg-purple-100 text-purple-800 border-purple-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getEventTypeName = (eventType: string) => {\n    switch (eventType) {\n      case 'training': return 'Formation';\n      case 'meeting': return 'Réunion';\n      case 'deadline': return 'Échéance';\n      case 'review': return 'Évaluation';\n      default: return 'Événement';\n    }\n  };\n\n  const handleCreateEvent = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!currentOnboarding) return;\n\n    createEventMutation.mutate({\n      ...eventFormData,\n      candidateOnboardingId: currentOnboarding.id\n    });\n  };\n\n  const getEventsForDate = (date: string) => {\n    return events.filter((event: OnboardingEvent) => {\n      const eventDate = new Date(event.startDateTime).toISOString().split('T')[0];\n      return eventDate === date;\n    });\n  };\n\n  const getWeekDates = (startDate: string) => {\n    const date = new Date(startDate);\n    const week = [];\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(date.getDate() - date.getDay() + 1); // Start from Monday\n\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(startOfWeek);\n      day.setDate(startOfWeek.getDate() + i);\n      week.push(day.toISOString().split('T')[0]);\n    }\n    return week;\n  };\n\n  if (onboardingsLoading || eventsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!currentOnboarding) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Aucun Onboarding en Cours</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              Vous n'avez actuellement aucun processus d'onboarding en cours pour planifier des événements.\n            </p>\n            <Link to=\"/candidate-onboarding\">\n              <Button>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour à l'Onboarding\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const weekDates = getWeekDates(selectedDate);\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center space-x-3\">\n              <Calendar className=\"h-8 w-8 text-primary\" />\n              <span>Calendrier d'Onboarding</span>\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Planifiez et suivez vos événements d'intégration\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Link to=\"/candidate-onboarding\">\n              <Button variant=\"outline\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour\n              </Button>\n            </Link>\n            {(user?.role === 'admin' || user?.role === 'hr') && (\n              <Dialog open={createEventOpen} onOpenChange={setCreateEventOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-create-event\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Créer un Événement\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Créer un Événement</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateEvent} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"title\">Titre</Label>\n                      <Input\n                        id=\"title\"\n                        data-testid=\"input-event-title\"\n                        value={eventFormData.title}\n                        onChange={(e) => setEventFormData(prev => ({ ...prev, title: e.target.value }))}\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"eventType\">Type d'événement</Label>\n                      <Select\n                        value={eventFormData.eventType}\n                        onValueChange={(value) => setEventFormData(prev => ({ ...prev, eventType: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-event-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"training\">Formation</SelectItem>\n                          <SelectItem value=\"meeting\">Réunion</SelectItem>\n                          <SelectItem value=\"deadline\">Échéance</SelectItem>\n                          <SelectItem value=\"review\">Évaluation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"startDateTime\">Début</Label>\n                        <Input\n                          id=\"startDateTime\"\n                          type=\"datetime-local\"\n                          data-testid=\"input-start-datetime\"\n                          value={eventFormData.startDateTime}\n                          onChange={(e) => setEventFormData(prev => ({ ...prev, startDateTime: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"endDateTime\">Fin</Label>\n                        <Input\n                          id=\"endDateTime\"\n                          type=\"datetime-local\"\n                          data-testid=\"input-end-datetime\"\n                          value={eventFormData.endDateTime}\n                          onChange={(e) => setEventFormData(prev => ({ ...prev, endDateTime: e.target.value }))}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"location\">Lieu</Label>\n                      <Input\n                        id=\"location\"\n                        data-testid=\"input-location\"\n                        value={eventFormData.location}\n                        onChange={(e) => setEventFormData(prev => ({ ...prev, location: e.target.value }))}\n                        placeholder=\"Salle de réunion, Zoom, etc.\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        data-testid=\"input-description\"\n                        value={eventFormData.description}\n                        onChange={(e) => setEventFormData(prev => ({ ...prev, description: e.target.value }))}\n                        rows={3}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setCreateEventOpen(false)}>\n                        Annuler\n                      </Button>\n                      <Button type=\"submit\" disabled={createEventMutation.isPending} data-testid=\"button-submit-event\">\n                        {createEventMutation.isPending ? \"Création...\" : \"Créer\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n\n        {/* Calendar Navigation */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {new Date(selectedDate).toLocaleDateString('fr-FR', { \n                  month: 'long', \n                  year: 'numeric' \n                })}\n              </CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const date = new Date(selectedDate);\n                    date.setDate(date.getDate() - 7);\n                    setSelectedDate(date.toISOString().split('T')[0]);\n                  }}\n                  data-testid=\"button-prev-week\"\n                >\n                  ←\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedDate(today)}\n                  data-testid=\"button-today\"\n                >\n                  Aujourd'hui\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const date = new Date(selectedDate);\n                    date.setDate(date.getDate() + 7);\n                    setSelectedDate(date.toISOString().split('T')[0]);\n                  }}\n                  data-testid=\"button-next-week\"\n                >\n                  →\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Week View */}\n            <div className=\"grid grid-cols-7 gap-2\">\n              {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map((day, index) => (\n                <div key={day} className=\"text-center text-sm font-medium text-muted-foreground py-2\">\n                  {day}\n                </div>\n              ))}\n              \n              {weekDates.map((date, index) => {\n                const dayEvents = getEventsForDate(date);\n                const isToday = date === today;\n                const dateObj = new Date(date);\n                \n                return (\n                  <div\n                    key={date}\n                    className={`min-h-[120px] p-2 border rounded-lg ${\n                      isToday ? \"bg-primary/5 border-primary\" : \"bg-card\"\n                    }`}\n                    data-testid={`calendar-day-${date}`}\n                  >\n                    <div className={`text-sm font-medium mb-2 ${\n                      isToday ? \"text-primary\" : \"text-foreground\"\n                    }`}>\n                      {dateObj.getDate()}\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      {dayEvents.map((event: OnboardingEvent) => (\n                        <div\n                          key={event.id}\n                          className={`p-1 rounded text-xs cursor-pointer hover:opacity-80 ${getEventTypeColor(event.eventType)}`}\n                          onClick={() => setSelectedEvent(event)}\n                          data-testid={`event-${event.id}`}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            {getEventTypeIcon(event.eventType)}\n                            <span className=\"truncate\">{event.title}</span>\n                          </div>\n                          <div className=\"text-xs opacity-75\">\n                            {new Date(event.startDateTime).toLocaleTimeString('fr-FR', { \n                              hour: '2-digit', \n                              minute: '2-digit' \n                            })}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Événements à Venir\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {events.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Aucun événement planifié</h3>\n                <p className=\"text-muted-foreground\">\n                  Les événements apparaîtront ici une fois créés.\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {events\n                  .filter((event: OnboardingEvent) => new Date(event.startDateTime) >= new Date())\n                  .sort((a: OnboardingEvent, b: OnboardingEvent) => \n                    new Date(a.startDateTime).getTime() - new Date(b.startDateTime).getTime()\n                  )\n                  .slice(0, 5)\n                  .map((event: OnboardingEvent) => (\n                    <div\n                      key={event.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                      onClick={() => setSelectedEvent(event)}\n                      data-testid={`upcoming-event-${event.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`p-2 rounded-full ${getEventTypeColor(event.eventType)}`}>\n                          {getEventTypeIcon(event.eventType)}\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{event.title}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {new Date(event.startDateTime).toLocaleDateString('fr-FR', {\n                              weekday: 'long',\n                              day: 'numeric',\n                              month: 'long',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </div>\n                          {event.location && (\n                            <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              {event.location}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className={getEventTypeColor(event.eventType)}>\n                        {getEventTypeName(event.eventType)}\n                      </Badge>\n                    </div>\n                  ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Event Details Dialog */}\n        {selectedEvent && (\n          <Dialog open={!!selectedEvent} onOpenChange={() => setSelectedEvent(null)}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  {getEventTypeIcon(selectedEvent.eventType)}\n                  {selectedEvent.title}\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Type</Label>\n                  <Badge className={getEventTypeColor(selectedEvent.eventType)}>\n                    {getEventTypeName(selectedEvent.eventType)}\n                  </Badge>\n                </div>\n                \n                <div>\n                  <Label>Date et heure</Label>\n                  <div className=\"text-sm\">\n                    {new Date(selectedEvent.startDateTime).toLocaleDateString('fr-FR', {\n                      weekday: 'long',\n                      day: 'numeric',\n                      month: 'long',\n                      year: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                    {selectedEvent.endDateTime && (\n                      <span> - {new Date(selectedEvent.endDateTime).toLocaleTimeString('fr-FR', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}</span>\n                    )}\n                  </div>\n                </div>\n\n                {selectedEvent.location && (\n                  <div>\n                    <Label>Lieu</Label>\n                    <div className=\"flex items-center text-sm\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      {selectedEvent.location}\n                    </div>\n                  </div>\n                )}\n\n                {selectedEvent.description && (\n                  <div>\n                    <Label>Description</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {selectedEvent.description}\n                    </div>\n                  </div>\n                )}\n\n                <div>\n                  <Label>Statut</Label>\n                  <Badge variant={selectedEvent.status === 'completed' ? 'default' : 'secondary'}>\n                    {selectedEvent.status === 'scheduled' ? 'Planifié' : \n                     selectedEvent.status === 'completed' ? 'Terminé' : 'Annulé'}\n                  </Badge>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22197},"client/src/pages/OnboardingFeedback.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { \n  Star, \n  MessageSquare, \n  ThumbsUp, \n  ArrowLeft,\n  Plane,\n  CheckCircle,\n  Heart\n} from \"lucide-react\";\n\ninterface OnboardingFeedback {\n  id: number;\n  candidateOnboardingId: number;\n  userId: string;\n  stepId?: number;\n  overallRating: number;\n  stepRating?: number;\n  clarity: number;\n  support: number;\n  usefulness: number;\n  comments?: string;\n  suggestions?: string;\n  wouldRecommend?: boolean;\n  createdAt: string;\n}\n\ninterface CandidateOnboarding {\n  id: number;\n  userId: string;\n  processId: number;\n  status: string;\n  progress: number;\n  startDate: string;\n  expectedCompletionDate: string;\n  assignedMentor: string;\n  notes: string;\n  actualCompletionDate?: string;\n}\n\nexport default function OnboardingFeedback() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    overallRating: 0,\n    clarity: 0,\n    support: 0,\n    usefulness: 0,\n    comments: \"\",\n    suggestions: \"\",\n    wouldRecommend: true\n  });\n\n  // Fetch candidate's onboarding records\n  const { data: onboardings = [], isLoading: onboardingsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/candidates/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const currentOnboarding = onboardings.find((o: CandidateOnboarding) => o.status !== 'completed');\n\n  // Fetch existing feedback\n  const { data: existingFeedback = [], isLoading: feedbackLoading } = useQuery({\n    queryKey: [\"/api/onboarding/feedback\"],\n    enabled: !!currentOnboarding?.id,\n  });\n\n  const userFeedback = existingFeedback.find((f: OnboardingFeedback) => \n    f.candidateOnboardingId === currentOnboarding?.id && f.userId === user?.id\n  );\n\n  // Submit feedback mutation\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (feedbackData: any) =>\n      apiRequest(\"POST\", \"/api/onboarding/feedback\", feedbackData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/feedback\"] });\n      toast({\n        title: \"Feedback Envoyé\",\n        description: \"Merci pour votre retour ! Votre feedback nous aide à améliorer l'expérience d'onboarding.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de l'envoi du feedback.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStarClick = (rating: number, field: string) => {\n    setFormData(prev => ({ ...prev, [field]: rating }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    if (!currentOnboarding) {\n      toast({\n        title: \"Erreur\",\n        description: \"Aucun processus d'onboarding trouvé.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.overallRating === 0 || formData.clarity === 0 || \n        formData.support === 0 || formData.usefulness === 0) {\n      toast({\n        title: \"Évaluation incomplète\",\n        description: \"Veuillez évaluer tous les critères avec des étoiles.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitFeedbackMutation.mutate({\n      candidateOnboardingId: currentOnboarding.id,\n      ...formData\n    });\n  };\n\n  const renderStars = (rating: number, field: string, label: string) => (\n    <div className=\"space-y-2\">\n      <Label className=\"text-sm font-medium\">{label}</Label>\n      <div className=\"flex space-x-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <button\n            key={star}\n            type=\"button\"\n            onClick={() => handleStarClick(star, field)}\n            className={`p-1 transition-colors ${\n              star <= rating \n                ? \"text-yellow-400 hover:text-yellow-500\" \n                : \"text-gray-300 hover:text-gray-400\"\n            }`}\n            data-testid={`star-${field}-${star}`}\n          >\n            <Star className=\"h-6 w-6 fill-current\" />\n          </button>\n        ))}\n        <span className=\"ml-2 text-sm text-muted-foreground\">\n          {rating}/5 {rating === 5 ? \"Excellent\" : rating >= 4 ? \"Très bien\" : rating >= 3 ? \"Bien\" : rating >= 2 ? \"Correct\" : rating > 0 ? \"À améliorer\" : \"\"}\n        </span>\n      </div>\n    </div>\n  );\n\n  if (onboardingsLoading || feedbackLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!currentOnboarding) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <Plane className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Aucun Onboarding en Cours</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              Vous n'avez actuellement aucun processus d'onboarding en cours pour évaluer.\n            </p>\n            <Link to=\"/candidate-onboarding\">\n              <Button>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour à l'Onboarding\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (userFeedback) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center space-x-3\">\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                <span>Feedback Déjà Envoyé</span>\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">\n                Merci d'avoir partagé votre expérience d'onboarding !\n              </p>\n            </div>\n            <Link to=\"/candidate-onboarding\">\n              <Button variant=\"outline\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Retour\n              </Button>\n            </Link>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Heart className=\"h-5 w-5 text-red-500\" />\n                Votre Évaluation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">{userFeedback.overallRating}/5</div>\n                  <div className=\"text-sm text-muted-foreground\">Note Globale</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{userFeedback.clarity}/5</div>\n                  <div className=\"text-sm text-muted-foreground\">Clarté</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{userFeedback.support}/5</div>\n                  <div className=\"text-sm text-muted-foreground\">Support</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{userFeedback.usefulness}/5</div>\n                  <div className=\"text-sm text-muted-foreground\">Utilité</div>\n                </div>\n              </div>\n\n              {userFeedback.comments && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Commentaires</Label>\n                  <div className=\"mt-1 p-3 bg-muted rounded-md text-sm\">\n                    {userFeedback.comments}\n                  </div>\n                </div>\n              )}\n\n              {userFeedback.suggestions && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Suggestions</Label>\n                  <div className=\"mt-1 p-3 bg-muted rounded-md text-sm\">\n                    {userFeedback.suggestions}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-2\">\n                <Badge variant={userFeedback.wouldRecommend ? \"default\" : \"secondary\"}>\n                  {userFeedback.wouldRecommend ? \"Recommande l'expérience\" : \"Ne recommande pas\"}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center space-x-3\">\n              <MessageSquare className=\"h-8 w-8 text-primary\" />\n              <span>Évaluez votre Onboarding</span>\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Votre feedback nous aide à améliorer l'expérience d'intégration\n            </p>\n          </div>\n          <Link to=\"/candidate-onboarding\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour\n            </Button>\n          </Link>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Star className=\"h-5 w-5 text-yellow-400\" />\n                Évaluation de votre Expérience\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {renderStars(formData.overallRating, \"overallRating\", \"Note globale de l'expérience\")}\n              \n              <div className=\"grid md:grid-cols-3 gap-6\">\n                {renderStars(formData.clarity, \"clarity\", \"Clarté des instructions\")}\n                {renderStars(formData.support, \"support\", \"Qualité du support\")}\n                {renderStars(formData.usefulness, \"usefulness\", \"Utilité du processus\")}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Commentaires et Suggestions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"comments\">Commentaires sur votre expérience</Label>\n                <Textarea\n                  id=\"comments\"\n                  data-testid=\"input-comments\"\n                  placeholder=\"Décrivez votre expérience d'onboarding...\"\n                  value={formData.comments}\n                  onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"suggestions\">Suggestions d'amélioration</Label>\n                <Textarea\n                  id=\"suggestions\"\n                  data-testid=\"input-suggestions\"\n                  placeholder=\"Que pourrait-on améliorer ?\"\n                  value={formData.suggestions}\n                  onChange={(e) => setFormData(prev => ({ ...prev, suggestions: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <Label htmlFor=\"wouldRecommend\">Recommanderiez-vous cette expérience ?</Label>\n                <div className=\"flex space-x-4\">\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"radio\"\n                      name=\"wouldRecommend\"\n                      data-testid=\"radio-recommend-yes\"\n                      checked={formData.wouldRecommend === true}\n                      onChange={() => setFormData(prev => ({ ...prev, wouldRecommend: true }))}\n                      className=\"text-primary\"\n                    />\n                    <span>Oui</span>\n                  </label>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"radio\"\n                      name=\"wouldRecommend\"\n                      data-testid=\"radio-recommend-no\"\n                      checked={formData.wouldRecommend === false}\n                      onChange={() => setFormData(prev => ({ ...prev, wouldRecommend: false }))}\n                      className=\"text-primary\"\n                    />\n                    <span>Non</span>\n                  </label>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Link to=\"/candidate-onboarding\">\n              <Button type=\"button\" variant=\"outline\">\n                Annuler\n              </Button>\n            </Link>\n            <Button \n              type=\"submit\" \n              data-testid=\"button-submit-feedback\"\n              disabled={submitFeedbackMutation.isPending}\n              className=\"flex items-center gap-2\"\n            >\n              {submitFeedbackMutation.isPending ? (\n                <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n              ) : (\n                <ThumbsUp className=\"h-4 w-4\" />\n              )}\n              Envoyer le Feedback\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":14089},"client/src/pages/OnboardingManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Users, \n  CheckCircle, \n  Clock, \n  AlertCircle,\n  UserCheck,\n  Plane,\n  Settings,\n  FileText,\n  Calendar,\n  BarChart3,\n  TrendingUp,\n  Award,\n  Star,\n  Copy,\n  Zap\n} from \"lucide-react\";\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  BarChart,\n  Bar,\n  Legend\n} from 'recharts';\n\ninterface OnboardingProcess {\n  id: number;\n  name: string;\n  description: string;\n  department: string;\n  isActive: boolean;\n  estimatedDuration: number;\n  createdAt: string;\n}\n\ninterface OnboardingStep {\n  id: number;\n  processId: number;\n  stepNumber: number;\n  title: string;\n  description: string;\n  category: string;\n  isRequired: boolean;\n  estimatedDuration: number;\n  assignedRole: string;\n}\n\ninterface CandidateOnboarding {\n  id: number;\n  userId: string;\n  processId: number;\n  status: string;\n  progress: number;\n  startDate: string;\n  expectedCompletionDate: string;\n  assignedMentor: string;\n  notes: string;\n}\n\n// Helper function to get department icons\nconst getDepartmentIcon = (department: string) => {\n  switch (department.toLowerCase()) {\n    case 'aviation':\n      return <Plane className=\"h-5 w-5 text-blue-500\" />;\n    case 'sécurité':\n      return <Settings className=\"h-5 w-5 text-red-500\" />;\n    case 'administration':\n      return <FileText className=\"h-5 w-5 text-green-500\" />;\n    default:\n      return <Users className=\"h-5 w-5 text-gray-500\" />;\n  }\n};\n\nexport default function OnboardingManagement() {\n  const [newProcessOpen, setNewProcessOpen] = useState(false);\n  const [newStepOpen, setNewStepOpen] = useState(false);\n  const [selectedProcess, setSelectedProcess] = useState<number | null>(null);\n  const [newCandidateOpen, setNewCandidateOpen] = useState(false);\n  const [templatesDialogOpen, setTemplatesDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch onboarding processes\n  const { data: processes = [], isLoading: processesLoading } = useQuery({\n    queryKey: [\"/api/onboarding/processes\"],\n  });\n\n  // Fetch all users for candidate selection\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Fetch onboarding analytics\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/onboarding/analytics\"],\n  });\n\n  // Fetch process templates\n  const { data: templates = [] } = useQuery({\n    queryKey: [\"/api/onboarding/templates\"],\n  });\n\n  // Create process mutation\n  const createProcessMutation = useMutation({\n    mutationFn: async (data: any) => apiRequest(\"POST\", \"/api/onboarding/processes\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/processes\"] });\n      setNewProcessOpen(false);\n      toast({\n        title: \"Processus créé\",\n        description: \"Le processus d'onboarding a été créé avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création du processus.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create step mutation\n  const createStepMutation = useMutation({\n    mutationFn: async ({ processId, data }: { processId: number; data: any }) => \n      apiRequest(\"POST\", `/api/onboarding/processes/${processId}/steps`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/processes\"] });\n      setNewStepOpen(false);\n      toast({\n        title: \"Étape créée\",\n        description: \"L'étape d'onboarding a été créée avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création de l'étape.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create candidate onboarding mutation\n  const createCandidateOnboardingMutation = useMutation({\n    mutationFn: async (data: any) => apiRequest(\"POST\", \"/api/onboarding/candidates\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/candidates\"] });\n      setNewCandidateOpen(false);\n      toast({\n        title: \"Onboarding démarré\",\n        description: \"L'onboarding du candidat a été démarré avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors du démarrage de l'onboarding.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create process from template mutation\n  const createFromTemplateMutation = useMutation({\n    mutationFn: async ({ templateId, customName }: { templateId: number; customName?: string }) =>\n      apiRequest(\"POST\", `/api/onboarding/templates/${templateId}/create`, { customName }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/onboarding/processes\"] });\n      setTemplatesDialogOpen(false);\n      toast({\n        title: \"Processus créé\",\n        description: \"Le processus a été créé avec succès à partir du template.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création du processus.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateProcess = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    const processData = {\n      name: formData.get(\"name\"),\n      description: formData.get(\"description\"),\n      department: formData.get(\"department\"),\n      estimatedDuration: parseInt(formData.get(\"estimatedDuration\") as string),\n    };\n    \n    createProcessMutation.mutate(processData);\n  };\n\n  const handleCreateStep = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!selectedProcess) return;\n    \n    const formData = new FormData(event.currentTarget);\n    \n    const stepData = {\n      stepNumber: parseInt(formData.get(\"stepNumber\") as string),\n      title: formData.get(\"title\"),\n      description: formData.get(\"description\"),\n      category: formData.get(\"category\"),\n      isRequired: formData.get(\"isRequired\") === \"true\",\n      estimatedDuration: parseInt(formData.get(\"estimatedDuration\") as string),\n      assignedRole: formData.get(\"assignedRole\"),\n    };\n    \n    createStepMutation.mutate({ processId: selectedProcess, data: stepData });\n  };\n\n  const handleCreateCandidateOnboarding = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    const onboardingData = {\n      userId: formData.get(\"userId\"),\n      processId: parseInt(formData.get(\"processId\") as string),\n      startDate: formData.get(\"startDate\"),\n      expectedCompletionDate: formData.get(\"expectedCompletionDate\"),\n      assignedMentor: formData.get(\"assignedMentor\"),\n      notes: formData.get(\"notes\"),\n    };\n    \n    createCandidateOnboardingMutation.mutate(onboardingData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'in_progress': return 'bg-blue-500';\n      case 'pending': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getDepartmentIcon = (department: string) => {\n    switch (department?.toLowerCase()) {\n      case 'aviation': return <Plane className=\"h-4 w-4\" />;\n      case 'sécurité': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'administration': return <FileText className=\"h-4 w-4\" />;\n      default: return <Settings className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (processesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <UserCheck className=\"h-8 w-8 text-primary\" />\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground\">Gestion de l'Onboarding</h1>\n                <p className=\"text-muted-foreground\">Gérez les processus d'intégration des nouveaux employés</p>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Dialog open={newProcessOpen} onOpenChange={setNewProcessOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Nouveau Processus\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Créer un Processus d'Onboarding</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateProcess} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Nom du processus</Label>\n                      <Input id=\"name\" name=\"name\" placeholder=\"Ex: Onboarding Personnel Aviation\" required />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea id=\"description\" name=\"description\" placeholder=\"Description du processus d'onboarding...\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"department\">Département</Label>\n                        <Select name=\"department\" required>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Sélectionner un département\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Aviation\">Aviation</SelectItem>\n                            <SelectItem value=\"Sécurité\">Sécurité</SelectItem>\n                            <SelectItem value=\"Administration\">Administration</SelectItem>\n                            <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                            <SelectItem value=\"Commercial\">Commercial</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"estimatedDuration\">Durée estimée (jours)</Label>\n                        <Input id=\"estimatedDuration\" name=\"estimatedDuration\" type=\"number\" placeholder=\"30\" required />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setNewProcessOpen(false)}>\n                        Annuler\n                      </Button>\n                      <Button type=\"submit\" disabled={createProcessMutation.isPending}>\n                        {createProcessMutation.isPending ? \"Création...\" : \"Créer\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={newCandidateOpen} onOpenChange={setNewCandidateOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Démarrer Onboarding\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Démarrer l'Onboarding d'un Candidat</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateCandidateOnboarding} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"userId\">Candidat</Label>\n                        <Select name=\"userId\" required>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Sélectionner un candidat\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {users.filter((user: any) => user.role === 'candidate').map((user: any) => (\n                              <SelectItem key={user.id} value={user.id}>\n                                {user.firstName} {user.lastName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"processId\">Processus</Label>\n                        <Select name=\"processId\" required>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Sélectionner un processus\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {processes.map((process: OnboardingProcess) => (\n                              <SelectItem key={process.id} value={process.id.toString()}>\n                                {process.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"startDate\">Date de début</Label>\n                        <Input id=\"startDate\" name=\"startDate\" type=\"date\" required />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"expectedCompletionDate\">Date de fin prévue</Label>\n                        <Input id=\"expectedCompletionDate\" name=\"expectedCompletionDate\" type=\"date\" required />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"assignedMentor\">Mentor assigné</Label>\n                      <Select name=\"assignedMentor\">\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Sélectionner un mentor\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {users.filter((user: any) => user.role === 'hr' || user.role === 'admin').map((user: any) => (\n                            <SelectItem key={user.id} value={user.id}>\n                              {user.firstName} {user.lastName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"notes\">Notes</Label>\n                      <Textarea id=\"notes\" name=\"notes\" placeholder=\"Notes sur l'onboarding...\" />\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setNewCandidateOpen(false)}>\n                        Annuler\n                      </Button>\n                      <Button type=\"submit\" disabled={createCandidateOnboardingMutation.isPending}>\n                        {createCandidateOnboardingMutation.isPending ? \"Démarrage...\" : \"Démarrer\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"analytics\">Analytiques</TabsTrigger>\n            <TabsTrigger value=\"processes\">Processus</TabsTrigger>\n            <TabsTrigger value=\"templates\">Templates</TabsTrigger>\n            <TabsTrigger value=\"candidates\">Candidats</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            {analyticsLoading ? (\n              <div className=\"flex items-center justify-center h-64\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : analytics ? (\n              <>\n                {/* Overview Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Onboardings</p>\n                          <p className=\"text-2xl font-bold\">{analytics.overview.totalOnboardings}</p>\n                        </div>\n                        <Users className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Taux de Réussite</p>\n                          <p className=\"text-2xl font-bold\">{analytics.overview.completionRate}%</p>\n                        </div>\n                        <Award className=\"h-8 w-8 text-green-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Temps Moyen</p>\n                          <p className=\"text-2xl font-bold\">{analytics.overview.averageCompletionTime} jours</p>\n                        </div>\n                        <Clock className=\"h-8 w-8 text-orange-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">En Cours</p>\n                          <p className=\"text-2xl font-bold\">{analytics.overview.inProgressOnboardings}</p>\n                        </div>\n                        <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Charts Section */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Monthly Progress Chart */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Évolution Mensuelle</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={analytics.monthlyProgress}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"month\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Legend />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"started\" \n                            stroke=\"#8884d8\" \n                            name=\"Démarrés\"\n                            strokeWidth={2}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"completed\" \n                            stroke=\"#82ca9d\" \n                            name=\"Terminés\"\n                            strokeWidth={2}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  {/* Department Performance */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Performance par Département</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={analytics.departmentStats}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"department\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Legend />\n                          <Bar dataKey=\"total\" fill=\"#8884d8\" name=\"Total\" />\n                          <Bar dataKey=\"completed\" fill=\"#82ca9d\" name=\"Terminés\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Step Performance */}\n                {analytics.stepPerformance && analytics.stepPerformance.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Étapes à Améliorer</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Étapes avec les taux de réussite les plus faibles\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {analytics.stepPerformance.map((step: any, index: number) => (\n                          <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Badge variant=\"outline\">{step.category}</Badge>\n                              <span className=\"font-medium\">{step.stepTitle}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm text-muted-foreground\">\n                                {step.totalCompletions} complétions\n                              </span>\n                              <Badge variant={step.completionRate < 70 ? \"destructive\" : \"default\"}>\n                                {step.completionRate}%\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">Aucune donnée analytique disponible</p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"templates\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Templates de Processus</h2>\n                <p className=\"text-muted-foreground\">Utilisez des templates prédéfinis pour créer rapidement des processus</p>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {templates.map((template: any) => (\n                <Card key={template.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getDepartmentIcon(template.department)}\n                        <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      </div>\n                      <Badge variant=\"secondary\">Template</Badge>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                    \n                    <div className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{template.estimatedDuration} jours</span>\n                      </div>\n                      <Badge variant=\"outline\">{template.department}</Badge>\n                    </div>\n                    \n                    {(template as any).steps && (\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium\">Étapes incluses :</p>\n                        <div className=\"space-y-1\">\n                          {(template as any).steps.slice(0, 3).map((step: any, index: number) => (\n                            <div key={index} className=\"flex items-center space-x-2 text-xs\">\n                              <div className=\"w-1 h-1 bg-primary rounded-full\" />\n                              <span className=\"text-muted-foreground\">{step.title}</span>\n                            </div>\n                          ))}\n                          {(template as any).steps.length > 3 && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              +{(template as any).steps.length - 3} autres étapes\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                    \n                    <Button \n                      onClick={() => createFromTemplateMutation.mutate({ templateId: template.id })}\n                      disabled={createFromTemplateMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      <Copy className=\"h-4 w-4 mr-2\" />\n                      {createFromTemplateMutation.isPending ? \"Création...\" : \"Utiliser ce Template\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"processes\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {processes.map((process: OnboardingProcess) => (\n                <Card key={process.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getDepartmentIcon(process.department)}\n                        <CardTitle className=\"text-lg\">{process.name}</CardTitle>\n                      </div>\n                      <Badge variant={process.isActive ? \"default\" : \"secondary\"}>\n                        {process.isActive ? \"Actif\" : \"Inactif\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">{process.description}</p>\n                    \n                    <div className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{process.estimatedDuration} jours</span>\n                      </div>\n                      <Badge variant=\"outline\">{process.department}</Badge>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Dialog open={newStepOpen && selectedProcess === process.id} onOpenChange={(open) => {\n                        setNewStepOpen(open);\n                        if (open) setSelectedProcess(process.id);\n                        else setSelectedProcess(null);\n                      }}>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                            <Plus className=\"h-3 w-3 mr-1\" />\n                            Ajouter Étape\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Ajouter une Étape</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={handleCreateStep} className=\"space-y-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label htmlFor=\"stepNumber\">Numéro d'étape</Label>\n                                <Input id=\"stepNumber\" name=\"stepNumber\" type=\"number\" required />\n                              </div>\n                              \n                              <div>\n                                <Label htmlFor=\"category\">Catégorie</Label>\n                                <Select name=\"category\" required>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Catégorie\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"documentation\">Documentation</SelectItem>\n                                    <SelectItem value=\"formation\">Formation</SelectItem>\n                                    <SelectItem value=\"administrative\">Administrative</SelectItem>\n                                    <SelectItem value=\"technique\">Technique</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"title\">Titre de l'étape</Label>\n                              <Input id=\"title\" name=\"title\" placeholder=\"Ex: Formation Sécurité Aéroport\" required />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"description\">Description</Label>\n                              <Textarea id=\"description\" name=\"description\" placeholder=\"Description de l'étape...\" />\n                            </div>\n                            \n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label htmlFor=\"estimatedDuration\">Durée (heures)</Label>\n                                <Input id=\"estimatedDuration\" name=\"estimatedDuration\" type=\"number\" required />\n                              </div>\n                              \n                              <div>\n                                <Label htmlFor=\"assignedRole\">Rôle assigné</Label>\n                                <Select name=\"assignedRole\" required>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Rôle\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"admin\">Admin</SelectItem>\n                                    <SelectItem value=\"hr\">RH</SelectItem>\n                                    <SelectItem value=\"security\">Sécurité</SelectItem>\n                                    <SelectItem value=\"supervisor\">Superviseur</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor=\"isRequired\">Étape obligatoire</Label>\n                              <Select name=\"isRequired\" required>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Obligatoire ?\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"true\">Oui</SelectItem>\n                                  <SelectItem value=\"false\">Non</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            \n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"button\" variant=\"outline\" onClick={() => setNewStepOpen(false)}>\n                                Annuler\n                              </Button>\n                              <Button type=\"submit\" disabled={createStepMutation.isPending}>\n                                {createStepMutation.isPending ? \"Création...\" : \"Créer\"}\n                              </Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"candidates\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Candidats en Cours d'Onboarding</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Cette section affichera tous les candidats actuellement en processus d'onboarding avec leur progression.\n                </p>\n                <div className=\"mt-4 text-center\">\n                  <Button onClick={() => setNewCandidateOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Démarrer un Onboarding\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":36136},"client/src/pages/PayrollManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, DollarSign, FileText, Plus, Search, User, Edit, Download, Mail, Eye, Printer } from \"lucide-react\";\n\nexport default function PayrollManagement() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [newPayroll, setNewPayroll] = useState({\n    employeeId: \"\",\n    grossSalary: \"\",\n    netSalary: \"\",\n    deductions: \"\",\n    bonuses: \"\",\n    period: \"\",\n    status: \"pending\" as const\n  });\n\n  // États pour modals d'édition et partage\n  const [showEditPayslipDialog, setShowEditPayslipDialog] = useState(false);\n  const [showEmailDialog, setShowEmailDialog] = useState(false);\n  const [selectedPayroll, setSelectedPayroll] = useState<any>(null);\n  const [editPayslipData, setEditPayslipData] = useState({\n    baseSalary: \"\",\n    bonuses: \"\",\n    overtime: \"\",\n    deductions: \"\",\n    socialCharges: \"\",\n    taxes: \"\",\n    netSalary: \"\",\n    workingDays: \"\",\n    absenceDays: \"\",\n    notes: \"\"\n  });\n  const [emailData, setEmailData] = useState({\n    email: \"\",\n    customMessage: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: payrolls = [], isLoading } = useQuery({\n    queryKey: [\"/api/payroll\"],\n  });\n\n  const { data: employees = [] } = useQuery({\n    queryKey: [\"/api/employees\"],\n  });\n\n  const createPayrollMutation = useMutation({\n    mutationFn: async (payrollData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/payroll\", payrollData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payroll\"] });\n      setShowCreateDialog(false);\n      setNewPayroll({\n        employeeId: \"\",\n        grossSalary: \"\",\n        netSalary: \"\",\n        deductions: \"\",\n        bonuses: \"\",\n        period: \"\",\n        status: \"pending\"\n      });\n      toast({\n        title: \"Succès\",\n        description: \"Bulletin de paie créé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le bulletin de paie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePayrollMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/payroll/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payroll\"] });\n      toast({\n        title: \"Succès\",\n        description: \"Statut du paiement mis à jour\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const savePayslipMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/payroll/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payroll\"] });\n      setShowEditPayslipDialog(false);\n      toast({\n        title: \"Succès\",\n        description: \"Bulletin de paie mis à jour avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de sauvegarder les modifications\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: async ({ id, email, customMessage }: { id: number; email: string; customMessage: string }) => {\n      const response = await apiRequest(\"POST\", `/api/payroll/${id}/send-email`, { email, customMessage });\n      return response.json();\n    },\n    onSuccess: () => {\n      setShowEmailDialog(false);\n      toast({\n        title: \"Succès\",\n        description: \"Email envoyé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer l'email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePayroll = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPayrollMutation.mutate({\n      ...newPayroll,\n      employeeId: parseInt(newPayroll.employeeId),\n      grossSalary: parseFloat(newPayroll.grossSalary),\n      netSalary: parseFloat(newPayroll.netSalary),\n      deductions: parseFloat(newPayroll.deductions || \"0\"),\n      bonuses: parseFloat(newPayroll.bonuses || \"0\"),\n    });\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"default\";\n      case \"pending\":\n        return \"secondary\";\n      case \"processing\":\n        return \"outline\";\n      default:\n        return \"destructive\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"Payé\";\n      case \"pending\":\n        return \"En attente\";\n      case \"processing\":\n        return \"En traitement\";\n      case \"failed\":\n        return \"Échoué\";\n      default:\n        return status;\n    }\n  };\n\n  // Fonctions de gestion des bulletins de paie\n  const handleViewPayslip = (payroll: any) => {\n    setSelectedPayroll(payroll);\n    // TODO: Ouvrir modal de prévisualisation\n    toast({\n      title: \"Prévisualisation\",\n      description: `Bulletin de paie de ${payroll.employee?.firstName} ${payroll.employee?.lastName} pour ${payroll.period}`,\n    });\n  };\n\n  const handleEditPayslip = (payroll: any) => {\n    setSelectedPayroll(payroll);\n    setEditPayslipData({\n      baseSalary: payroll.baseSalary?.toString() || \"\",\n      bonuses: payroll.bonuses?.toString() || \"\",\n      overtime: payroll.overtime?.toString() || \"\",\n      deductions: payroll.deductions?.toString() || \"\",\n      socialCharges: payroll.socialCharges?.toString() || \"\",\n      taxes: payroll.taxes?.toString() || \"\",\n      netSalary: payroll.netSalary?.toString() || \"\",\n      workingDays: payroll.workingDays?.toString() || \"\",\n      absenceDays: payroll.absenceDays?.toString() || \"\",\n      notes: payroll.notes || \"\"\n    });\n    setShowEditPayslipDialog(true);\n  };\n\n  const handleGeneratePDF = (payrollId: number) => {\n    // TODO: Implémenter génération PDF\n    toast({\n      title: \"Génération PDF\",\n      description: \"Génération du bulletin de paie en cours...\",\n    });\n  };\n\n  const handleSendEmail = (payroll: any) => {\n    setSelectedPayroll(payroll);\n    setEmailData({\n      email: payroll.employee?.email || \"\",\n      customMessage: `Bonjour ${payroll.employee?.firstName},\\n\\nVeuillez trouver ci-joint votre bulletin de paie pour la période ${payroll.period}.\\n\\nCordialement,\\nService RH`\n    });\n    setShowEmailDialog(true);\n  };\n\n  const handleSavePayslip = () => {\n    if (!selectedPayroll) return;\n    \n    const updatedData = {\n      baseSalary: parseFloat(editPayslipData.baseSalary) || 0,\n      bonuses: parseFloat(editPayslipData.bonuses) || 0,\n      overtime: parseFloat(editPayslipData.overtime) || 0,\n      deductions: parseFloat(editPayslipData.deductions) || 0,\n      socialCharges: parseFloat(editPayslipData.socialCharges) || 0,\n      taxes: parseFloat(editPayslipData.taxes) || 0,\n      netSalary: parseFloat(editPayslipData.netSalary) || 0,\n      workingDays: parseInt(editPayslipData.workingDays) || 22,\n      absenceDays: parseInt(editPayslipData.absenceDays) || 0,\n      notes: editPayslipData.notes\n    };\n\n    savePayslipMutation.mutate({\n      id: selectedPayroll.id,\n      data: updatedData\n    });\n  };\n\n  const handleSendEmailAction = () => {\n    if (!selectedPayroll || !emailData.email) return;\n    \n    sendEmailMutation.mutate({\n      id: selectedPayroll.id,\n      email: emailData.email,\n      customMessage: emailData.customMessage\n    });\n  };\n\n  // Filter payrolls based on search term and selected period\n  const filteredPayrolls = payrolls.filter((payroll: any) => {\n    const matchesSearch = payroll.employee?.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payroll.employee?.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payroll.period.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPeriod = !selectedPeriod || payroll.period === selectedPeriod;\n    return matchesSearch && matchesPeriod;\n  });\n\n  // Get unique periods for filter\n  const periods = Array.from(new Set(payrolls.map((p: any) => p.period))).sort();\n\n  // Calculate summary statistics\n  const totalAmount = filteredPayrolls.reduce((sum: number, p: any) => sum + (p.netSalary || 0), 0);\n  const paidAmount = filteredPayrolls.filter((p: any) => p.status === 'paid').reduce((sum: number, p: any) => sum + (p.netSalary || 0), 0);\n  const pendingCount = filteredPayrolls.filter((p: any) => p.status === 'pending').length;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Gestion des Salaires</h1>\n          <p className=\"text-muted-foreground\">Gérer et suivre les paiements de salaires</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-payroll\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nouveau Bulletin\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Créer un Bulletin de Paie</DialogTitle>\n              <DialogDescription>\n                Ajouter un nouveau bulletin de paie pour un employé\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreatePayroll} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"employee\">Employé</Label>\n                <Select value={newPayroll.employeeId} onValueChange={(value) => setNewPayroll({...newPayroll, employeeId: value})}>\n                  <SelectTrigger data-testid=\"select-employee\">\n                    <SelectValue placeholder=\"Sélectionner un employé\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {employees.map((employee: any) => (\n                      <SelectItem key={employee.id} value={employee.id.toString()}>\n                        {employee.firstName} {employee.lastName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"grossSalary\">Salaire Brut (€)</Label>\n                  <Input\n                    id=\"grossSalary\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newPayroll.grossSalary}\n                    onChange={(e) => setNewPayroll({...newPayroll, grossSalary: e.target.value})}\n                    required\n                    data-testid=\"input-gross-salary\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"netSalary\">Salaire Net (€)</Label>\n                  <Input\n                    id=\"netSalary\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newPayroll.netSalary}\n                    onChange={(e) => setNewPayroll({...newPayroll, netSalary: e.target.value})}\n                    required\n                    data-testid=\"input-net-salary\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"deductions\">Déductions (€)</Label>\n                  <Input\n                    id=\"deductions\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newPayroll.deductions}\n                    onChange={(e) => setNewPayroll({...newPayroll, deductions: e.target.value})}\n                    data-testid=\"input-deductions\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bonuses\">Primes (€)</Label>\n                  <Input\n                    id=\"bonuses\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newPayroll.bonuses}\n                    onChange={(e) => setNewPayroll({...newPayroll, bonuses: e.target.value})}\n                    data-testid=\"input-bonuses\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"period\">Période</Label>\n                <Input\n                  id=\"period\"\n                  value={newPayroll.period}\n                  onChange={(e) => setNewPayroll({...newPayroll, period: e.target.value})}\n                  placeholder=\"ex: 2024-01\"\n                  required\n                  data-testid=\"input-period\"\n                />\n              </div>\n              <Button type=\"submit\" disabled={createPayrollMutation.isPending} data-testid=\"button-create-payroll\">\n                {createPayrollMutation.isPending ? \"Création...\" : \"Créer le Bulletin\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total à Payer</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-amount\">\n              {new Intl.NumberFormat('fr-FR', { \n                style: 'currency', \n                currency: 'EUR' \n              }).format(totalAmount)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Déjà Payé</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-paid-amount\">\n              {new Intl.NumberFormat('fr-FR', { \n                style: 'currency', \n                currency: 'EUR' \n              }).format(paidAmount)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">En Attente</CardTitle>\n            <FileText className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-pending-count\">\n              {pendingCount}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Bulletins</CardTitle>\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-payrolls\">\n              {filteredPayrolls.length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modal d'édition de bulletin de paie */}\n      <Dialog open={showEditPayslipDialog} onOpenChange={setShowEditPayslipDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Modifier le bulletin de paie</DialogTitle>\n            <DialogDescription>\n              {selectedPayroll && `${selectedPayroll.employee?.firstName} ${selectedPayroll.employee?.lastName} - ${selectedPayroll.period}`}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-base-salary\">Salaire de base (€)</Label>\n                <Input\n                  id=\"edit-base-salary\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.baseSalary}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, baseSalary: e.target.value})}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-bonuses\">Primes (€)</Label>\n                <Input\n                  id=\"edit-bonuses\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.bonuses}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, bonuses: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-overtime\">Heures supplémentaires (€)</Label>\n                <Input\n                  id=\"edit-overtime\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.overtime}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, overtime: e.target.value})}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-deductions\">Déductions (€)</Label>\n                <Input\n                  id=\"edit-deductions\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.deductions}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, deductions: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-social-charges\">Charges sociales (€)</Label>\n                <Input\n                  id=\"edit-social-charges\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.socialCharges}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, socialCharges: e.target.value})}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-taxes\">Impôts (€)</Label>\n                <Input\n                  id=\"edit-taxes\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.taxes}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, taxes: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-net-salary\">Salaire net (€)</Label>\n                <Input\n                  id=\"edit-net-salary\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editPayslipData.netSalary}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, netSalary: e.target.value})}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-working-days\">Jours travaillés</Label>\n                <Input\n                  id=\"edit-working-days\"\n                  type=\"number\"\n                  value={editPayslipData.workingDays}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, workingDays: e.target.value})}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-absence-days\">Jours d'absence</Label>\n                <Input\n                  id=\"edit-absence-days\"\n                  type=\"number\"\n                  value={editPayslipData.absenceDays}\n                  onChange={(e) => setEditPayslipData({...editPayslipData, absenceDays: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-notes\">Notes</Label>\n              <Textarea\n                id=\"edit-notes\"\n                value={editPayslipData.notes}\n                onChange={(e) => setEditPayslipData({...editPayslipData, notes: e.target.value})}\n                placeholder=\"Notes complémentaires...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowEditPayslipDialog(false)}>\n                Annuler\n              </Button>\n              <Button \n                onClick={handleSavePayslip}\n                disabled={savePayslipMutation.isPending}\n                data-testid=\"button-save-payslip\"\n              >\n                {savePayslipMutation.isPending ? 'Sauvegarde...' : 'Sauvegarder'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal d'envoi par email */}\n      <Dialog open={showEmailDialog} onOpenChange={setShowEmailDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Envoyer le bulletin de paie par email</DialogTitle>\n            <DialogDescription>\n              {selectedPayroll && `${selectedPayroll.employee?.firstName} ${selectedPayroll.employee?.lastName} - ${selectedPayroll.period}`}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email-address\">Adresse email</Label>\n              <Input\n                id=\"email-address\"\n                type=\"email\"\n                value={emailData.email}\n                onChange={(e) => setEmailData({...emailData, email: e.target.value})}\n                placeholder=\"employee@company.com\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email-message\">Message personnalisé</Label>\n              <Textarea\n                id=\"email-message\"\n                value={emailData.customMessage}\n                onChange={(e) => setEmailData({...emailData, customMessage: e.target.value})}\n                placeholder=\"Message d'accompagnement...\"\n                rows={6}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowEmailDialog(false)}>\n                Annuler\n              </Button>\n              <Button \n                onClick={handleSendEmailAction}\n                disabled={sendEmailMutation.isPending || !emailData.email}\n                data-testid=\"button-send-email\"\n              >\n                <Mail className=\"h-4 w-4 mr-2\" />\n                {sendEmailMutation.isPending ? 'Envoi...' : 'Envoyer'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 items-end\">\n        <div className=\"flex-1\">\n          <Label htmlFor=\"search\">Rechercher</Label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"search\"\n              placeholder=\"Rechercher par nom d'employé ou période...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-8\"\n              data-testid=\"input-search-payroll\"\n            />\n          </div>\n        </div>\n        <div>\n          <Label htmlFor=\"period\">Filtrer par Période</Label>\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-period-filter\">\n              <SelectValue placeholder=\"Toutes les périodes\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">Toutes les périodes</SelectItem>\n              {periods.map((period: string) => (\n                <SelectItem key={period} value={period}>\n                  {period}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Payrolls Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Bulletins de Paie</CardTitle>\n          <CardDescription>\n            Liste de tous les bulletins de paie avec leur statut\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Employé</TableHead>\n                <TableHead>Période</TableHead>\n                <TableHead>Salaire Brut</TableHead>\n                <TableHead>Salaire Net</TableHead>\n                <TableHead>Statut</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredPayrolls.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    Aucun bulletin de paie trouvé\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredPayrolls.map((payroll: any) => (\n                  <TableRow key={payroll.id} data-testid={`row-payroll-${payroll.id}`}>\n                    <TableCell className=\"font-medium\">\n                      {payroll.employee ? `${payroll.employee.firstName} ${payroll.employee.lastName}` : `Employé #${payroll.employeeId}`}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                        {payroll.period}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {new Intl.NumberFormat('fr-FR', { \n                        style: 'currency', \n                        currency: 'EUR' \n                      }).format(payroll.grossSalary)}\n                    </TableCell>\n                    <TableCell>\n                      {new Intl.NumberFormat('fr-FR', { \n                        style: 'currency', \n                        currency: 'EUR' \n                      }).format(payroll.netSalary)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getStatusBadgeVariant(payroll.status)}>\n                        {getStatusLabel(payroll.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleViewPayslip(payroll)}\n                          data-testid={`button-view-payslip-${payroll.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Voir\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditPayslip(payroll)}\n                          data-testid={`button-edit-payslip-${payroll.id}`}\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          Modifier\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleGeneratePDF(payroll.id)}\n                          data-testid={`button-pdf-${payroll.id}`}\n                        >\n                          <Download className=\"h-4 w-4 mr-1\" />\n                          PDF\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleSendEmail(payroll)}\n                          data-testid={`button-email-${payroll.id}`}\n                        >\n                          <Mail className=\"h-4 w-4 mr-1\" />\n                          Email\n                        </Button>\n                        {payroll.status === \"pending\" && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => updatePayrollMutation.mutate({ \n                              id: payroll.id, \n                              status: \"paid\" \n                            })}\n                            disabled={updatePayrollMutation.isPending}\n                            data-testid={`button-mark-paid-${payroll.id}`}\n                          >\n                            Marquer Payé\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":30895},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Users, UserPlus, Edit, Trash2, Shield, Mail, Phone } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nconst updateUserSchema = z.object({\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  email: z.string().email(\"Email invalide\"),\n  phone: z.string().optional(),\n  role: z.enum([\"candidate\", \"recruiter\", \"hr\", \"admin\"]),\n});\n\nconst createUserSchema = z.object({\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  email: z.string().email(\"Email invalide\"),\n  phone: z.string().optional(),\n  role: z.enum([\"candidate\", \"recruiter\", \"hr\", \"admin\"]),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n});\n\ntype UpdateUserForm = z.infer<typeof updateUserSchema>;\ntype CreateUserForm = z.infer<typeof createUserSchema>;\n\nexport default function UserManagement() {\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [roleFilter, setRoleFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\", roleFilter === \"all\" ? null : roleFilter],\n    queryFn: async () => {\n      const params = roleFilter !== \"all\" ? `?role=${roleFilter}` : \"\";\n      const response = await fetch(`/api/users${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: UpdateUserForm }) => {\n      return apiRequest(`/api/users/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Utilisateur modifié\",\n        description: \"Les informations ont été mises à jour avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de modifier l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserForm) => {\n      return apiRequest(\"POST\", \"/api/users\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Utilisateur créé\",\n        description: \"L'utilisateur a été créé avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/users/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Utilisateur supprimé\",\n        description: \"L'utilisateur a été supprimé avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de supprimer l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<UpdateUserForm>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      role: \"candidate\",\n    },\n  });\n\n  const createForm = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      role: \"candidate\",\n      password: \"\",\n    },\n  });\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    form.reset({\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      email: user.email || \"\",\n      phone: user.phone || \"\",\n      role: user.role as any,\n    });\n  };\n\n  const handleUpdate = (data: UpdateUserForm) => {\n    if (!editingUser) return;\n    updateUserMutation.mutate({ id: editingUser.id, data });\n  };\n\n  const handleCreate = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleDelete = (user: User) => {\n    if (confirm(`Êtes-vous sûr de vouloir supprimer l'utilisateur ${user.firstName} ${user.lastName} ?`)) {\n      deleteUserMutation.mutate(user.id);\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    const variants: Record<string, { variant: any; label: string; icon: JSX.Element }> = {\n      admin: { variant: \"destructive\", label: \"Admin\", icon: <Shield className=\"w-3 h-3\" /> },\n      hr: { variant: \"default\", label: \"RH\", icon: <Users className=\"w-3 h-3\" /> },\n      recruiter: { variant: \"secondary\", label: \"Recruteur\", icon: <UserPlus className=\"w-3 h-3\" /> },\n      candidate: { variant: \"outline\", label: \"Candidat\", icon: <Mail className=\"w-3 h-3\" /> },\n    };\n    \n    const config = variants[role] || variants.candidate;\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        {config.icon}\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const filteredUsers = users.filter((user: User) => \n    roleFilter === \"all\" || user.role === roleFilter\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"h-32 bg-muted rounded\"></div>\n          <div className=\"h-96 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestion des Utilisateurs</h1>\n          <p className=\"text-muted-foreground\">\n            Gérer les utilisateurs et leurs rôles sur la plateforme\n          </p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)} data-testid=\"button-add-user\">\n          <UserPlus className=\"w-4 h-4 mr-2\" />\n          Ajouter un utilisateur\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">Total Utilisateurs</p>\n                <p className=\"text-2xl font-bold\">{users.length}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">Administrateurs</p>\n                <p className=\"text-2xl font-bold\">\n                  {users.filter((u: User) => u.role === \"admin\").length}\n                </p>\n              </div>\n              <Shield className=\"h-8 w-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">Équipe RH</p>\n                <p className=\"text-2xl font-bold\">\n                  {users.filter((u: User) => u.role === \"hr\" || u.role === \"recruiter\").length}\n                </p>\n              </div>\n              <UserPlus className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">Candidats</p>\n                <p className=\"text-2xl font-bold\">\n                  {users.filter((u: User) => u.role === \"candidate\").length}\n                </p>\n              </div>\n              <Mail className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filtres</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tous les rôles</SelectItem>\n                <SelectItem value=\"admin\">Administrateurs</SelectItem>\n                <SelectItem value=\"hr\">RH</SelectItem>\n                <SelectItem value=\"recruiter\">Recruteurs</SelectItem>\n                <SelectItem value=\"candidate\">Candidats</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Liste des Utilisateurs ({filteredUsers.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nom complet</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Téléphone</TableHead>\n                <TableHead>Rôle</TableHead>\n                <TableHead>Date d'inscription</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredUsers.map((user: User) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      {user.profileImageUrl && (\n                        <img\n                          src={user.profileImageUrl}\n                          alt={`${user.firstName} ${user.lastName}`}\n                          className=\"w-8 h-8 rounded-full object-cover\"\n                        />\n                      )}\n                      <div>\n                        <div className=\"font-medium\">\n                          {user.firstName} {user.lastName}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          ID: {user.id}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                      {user.email || \"Non défini\"}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                      {user.phone || \"Non défini\"}\n                    </div>\n                  </TableCell>\n                  <TableCell>{getRoleBadge(user.role || \"candidate\")}</TableCell>\n                  <TableCell>\n                    {user.createdAt \n                      ? new Date(user.createdAt).toLocaleDateString(\"fr-FR\")\n                      : \"Non défini\"\n                    }\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(user)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(user)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Edit User Dialog */}\n      <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Modifier l'utilisateur</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleUpdate)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prénom</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Téléphone</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rôle</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"candidate\">Candidat</SelectItem>\n                        <SelectItem value=\"recruiter\">Recruteur</SelectItem>\n                        <SelectItem value=\"hr\">RH</SelectItem>\n                        <SelectItem value=\"admin\">Administrateur</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditingUser(null)}\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateUserMutation.isPending}\n                >\n                  {updateUserMutation.isPending ? \"Sauvegarde...\" : \"Sauvegarder\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create User Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Ajouter un nouvel utilisateur</DialogTitle>\n          </DialogHeader>\n          <Form {...createForm}>\n            <form onSubmit={createForm.handleSubmit(handleCreate)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prénom *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-create-firstname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-create-lastname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={createForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email *</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-create-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Téléphone</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-create-phone\" placeholder=\"Ex: +33 1 23 45 67 89\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mot de passe temporaire *</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" {...field} data-testid=\"input-create-password\" placeholder=\"Minimum 6 caractères\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rôle *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-create-role\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"candidate\">Candidat</SelectItem>\n                        <SelectItem value=\"recruiter\">Recruteur</SelectItem>\n                        <SelectItem value=\"hr\">RH</SelectItem>\n                        <SelectItem value=\"admin\">Administrateur</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  <strong>Note :</strong> L'utilisateur recevra ses informations de connexion par email et devra modifier son mot de passe lors de sa première connexion.\n                </p>\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowCreateDialog(false);\n                    createForm.reset();\n                  }}\n                  data-testid=\"button-cancel-create\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createUserMutation.isPending}\n                  data-testid=\"button-submit-create\"\n                >\n                  {createUserMutation.isPending ? \"Création...\" : \"Créer l'utilisateur\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22765},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configuration pour utiliser la base de données de développement en production\n// NOTE: Ceci fait pointer la production vers la même DB que le développement\nconst DATABASE_URL = process.env.DATABASE_URL;\nconsole.log(`Using database: ${DATABASE_URL.substring(0, 50)}...`);\n\nexport const pool = new Pool({ connectionString: DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":749},"client/src/pages/EmployeeManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Users,\n  Star,\n  BookOpen,\n  AlertTriangle,\n  FileText,\n  Clock,\n  Plus,\n  Edit,\n  Eye,\n  Calendar,\n  Award,\n  TrendingUp,\n  Download,\n  Upload,\n  UserCheck,\n  Timer\n} from \"lucide-react\";\n\n// Performance Review Component\nfunction PerformanceReviews() {\n  const [selectedEmployee, setSelectedEmployee] = useState<string>(\"\");\n  const [reviewData, setReviewData] = useState({\n    reviewPeriod: \"\",\n    reviewType: \"annual\",\n    overallRating: 3,\n    goals: \"\",\n    achievements: \"\",\n    areasForImprovement: \"\",\n    developmentPlan: \"\",\n    managerComments: \"\",\n    employeeComments: \"\",\n    reviewDate: new Date().toISOString().split('T')[0]\n  });\n\n  const { data: employees = [] } = useQuery({\n    queryKey: [\"/api/employees\"]\n  });\n\n  const { data: reviews = [] } = useQuery({\n    queryKey: [\"/api/performance-reviews\"]\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createReviewMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/performance-reviews\", {\n        employeeId: parseInt(selectedEmployee),\n        ...reviewData,\n        reviewDate: new Date(reviewData.reviewDate)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Évaluation créée\",\n        description: \"L'évaluation de performance a été créée avec succès.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/performance-reviews\"] });\n      setSelectedEmployee(\"\");\n      setReviewData({\n        reviewPeriod: \"\",\n        reviewType: \"annual\",\n        overallRating: 3,\n        goals: \"\",\n        achievements: \"\",\n        areasForImprovement: \"\",\n        developmentPlan: \"\",\n        managerComments: \"\",\n        employeeComments: \"\",\n        reviewDate: new Date().toISOString().split('T')[0]\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer l'évaluation.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Évaluations de Performance</h3>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-performance-review\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouvelle évaluation\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Créer une évaluation de performance</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 max-h-[70vh] overflow-y-auto\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"employee\">Employé</Label>\n                  <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>\n                    <SelectTrigger data-testid=\"select-employee\">\n                      <SelectValue placeholder=\"Sélectionner un employé\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {employees.map((emp: any) => (\n                        <SelectItem key={emp.id} value={emp.id.toString()}>\n                          {emp.firstName} {emp.lastName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"reviewPeriod\">Période d'évaluation</Label>\n                  <Input\n                    id=\"reviewPeriod\"\n                    placeholder=\"Ex: Q1 2024, Annuel 2024\"\n                    value={reviewData.reviewPeriod}\n                    onChange={(e) => setReviewData({ ...reviewData, reviewPeriod: e.target.value })}\n                    data-testid=\"input-review-period\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"reviewType\">Type d'évaluation</Label>\n                  <Select value={reviewData.reviewType} onValueChange={(value) => setReviewData({ ...reviewData, reviewType: value })}>\n                    <SelectTrigger data-testid=\"select-review-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"annual\">Annuelle</SelectItem>\n                      <SelectItem value=\"quarterly\">Trimestrielle</SelectItem>\n                      <SelectItem value=\"probation\">Période d'essai</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"overallRating\">Note globale (1-5)</Label>\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"range\"\n                      min=\"1\"\n                      max=\"5\"\n                      step=\"1\"\n                      value={reviewData.overallRating}\n                      onChange={(e) => setReviewData({ ...reviewData, overallRating: parseInt(e.target.value) })}\n                      className=\"w-full\"\n                      data-testid=\"slider-overall-rating\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>1</span>\n                      <span className=\"font-semibold\">{reviewData.overallRating}</span>\n                      <span>5</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"goals\">Objectifs</Label>\n                <Textarea\n                  id=\"goals\"\n                  placeholder=\"Objectifs pour la période évaluée...\"\n                  value={reviewData.goals}\n                  onChange={(e) => setReviewData({ ...reviewData, goals: e.target.value })}\n                  data-testid=\"textarea-goals\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"achievements\">Réalisations</Label>\n                <Textarea\n                  id=\"achievements\"\n                  placeholder=\"Principales réalisations...\"\n                  value={reviewData.achievements}\n                  onChange={(e) => setReviewData({ ...reviewData, achievements: e.target.value })}\n                  data-testid=\"textarea-achievements\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"improvements\">Domaines d'amélioration</Label>\n                <Textarea\n                  id=\"improvements\"\n                  placeholder=\"Points à améliorer...\"\n                  value={reviewData.areasForImprovement}\n                  onChange={(e) => setReviewData({ ...reviewData, areasForImprovement: e.target.value })}\n                  data-testid=\"textarea-improvements\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"developmentPlan\">Plan de développement</Label>\n                <Textarea\n                  id=\"developmentPlan\"\n                  placeholder=\"Plan de développement professionnel...\"\n                  value={reviewData.developmentPlan}\n                  onChange={(e) => setReviewData({ ...reviewData, developmentPlan: e.target.value })}\n                  data-testid=\"textarea-development-plan\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"managerComments\">Commentaires du manager</Label>\n                <Textarea\n                  id=\"managerComments\"\n                  placeholder=\"Commentaires et feedback du manager...\"\n                  value={reviewData.managerComments}\n                  onChange={(e) => setReviewData({ ...reviewData, managerComments: e.target.value })}\n                  data-testid=\"textarea-manager-comments\"\n                />\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={() => createReviewMutation.mutate()}\n                  disabled={createReviewMutation.isPending || !selectedEmployee}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-performance-review\"\n                >\n                  {createReviewMutation.isPending ? \"Création...\" : \"Créer l'évaluation\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {reviews.map((review: any) => (\n          <Card key={review.id}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <h4 className=\"font-medium\">{review.employee?.firstName} {review.employee?.lastName}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{review.reviewPeriod}</p>\n                </div>\n                <Badge variant=\"outline\">\n                  {Array.from({ length: review.overallRating }, (_, i) => (\n                    <Star key={i} className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </Badge>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"text-sm\">\n                  <span className=\"text-muted-foreground\">Type: </span>\n                  {review.reviewType === \"annual\" ? \"Annuelle\" : \n                   review.reviewType === \"quarterly\" ? \"Trimestrielle\" : \"Période d'essai\"}\n                </div>\n                <div className=\"text-sm\">\n                  <span className=\"text-muted-foreground\">Statut: </span>\n                  <Badge className={review.status === \"completed\" ? \"bg-green-100 text-green-800\" : \"bg-yellow-100 text-yellow-800\"}>\n                    {review.status === \"completed\" ? \"Terminé\" : \n                     review.status === \"acknowledged\" ? \"Validé\" : \"Brouillon\"}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {reviews.length === 0 && (\n        <Card className=\"p-8 text-center\">\n          <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"font-semibold mb-2\">Aucune évaluation</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Commencez par créer une évaluation de performance.\n          </p>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Training Management Component  \nfunction TrainingManagement() {\n  const [programData, setProgramData] = useState({\n    name: \"\",\n    description: \"\",\n    category: \"\",\n    duration: \"\",\n    isRequired: false,\n    provider: \"\",\n    cost: \"\"\n  });\n\n  const { data: programs = [] } = useQuery({\n    queryKey: [\"/api/training-programs\"]\n  });\n\n  const { data: trainings = [] } = useQuery({\n    queryKey: [\"/api/employee-training\"]\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createProgramMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/training-programs\", {\n        ...programData,\n        duration: parseInt(programData.duration) || null\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Programme créé\",\n        description: \"Le programme de formation a été créé avec succès.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/training-programs\"] });\n      setProgramData({\n        name: \"\",\n        description: \"\",\n        category: \"\",\n        duration: \"\",\n        isRequired: false,\n        provider: \"\",\n        cost: \"\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer le programme.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Gestion des Formations</h3>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-training-program\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouveau programme\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Créer un programme de formation</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Nom du programme</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"Ex: Formation sécurité aéroportuaire\"\n                  value={programData.name}\n                  onChange={(e) => setProgramData({ ...programData, name: e.target.value })}\n                  data-testid=\"input-program-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Description détaillée du programme...\"\n                  value={programData.description}\n                  onChange={(e) => setProgramData({ ...programData, description: e.target.value })}\n                  data-testid=\"textarea-program-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"category\">Catégorie</Label>\n                  <Select value={programData.category} onValueChange={(value) => setProgramData({ ...programData, category: value })}>\n                    <SelectTrigger data-testid=\"select-program-category\">\n                      <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"safety\">Sécurité</SelectItem>\n                      <SelectItem value=\"technical\">Technique</SelectItem>\n                      <SelectItem value=\"compliance\">Conformité</SelectItem>\n                      <SelectItem value=\"leadership\">Leadership</SelectItem>\n                      <SelectItem value=\"customer_service\">Service client</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"duration\">Durée (heures)</Label>\n                  <Input\n                    id=\"duration\"\n                    type=\"number\"\n                    placeholder=\"Ex: 8\"\n                    value={programData.duration}\n                    onChange={(e) => setProgramData({ ...programData, duration: e.target.value })}\n                    data-testid=\"input-program-duration\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"provider\">Formateur/Organisme</Label>\n                  <Input\n                    id=\"provider\"\n                    placeholder=\"Ex: Centre de formation XYZ\"\n                    value={programData.provider}\n                    onChange={(e) => setProgramData({ ...programData, provider: e.target.value })}\n                    data-testid=\"input-program-provider\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cost\">Coût</Label>\n                  <Input\n                    id=\"cost\"\n                    placeholder=\"Ex: 500€\"\n                    value={programData.cost}\n                    onChange={(e) => setProgramData({ ...programData, cost: e.target.value })}\n                    data-testid=\"input-program-cost\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isRequired\"\n                  checked={programData.isRequired}\n                  onChange={(e) => setProgramData({ ...programData, isRequired: e.target.checked })}\n                  data-testid=\"checkbox-program-required\"\n                />\n                <Label htmlFor=\"isRequired\">Formation obligatoire</Label>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={() => createProgramMutation.mutate()}\n                  disabled={createProgramMutation.isPending || !programData.name}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-training-program\"\n                >\n                  {createProgramMutation.isPending ? \"Création...\" : \"Créer le programme\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {programs.map((program: any) => (\n          <Card key={program.id}>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start\">\n                  <h4 className=\"font-medium\">{program.name}</h4>\n                  {program.isRequired && (\n                    <Badge className=\"bg-red-100 text-red-800\">Obligatoire</Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                  {program.description}\n                </p>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Durée: {program.duration}h</span>\n                  <span className=\"text-muted-foreground\">Coût: {program.cost}</span>\n                </div>\n                <div className=\"text-sm\">\n                  <span className=\"text-muted-foreground\">Catégorie: </span>\n                  <Badge variant=\"outline\">{program.category}</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {programs.length === 0 && (\n        <Card className=\"p-8 text-center\">\n          <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"font-semibold mb-2\">Aucun programme de formation</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Créez votre premier programme de formation.\n          </p>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Time Tracking Component\nfunction TimeTracking() {\n  const [timeEntry, setTimeEntry] = useState({\n    employeeId: \"\",\n    entryDate: new Date().toISOString().split('T')[0],\n    clockIn: \"\",\n    clockOut: \"\",\n    breakStart: \"\",\n    breakEnd: \"\",\n    notes: \"\"\n  });\n\n  const { data: employees = [] } = useQuery({\n    queryKey: [\"/api/employees\"]\n  });\n\n  const { data: timeEntries = [] } = useQuery({\n    queryKey: [\"/api/time-entries\"]\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createEntryMutation = useMutation({\n    mutationFn: async () => {\n      // Calculate total hours\n      const clockIn = new Date(`${timeEntry.entryDate}T${timeEntry.clockIn}`);\n      const clockOut = new Date(`${timeEntry.entryDate}T${timeEntry.clockOut}`);\n      const breakTime = timeEntry.breakStart && timeEntry.breakEnd ? \n        (new Date(`${timeEntry.entryDate}T${timeEntry.breakEnd}`) - new Date(`${timeEntry.entryDate}T${timeEntry.breakStart}`)) / (1000 * 60) : 0;\n      \n      const totalMinutes = (clockOut - clockIn) / (1000 * 60) - breakTime;\n      const hours = Math.floor(totalMinutes / 60);\n      const minutes = Math.floor(totalMinutes % 60);\n      const totalHours = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n\n      await apiRequest(\"POST\", \"/api/time-entries\", {\n        ...timeEntry,\n        employeeId: parseInt(timeEntry.employeeId),\n        entryDate: new Date(timeEntry.entryDate),\n        clockIn: clockIn,\n        clockOut: clockOut,\n        breakStart: timeEntry.breakStart ? new Date(`${timeEntry.entryDate}T${timeEntry.breakStart}`) : null,\n        breakEnd: timeEntry.breakEnd ? new Date(`${timeEntry.entryDate}T${timeEntry.breakEnd}`) : null,\n        totalHours\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Temps enregistré\",\n        description: \"L'entrée de temps a été enregistrée avec succès.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/time-entries\"] });\n      setTimeEntry({\n        employeeId: \"\",\n        entryDate: new Date().toISOString().split('T')[0],\n        clockIn: \"\",\n        clockOut: \"\",\n        breakStart: \"\",\n        breakEnd: \"\",\n        notes: \"\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'enregistrer le temps.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Pointage et Suivi du Temps</h3>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-time-entry\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouvelle entrée\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Enregistrer le temps de travail</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"employee\">Employé</Label>\n                  <Select value={timeEntry.employeeId} onValueChange={(value) => setTimeEntry({ ...timeEntry, employeeId: value })}>\n                    <SelectTrigger data-testid=\"select-time-entry-employee\">\n                      <SelectValue placeholder=\"Sélectionner un employé\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {employees.map((emp: any) => (\n                        <SelectItem key={emp.id} value={emp.id.toString()}>\n                          {emp.firstName} {emp.lastName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"entryDate\">Date</Label>\n                  <Input\n                    id=\"entryDate\"\n                    type=\"date\"\n                    value={timeEntry.entryDate}\n                    onChange={(e) => setTimeEntry({ ...timeEntry, entryDate: e.target.value })}\n                    data-testid=\"input-entry-date\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"clockIn\">Heure d'arrivée</Label>\n                  <Input\n                    id=\"clockIn\"\n                    type=\"time\"\n                    value={timeEntry.clockIn}\n                    onChange={(e) => setTimeEntry({ ...timeEntry, clockIn: e.target.value })}\n                    data-testid=\"input-clock-in\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"clockOut\">Heure de départ</Label>\n                  <Input\n                    id=\"clockOut\"\n                    type=\"time\"\n                    value={timeEntry.clockOut}\n                    onChange={(e) => setTimeEntry({ ...timeEntry, clockOut: e.target.value })}\n                    data-testid=\"input-clock-out\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"breakStart\">Début pause</Label>\n                  <Input\n                    id=\"breakStart\"\n                    type=\"time\"\n                    value={timeEntry.breakStart}\n                    onChange={(e) => setTimeEntry({ ...timeEntry, breakStart: e.target.value })}\n                    data-testid=\"input-break-start\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"breakEnd\">Fin pause</Label>\n                  <Input\n                    id=\"breakEnd\"\n                    type=\"time\"\n                    value={timeEntry.breakEnd}\n                    onChange={(e) => setTimeEntry({ ...timeEntry, breakEnd: e.target.value })}\n                    data-testid=\"input-break-end\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Notes optionnelles...\"\n                  value={timeEntry.notes}\n                  onChange={(e) => setTimeEntry({ ...timeEntry, notes: e.target.value })}\n                  data-testid=\"textarea-time-entry-notes\"\n                />\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={() => createEntryMutation.mutate()}\n                  disabled={createEntryMutation.isPending || !timeEntry.employeeId || !timeEntry.clockIn || !timeEntry.clockOut}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-time-entry\"\n                >\n                  {createEntryMutation.isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {timeEntries.slice(0, 10).map((entry: any) => (\n          <Card key={entry.id}>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start\">\n                  <h4 className=\"font-medium\">{entry.employee?.firstName} {entry.employee?.lastName}</h4>\n                  <Badge className={entry.status === \"approved\" ? \"bg-green-100 text-green-800\" : \"bg-yellow-100 text-yellow-800\"}>\n                    {entry.status === \"approved\" ? \"Approuvé\" : \n                     entry.status === \"rejected\" ? \"Rejeté\" : \"En attente\"}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {new Date(entry.entryDate).toLocaleDateString('fr-FR')}\n                </p>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Arrivée:</span>\n                    <span>{entry.clockIn ? new Date(entry.clockIn).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }) : '-'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Départ:</span>\n                    <span>{entry.clockOut ? new Date(entry.clockOut).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }) : '-'}</span>\n                  </div>\n                  <div className=\"flex justify-between font-medium\">\n                    <span>Total:</span>\n                    <span>{entry.totalHours || '-'}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {timeEntries.length === 0 && (\n        <Card className=\"p-8 text-center\">\n          <Timer className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"font-semibold mb-2\">Aucune entrée de temps</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Commencez à enregistrer le temps de travail.\n          </p>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nexport default function EmployeeManagement() {\n  const { user } = useAuth();\n\n  if (!user || (user as any).role !== \"admin\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"p-8 text-center\">\n          <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold mb-2\">Accès restreint</h2>\n          <p className=\"text-muted-foreground\">\n            Seuls les administrateurs peuvent accéder à cette section.\n          </p>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-gradient-to-r from-blue-600 to-green-600\">\n              <Users className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Gestion Complète des Employés\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Performance, formations, pointage et développement professionnel\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Tabs */}\n        <Tabs defaultValue=\"performance\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              Performance\n            </TabsTrigger>\n            <TabsTrigger value=\"training\" data-testid=\"tab-training\">\n              <BookOpen className=\"h-4 w-4 mr-2\" />\n              Formations\n            </TabsTrigger>\n            <TabsTrigger value=\"time\" data-testid=\"tab-time\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Pointage\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"performance\" className=\"mt-6\">\n            <PerformanceReviews />\n          </TabsContent>\n\n          <TabsContent value=\"training\" className=\"mt-6\">\n            <TrainingManagement />\n          </TabsContent>\n\n          <TabsContent value=\"time\" className=\"mt-6\">\n            <TimeTracking />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":31361},"client/src/pages/InterviewManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Calendar,\n  Clock,\n  User,\n  Star,\n  MessageSquare,\n  Phone,\n  Video,\n  Building,\n  ChevronRight,\n  CheckCircle,\n  XCircle,\n  Users,\n  ClipboardCheck\n} from \"lucide-react\";\n\ninterface Interview {\n  id: number;\n  candidateId: string;\n  applicationId: number;\n  interviewerId: string;\n  interviewType: string;\n  scheduledDateTime: string;\n  duration: number;\n  location?: string;\n  meetingLink?: string;\n  status: string;\n  notes?: string;\n  createdAt: string;\n  application?: {\n    id: number;\n    candidateName: string;\n    jobTitle: string;\n  };\n}\n\ninterface InterviewEvaluation {\n  id: number;\n  interviewId: number;\n  criteriaName: string;\n  score: number;\n  maxScore: number;\n  comments?: string;\n}\n\ninterface InterviewFeedback {\n  id: number;\n  interviewId: number;\n  overallScore: number;\n  recommendation: string;\n  strengths?: string;\n  weaknesses?: string;\n  detailedFeedback?: string;\n  culturalFit?: number;\n  technicalCompetency?: number;\n  communicationSkills?: number;\n  problemSolving?: number;\n}\n\nfunction InterviewCard({ interview, onOpenEvaluation }: { interview: Interview; onOpenEvaluation: (interview: Interview) => void }) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-100 text-blue-800\";\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"cancelled\": return \"bg-red-100 text-red-800\";\n      case \"no_show\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"phone\": return <Phone className=\"h-4 w-4\" />;\n      case \"video\": return <Video className=\"h-4 w-4\" />;\n      case \"onsite\": return <Building className=\"h-4 w-4\" />;\n      case \"technical\": return <ClipboardCheck className=\"h-4 w-4\" />;\n      default: return <User className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-lg mb-1\">\n              {interview.application?.candidateName || `Candidat ${interview.candidateId}`}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {interview.application?.jobTitle || \"Poste non spécifié\"}\n            </p>\n          </div>\n          <Badge className={getStatusColor(interview.status)}>\n            {interview.status === \"scheduled\" ? \"Planifié\" :\n             interview.status === \"completed\" ? \"Terminé\" :\n             interview.status === \"cancelled\" ? \"Annulé\" : \"Absent\"}\n          </Badge>\n        </div>\n\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            {getTypeIcon(interview.interviewType)}\n            <span className=\"capitalize\">{interview.interviewType}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{new Date(interview.scheduledDateTime).toLocaleDateString('fr-FR')}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{new Date(interview.scheduledDateTime).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</span>\n            <span>({interview.duration} min)</span>\n          </div>\n          {interview.location && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Building className=\"h-4 w-4\" />\n              <span>{interview.location}</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => onOpenEvaluation(interview)}\n            disabled={interview.status !== \"completed\"}\n            className=\"flex-1\"\n            data-testid={`button-evaluate-${interview.id}`}\n          >\n            <Star className=\"h-4 w-4 mr-2\" />\n            {interview.status === \"completed\" ? \"Évaluer\" : \"En attente\"}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction InterviewEvaluationForm({ interview, onClose }: { interview: Interview; onClose: () => void }) {\n  const [evaluations, setEvaluations] = useState([\n    { criteriaName: \"Compétences techniques\", score: 5, comments: \"\" },\n    { criteriaName: \"Communication\", score: 5, comments: \"\" },\n    { criteriaName: \"Résolution de problèmes\", score: 5, comments: \"\" },\n    { criteriaName: \"Adaptation culturelle\", score: 5, comments: \"\" },\n    { criteriaName: \"Motivation\", score: 5, comments: \"\" }\n  ]);\n  \n  const [feedback, setFeedback] = useState({\n    recommendation: \"hire\",\n    strengths: \"\",\n    weaknesses: \"\",\n    detailedFeedback: \"\",\n    culturalFit: 5,\n    technicalCompetency: 5,\n    communicationSkills: 5,\n    problemSolving: 5\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const saveEvaluationMutation = useMutation({\n    mutationFn: async () => {\n      // Calculate overall score based on evaluations\n      const overallScore = Math.round(\n        evaluations.reduce((sum, evaluation) => sum + evaluation.score, 0) / evaluations.length * 10\n      );\n\n      // Save evaluations\n      for (const evaluation of evaluations) {\n        await apiRequest(\"POST\", \"/api/interviews/evaluations\", {\n          interviewId: interview.id,\n          criteriaName: evaluation.criteriaName,\n          score: evaluation.score,\n          maxScore: 10,\n          comments: evaluation.comments\n        });\n      }\n\n      // Save overall feedback\n      await apiRequest(\"POST\", \"/api/interviews/feedback\", {\n        interviewId: interview.id,\n        overallScore,\n        ...feedback\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Évaluation sauvegardée\",\n        description: \"L'évaluation de l'interview a été enregistrée avec succès.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/interviews\"] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de sauvegarder l'évaluation.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateEvaluation = (index: number, field: string, value: any) => {\n    const newEvaluations = [...evaluations];\n    newEvaluations[index] = { ...newEvaluations[index], [field]: value };\n    setEvaluations(newEvaluations);\n  };\n\n  const overallScore = Math.round(\n    evaluations.reduce((sum, evaluation) => sum + evaluation.score, 0) / evaluations.length * 10\n  );\n\n  return (\n    <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h3 className=\"font-semibold mb-2\">Informations de l'interview</h3>\n        <p><strong>Candidat:</strong> {interview.application?.candidateName || interview.candidateId}</p>\n        <p><strong>Poste:</strong> {interview.application?.jobTitle}</p>\n        <p><strong>Type:</strong> {interview.interviewType}</p>\n        <p><strong>Date:</strong> {new Date(interview.scheduledDateTime).toLocaleDateString('fr-FR')}</p>\n      </div>\n\n      <div>\n        <h3 className=\"font-semibold mb-4\">Évaluation par critères</h3>\n        <div className=\"space-y-4\">\n          {evaluations.map((evaluation, index) => (\n            <Card key={evaluation.criteriaName}>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"font-medium\">{evaluation.criteriaName}</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {evaluation.score}/10\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"range\"\n                      min=\"1\"\n                      max=\"10\"\n                      step=\"1\"\n                      value={evaluation.score}\n                      onChange={(e) => updateEvaluation(index, \"score\", parseInt(e.target.value))}\n                      className=\"w-full\"\n                      data-testid={`slider-${evaluation.criteriaName.toLowerCase().replace(/\\s+/g, '-')}`}\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Insuffisant</span>\n                      <span>Excellent</span>\n                    </div>\n                  </div>\n                  \n                  <Textarea\n                    placeholder={`Commentaires sur ${evaluation.criteriaName.toLowerCase()}...`}\n                    value={evaluation.comments}\n                    onChange={(e) => updateEvaluation(index, \"comments\", e.target.value)}\n                    data-testid={`textarea-${evaluation.criteriaName.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"font-semibold mb-4\">Score global</h3>\n        <div className=\"bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">{overallScore}/100</div>\n            <Progress value={overallScore} className=\"h-3 mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Calculé automatiquement à partir des critères d'évaluation\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"font-semibold mb-4\">Recommandation finale</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"recommendation\">Recommandation</Label>\n            <Select\n              value={feedback.recommendation}\n              onValueChange={(value) => setFeedback({ ...feedback, recommendation: value })}\n            >\n              <SelectTrigger data-testid=\"select-recommendation\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hire\">Recommander l'embauche</SelectItem>\n                <SelectItem value=\"second_interview\">Deuxième entretien</SelectItem>\n                <SelectItem value=\"reject\">Ne pas retenir</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"strengths\">Points forts</Label>\n            <Textarea\n              id=\"strengths\"\n              placeholder=\"Décrivez les principales forces du candidat...\"\n              value={feedback.strengths}\n              onChange={(e) => setFeedback({ ...feedback, strengths: e.target.value })}\n              data-testid=\"textarea-strengths\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"weaknesses\">Points d'amélioration</Label>\n            <Textarea\n              id=\"weaknesses\"\n              placeholder=\"Identifiez les domaines d'amélioration...\"\n              value={feedback.weaknesses}\n              onChange={(e) => setFeedback({ ...feedback, weaknesses: e.target.value })}\n              data-testid=\"textarea-weaknesses\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"detailed-feedback\">Commentaire détaillé</Label>\n            <Textarea\n              id=\"detailed-feedback\"\n              placeholder=\"Feedback détaillé sur l'entretien...\"\n              value={feedback.detailedFeedback}\n              onChange={(e) => setFeedback({ ...feedback, detailedFeedback: e.target.value })}\n              rows={4}\n              data-testid=\"textarea-detailed-feedback\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex gap-2 pt-4 border-t\">\n        <Button\n          variant=\"outline\"\n          onClick={onClose}\n          className=\"flex-1\"\n          data-testid=\"button-cancel-evaluation\"\n        >\n          Annuler\n        </Button>\n        <Button\n          onClick={() => saveEvaluationMutation.mutate()}\n          disabled={saveEvaluationMutation.isPending}\n          className=\"flex-1\"\n          data-testid=\"button-save-evaluation\"\n        >\n          {saveEvaluationMutation.isPending ? \"Sauvegarde...\" : \"Sauvegarder l'évaluation\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function InterviewManagement() {\n  const [selectedInterview, setSelectedInterview] = useState<Interview | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  \n  const { user } = useAuth();\n\n  const { data: interviews = [], isLoading } = useQuery({\n    queryKey: [\"/api/interviews\"],\n    enabled: !!user\n  });\n\n  const filteredInterviews = interviews.filter((interview: Interview) => {\n    if (statusFilter !== \"all\" && interview.status !== statusFilter) return false;\n    if (typeFilter !== \"all\" && interview.interviewType !== typeFilter) return false;\n    return true;\n  });\n\n  const stats = {\n    total: interviews.length,\n    scheduled: interviews.filter((i: Interview) => i.status === \"scheduled\").length,\n    completed: interviews.filter((i: Interview) => i.status === \"completed\").length,\n    pending_evaluation: interviews.filter((i: Interview) => i.status === \"completed\").length // À améliorer avec vraie logique\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 rounded-full bg-gradient-to-r from-blue-600 to-green-600\">\n              <Users className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Gestion des Entretiens\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Planifiez et évaluez les entretiens candidats\n              </p>\n            </div>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total</p>\n                    <p className=\"text-2xl font-bold\">{stats.total}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5 text-orange-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Planifiés</p>\n                    <p className=\"text-2xl font-bold\">{stats.scheduled}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Terminés</p>\n                    <p className=\"text-2xl font-bold\">{stats.completed}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Star className=\"h-5 w-5 text-yellow-600\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">À évaluer</p>\n                    <p className=\"text-2xl font-bold\">{stats.pending_evaluation}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filtrer par statut\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tous les statuts</SelectItem>\n                <SelectItem value=\"scheduled\">Planifiés</SelectItem>\n                <SelectItem value=\"completed\">Terminés</SelectItem>\n                <SelectItem value=\"cancelled\">Annulés</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-type-filter\">\n                <SelectValue placeholder=\"Filtrer par type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tous les types</SelectItem>\n                <SelectItem value=\"phone\">Téléphone</SelectItem>\n                <SelectItem value=\"video\">Visio</SelectItem>\n                <SelectItem value=\"onsite\">Sur site</SelectItem>\n                <SelectItem value=\"technical\">Technique</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Interviews List */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredInterviews.map((interview: Interview) => (\n            <InterviewCard\n              key={interview.id}\n              interview={interview}\n              onOpenEvaluation={setSelectedInterview}\n            />\n          ))}\n        </div>\n\n        {filteredInterviews.length === 0 && (\n          <Card className=\"p-8 text-center\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <Users className=\"h-12 w-12 text-muted-foreground\" />\n              <div>\n                <h3 className=\"font-semibold mb-2\">Aucun entretien trouvé</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Aucun entretien ne correspond aux filtres sélectionnés.\n                </p>\n              </div>\n            </div>\n          </Card>\n        )}\n\n        {/* Evaluation Dialog */}\n        <Dialog open={!!selectedInterview} onOpenChange={() => setSelectedInterview(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Évaluation de l'entretien</DialogTitle>\n            </DialogHeader>\n            {selectedInterview && (\n              <InterviewEvaluationForm\n                interview={selectedInterview}\n                onClose={() => setSelectedInterview(null)}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":20214},"client/src/pages/CandidateInvitationHandler.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Mail, \n  CheckCircle, \n  AlertCircle, \n  Clock, \n  User, \n  Briefcase,\n  Calendar\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nexport default function CandidateInvitationHandler() {\n  const [, params] = useRoute(\"/candidate-invitation/:token\");\n  const { toast } = useToast();\n  const [invitationProcessed, setInvitationProcessed] = useState(false);\n  \n  const { data: invitation, isLoading, error } = useQuery({\n    queryKey: [`/api/candidate-invitation/${params?.token}`],\n    enabled: !!params?.token,\n    retry: false,\n  });\n\n  const { data: job } = useQuery({\n    queryKey: [`/api/jobs/${invitation?.jobId}`],\n    enabled: !!invitation?.jobId,\n  });\n\n  useEffect(() => {\n    if (invitation && !invitationProcessed) {\n      toast({\n        title: \"Invitation trouvée\",\n        description: `Bienvenue ${invitation.firstName || 'candidat'} ! Votre invitation est valide.`,\n      });\n      setInvitationProcessed(true);\n    }\n  }, [invitation, invitationProcessed, toast]);\n\n  const handleAcceptInvitation = () => {\n    // Rediriger vers la connexion avec le token\n    window.location.href = `/api/login?invitation_token=${params?.token}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">Vérification de votre invitation...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !invitation) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-2\" />\n            <CardTitle className=\"text-red-700\">Invitation non trouvée</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              Cette invitation n'existe pas ou a expiré.\n            </p>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-return-home\"\n            >\n              Retour à l'accueil\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const isExpired = new Date() > new Date(invitation.expiresAt);\n\n  if (isExpired) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-100 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <Clock className=\"h-12 w-12 text-orange-500 mx-auto mb-2\" />\n            <CardTitle className=\"text-orange-700\">Invitation expirée</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              Cette invitation a expiré le {new Date(invitation.expiresAt).toLocaleDateString('fr-FR')}.\n            </p>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Veuillez contacter le recruteur pour obtenir une nouvelle invitation.\n            </p>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-return-home-expired\"\n            >\n              Retour à l'accueil\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* En-tête avec branding */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Briefcase className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">AeroRecrutement</h1>\n            </div>\n            <p className=\"text-gray-600\">Plateforme de Recrutement Aéroportuaire</p>\n          </div>\n\n          {/* Carte d'invitation */}\n          <Card className=\"mb-6\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"bg-green-100 p-3 rounded-full\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl text-green-700\">\n                Invitation Valide\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                Vous avez été invité(e) à postuler pour un poste\n              </p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Informations du candidat */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-2 flex items-center\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Candidat\n                </h3>\n                <p className=\"text-lg font-medium\">\n                  {invitation.firstName} {invitation.lastName}\n                </p>\n                <p className=\"text-muted-foreground\">{invitation.email}</p>\n              </div>\n\n              {/* Informations du poste */}\n              {job && (\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Briefcase className=\"h-4 w-4 mr-2\" />\n                    Poste proposé\n                  </h3>\n                  <p className=\"text-lg font-medium\">{job.title}</p>\n                  <p className=\"text-muted-foreground\">{job.company} - {job.location}</p>\n                  <Badge variant=\"outline\" className=\"mt-2\">\n                    {job.contractType}\n                  </Badge>\n                </div>\n              )}\n\n              {/* Message personnel */}\n              {invitation.personalMessage && (\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold mb-2 flex items-center\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Message du recruteur\n                  </h3>\n                  <p className=\"text-gray-700 italic\">\"{invitation.personalMessage}\"</p>\n                </div>\n              )}\n\n              {/* Informations sur l'expiration */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-2 flex items-center\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Validité de l'invitation\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  Cette invitation expire {formatDistanceToNow(new Date(invitation.expiresAt), { \n                    addSuffix: true, \n                    locale: fr \n                  })}\n                </p>\n              </div>\n\n              {/* Action principale */}\n              <div className=\"text-center pt-4\">\n                <Button \n                  onClick={handleAcceptInvitation}\n                  className=\"w-full bg-[#1e40af] hover:bg-[#1d4ed8] text-white py-3 text-lg\"\n                  data-testid=\"button-accept-invitation\"\n                >\n                  <CheckCircle className=\"h-5 w-5 mr-2\" />\n                  Accéder à mon espace candidat\n                </Button>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Vous serez redirigé vers la page de connexion sécurisée\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Informations supplémentaires */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <h3 className=\"font-semibold mb-3\">Prochaines étapes</h3>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Connectez-vous pour accéder à votre espace personnel</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Complétez votre profil et téléchargez vos documents</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                  <p>Suivez le processus de candidature personnalisé</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9615},"client/src/pages/CandidateInvitations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Mail, \n  Plus, \n  Calendar, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  Eye,\n  Copy,\n  Send\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\nexport default function CandidateInvitations() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedJob, setSelectedJob] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [personalMessage, setPersonalMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: invitations = [], isLoading } = useQuery({\n    queryKey: [\"/api/candidate-invitations\"],\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [\"/api/admin/jobs\"],\n  });\n\n  const createInvitationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/candidate-invitations\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidate-invitations\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Invitation envoyée\",\n        description: \"L'invitation candidat a été créée avec succès\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer l'invitation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedJob(\"\");\n    setEmail(\"\");\n    setFirstName(\"\");\n    setLastName(\"\");\n    setPersonalMessage(\"\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedJob || !email) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createInvitationMutation.mutate({\n      jobId: parseInt(selectedJob),\n      email,\n      firstName,\n      lastName,\n      personalMessage,\n    });\n  };\n\n  const copyInvitationLink = (token: string) => {\n    const link = `${window.location.origin}/candidate-invitation/${token}`;\n    navigator.clipboard.writeText(link);\n    toast({\n      title: \"Lien copié\",\n      description: \"Le lien d'invitation a été copié dans le presse-papiers\",\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return 'bg-blue-100 text-blue-800';\n      case 'opened':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'expired':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    const statusTexts = {\n      sent: 'Envoyée',\n      opened: 'Ouverte',\n      completed: 'Complétée',\n      expired: 'Expirée'\n    };\n    return statusTexts[status as keyof typeof statusTexts] || status;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Invitations Candidats</h1>\n          <p className=\"text-gray-600\">Invitez des candidats présélectionnés à accéder à leur espace personnel</p>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-[#1e40af] hover:bg-[#1d4ed8]\" data-testid=\"button-new-invitation\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouvelle Invitation\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Inviter un Candidat</DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"job\">Poste *</Label>\n                <Select value={selectedJob} onValueChange={setSelectedJob} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner un poste\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {jobs.map((job: any) => (\n                      <SelectItem key={job.id} value={job.id.toString()}>\n                        {job.title} - {job.company}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">Prénom</Label>\n                  <Input \n                    id=\"firstName\"\n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    placeholder=\"Prénom\"\n                    data-testid=\"input-firstname\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Nom</Label>\n                  <Input \n                    id=\"lastName\"\n                    value={lastName}\n                    onChange={(e) => setLastName(e.target.value)}\n                    placeholder=\"Nom\"\n                    data-testid=\"input-lastname\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input \n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"candidat@example.com\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"message\">Message personnel</Label>\n                <Textarea \n                  id=\"message\"\n                  value={personalMessage}\n                  onChange={(e) => setPersonalMessage(e.target.value)}\n                  placeholder=\"Ajoutez un message personnel (optionnel)\"\n                  rows={3}\n                  data-testid=\"textarea-message\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                  Annuler\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createInvitationMutation.isPending}\n                  data-testid=\"button-send-invitation\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {createInvitationMutation.isPending ? 'Envoi...' : 'Envoyer'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistiques */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Invitations</CardTitle>\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{invitations.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Envoyées</CardTitle>\n            <Send className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {invitations.filter((inv: any) => inv.status === 'sent').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ouvertes</CardTitle>\n            <Eye className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {invitations.filter((inv: any) => inv.status === 'opened').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Complétées</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {invitations.filter((inv: any) => inv.status === 'completed').length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Liste des invitations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Historique des Invitations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n              <p className=\"mt-2 text-muted-foreground\">Chargement...</p>\n            </div>\n          ) : invitations.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Mail className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>Aucune invitation envoyée pour le moment</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Candidat</TableHead>\n                  <TableHead>Poste</TableHead>\n                  <TableHead>Statut</TableHead>\n                  <TableHead>Envoyée</TableHead>\n                  <TableHead>Expire</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {invitations.map((invitation: any) => (\n                  <TableRow key={invitation.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">\n                          {invitation.firstName} {invitation.lastName}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">{invitation.email}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <p className=\"text-sm\">{jobs.find((job: any) => job.id === invitation.jobId)?.title}</p>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(invitation.status)}>\n                        {getStatusText(invitation.status)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        {formatDistanceToNow(new Date(invitation.sentAt), { \n                          addSuffix: true, \n                          locale: fr \n                        })}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {formatDistanceToNow(new Date(invitation.expiresAt), { \n                          addSuffix: true, \n                          locale: fr \n                        })}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyInvitationLink(invitation.invitationToken)}\n                        data-testid={`button-copy-${invitation.id}`}\n                      >\n                        <Copy className=\"h-4 w-4 mr-1\" />\n                        Copier le lien\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13376},"client/src/components/ApplicationTimeline.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CheckCircle, \n  Circle, \n  Clock, \n  FileText, \n  UserCheck, \n  MessageSquare, \n  Trophy,\n  AlertCircle,\n  Send\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\ninterface TimelineStep {\n  id: string;\n  title: string;\n  description: string;\n  status: 'completed' | 'current' | 'pending' | 'blocked';\n  date?: string;\n  icon: React.ComponentType<{ className?: string }>;\n}\n\ninterface ApplicationTimelineProps {\n  application: {\n    status: string;\n    createdAt: string;\n    updatedAt: string;\n    cvPath?: string;\n    coverLetter?: string;\n    diplomaPath?: string;\n    autoScore?: number;\n    manualScore?: number;\n  };\n}\n\nexport function ApplicationTimeline({ application }: ApplicationTimelineProps) {\n  const getTimelineSteps = (): TimelineStep[] => {\n    const steps: TimelineStep[] = [\n      {\n        id: 'submitted',\n        title: 'Candidature soumise',\n        description: 'Votre candidature a été reçue et enregistrée',\n        status: 'completed',\n        date: application.createdAt,\n        icon: Send,\n      },\n      {\n        id: 'documents',\n        title: 'Documents vérifiés',\n        description: 'Vérification de vos documents (CV, lettre de motivation, diplômes)',\n        status: application.cvPath ? 'completed' : 'current',\n        date: application.cvPath ? application.updatedAt : undefined,\n        icon: FileText,\n      },\n      {\n        id: 'auto_review',\n        title: 'Évaluation automatique',\n        description: 'Analyse automatique de votre profil et attribution du score',\n        status: application.autoScore ? 'completed' : \n                application.status === 'pending' ? 'current' : 'pending',\n        date: application.autoScore ? application.updatedAt : undefined,\n        icon: Clock,\n      },\n      {\n        id: 'manual_review',\n        title: 'Examen par le recruteur',\n        description: 'Revue détaillée de votre candidature par un expert',\n        status: application.status === 'reviewed' || \n                application.status === 'interview' || \n                application.status === 'accepted' ? 'completed' :\n                application.status === 'pending' && application.autoScore ? 'current' : 'pending',\n        date: application.manualScore ? application.updatedAt : undefined,\n        icon: UserCheck,\n      },\n      {\n        id: 'interview',\n        title: 'Entretien',\n        description: 'Entretien avec l\\'équipe de recrutement',\n        status: application.status === 'interview' || application.status === 'accepted' ? 'completed' :\n                application.status === 'reviewed' ? 'current' : 'pending',\n        icon: MessageSquare,\n      },\n      {\n        id: 'decision',\n        title: 'Décision finale',\n        description: 'Résultat final de votre candidature',\n        status: application.status === 'accepted' ? 'completed' :\n                application.status === 'rejected' ? 'blocked' :\n                application.status === 'interview' ? 'current' : 'pending',\n        date: application.status === 'accepted' || application.status === 'rejected' ? application.updatedAt : undefined,\n        icon: application.status === 'accepted' ? Trophy : \n              application.status === 'rejected' ? AlertCircle : Circle,\n      },\n    ];\n\n    return steps;\n  };\n\n  const steps = getTimelineSteps();\n  const currentStep = steps.find(step => step.status === 'current');\n  const completedSteps = steps.filter(step => step.status === 'completed').length;\n  const progressPercentage = (completedSteps / steps.length) * 100;\n\n  const getStepStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-600 bg-green-100';\n      case 'current':\n        return 'text-blue-600 bg-blue-100';\n      case 'blocked':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-400 bg-gray-100';\n    }\n  };\n\n  const getStepIconColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-600';\n      case 'current':\n        return 'text-blue-600';\n      case 'blocked':\n        return 'text-red-600';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    const statusTexts = {\n      pending: 'En attente',\n      reviewed: 'Examinée',\n      interview: 'Entretien programmé',\n      accepted: 'Acceptée',\n      rejected: 'Refusée'\n    };\n    return statusTexts[status as keyof typeof statusTexts] || status;\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl\">Suivi de votre candidature</CardTitle>\n          <Badge \n            variant=\"outline\" \n            className={application.status === 'accepted' ? 'bg-green-100 text-green-800' :\n                       application.status === 'rejected' ? 'bg-red-100 text-red-800' :\n                       application.status === 'interview' ? 'bg-blue-100 text-blue-800' :\n                       'bg-yellow-100 text-yellow-800'}\n          >\n            {getStatusText(application.status)}\n          </Badge>\n        </div>\n        \n        {/* Barre de progression */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Progression</span>\n            <span>{Math.round(progressPercentage)}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n        </div>\n        \n        {currentStep && (\n          <div className=\"bg-blue-50 p-3 rounded-lg border-l-4 border-blue-500\">\n            <p className=\"text-sm font-medium text-blue-900\">Étape actuelle</p>\n            <p className=\"text-blue-800\">{currentStep.title}</p>\n          </div>\n        )}\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {steps.map((step, index) => {\n            const StepIcon = step.icon;\n            const isLast = index === steps.length - 1;\n            \n            return (\n              <div key={step.id} className=\"relative\">\n                {/* Ligne de connexion */}\n                {!isLast && (\n                  <div \n                    className={`absolute left-6 top-12 w-0.5 h-8 ${\n                      step.status === 'completed' ? 'bg-green-300' : 'bg-gray-200'\n                    }`}\n                  />\n                )}\n                \n                <div className=\"flex items-start space-x-4\">\n                  {/* Icône de l'étape */}\n                  <div className={`\n                    flex items-center justify-center w-12 h-12 rounded-full border-2 \n                    ${step.status === 'completed' ? 'border-green-500 bg-green-50' :\n                      step.status === 'current' ? 'border-blue-500 bg-blue-50' :\n                      step.status === 'blocked' ? 'border-red-500 bg-red-50' :\n                      'border-gray-300 bg-gray-50'}\n                  `}>\n                    {step.status === 'completed' ? (\n                      <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                    ) : (\n                      <StepIcon className={`w-6 h-6 ${getStepIconColor(step.status)}`} />\n                    )}\n                  </div>\n                  \n                  {/* Contenu de l'étape */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className={`\n                        text-base font-medium \n                        ${step.status === 'completed' ? 'text-green-900' :\n                          step.status === 'current' ? 'text-blue-900' :\n                          step.status === 'blocked' ? 'text-red-900' :\n                          'text-gray-500'}\n                      `}>\n                        {step.title}\n                      </h4>\n                      \n                      {step.date && (\n                        <span className=\"text-xs text-gray-500\">\n                          {formatDistanceToNow(new Date(step.date), { \n                            addSuffix: true, \n                            locale: fr \n                          })}\n                        </span>\n                      )}\n                    </div>\n                    \n                    <p className={`\n                      text-sm mt-1 \n                      ${step.status === 'completed' ? 'text-green-700' :\n                        step.status === 'current' ? 'text-blue-700' :\n                        step.status === 'blocked' ? 'text-red-700' :\n                        'text-gray-500'}\n                    `}>\n                      {step.description}\n                    </p>\n                    \n                    {/* Informations additionnelles */}\n                    {step.id === 'auto_review' && application.autoScore && (\n                      <div className=\"mt-2\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Score automatique: {application.autoScore}/100\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    {step.id === 'manual_review' && application.manualScore && (\n                      <div className=\"mt-2\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Score recruteur: {application.manualScore}/100\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Prochaines étapes */}\n        {application.status !== 'accepted' && application.status !== 'rejected' && (\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Prochaines étapes</h4>\n            <ul className=\"text-sm text-gray-700 space-y-1\">\n              {application.status === 'pending' && !application.cvPath && (\n                <li>• Complétez votre profil et téléchargez vos documents</li>\n              )}\n              {application.status === 'pending' && application.cvPath && !application.autoScore && (\n                <li>• Votre candidature est en cours d'évaluation automatique</li>\n              )}\n              {application.status === 'pending' && application.autoScore && (\n                <li>• Un recruteur va examiner votre candidature</li>\n              )}\n              {application.status === 'reviewed' && (\n                <li>• Vous serez contacté(e) pour l'organisation d'un entretien</li>\n              )}\n              {application.status === 'interview' && (\n                <li>• Participez à votre entretien et attendez la décision finale</li>\n              )}\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11287},"ACCES_SUPER_ADMIN.md":{"content":"# 🔐 ACCÈS SUPER ADMIN - MOHAMED\n\n## 🚀 Lien Direct Administration\n\n### **[ACCÉDER À L'ADMINISTRATION ↗](/api/login)**\n\n---\n\n## 👤 Identifiants Super Admin\n\n### **Compte Mohamed (Super Administrateur)**\n- **Lien de connexion**: [/api/login](/api/login)\n- **Compte Replit**: Utiliser votre compte Replit personnel\n- **Rôle**: Super Administrateur\n- **Accès**: TOUTES les fonctionnalités\n\n---\n\n## 🎯 Fonctionnalités Disponibles\n\n### 📊 **Dashboard Principal**\n- **[/admin](/admin)** - Vue d'ensemble administrative\n- Statistiques en temps réel\n- Graphiques de performance\n\n### 👥 **Gestion du Personnel**\n- **[/admin/users](/admin/users)** - Gestion complète des utilisateurs\n- **[/admin/employees](/admin/employees)** - Gestion des employés\n- Création, modification, suppression\n- Attribution des rôles (Admin, HR, Recruteur, Employé, Candidat)\n\n### 💼 **Gestion des Offres d'Emploi**\n- **[/admin/jobs](/admin/jobs)** - Gestion des offres\n- **10 offres de test créées** (Paris, Dakar, Casablanca, Abidjan, etc.)\n- Création, modification, publication d'offres\n\n### 🎯 **Gestion des Candidatures**\n- **[/admin/applications](/admin/applications)** - Suivi candidatures\n- **[/admin/assignment](/admin/assignment)** - Attribution candidats\n- **[/admin/scoring](/admin/scoring)** - Notation candidats\n- **[/admin/final-results](/admin/final-results)** - Résultats finaux\n\n### 📝 **Système de Contrats**\n- **[/contracts](/contracts)** - Gestion des contrats\n- Génération automatique\n- Suivi des avenants\n\n### 💰 **Gestion Paie & RH**\n- **[/admin/payroll](/admin/payroll)** - Gestion paie\n- **[/hr](/hr)** - Administration RH\n- Congés, demandes administratives\n\n### 🎓 **Système d'Intégration**\n- **[/admin/onboarding](/admin/onboarding)** - Processus d'intégration\n- **[/admin/interviews](/admin/interviews)** - Gestion entretiens\n- Suivi des nouvelles recrues\n\n### 📧 **Invitations Candidats**\n- **[/admin/invitations](/admin/invitations)** - Invitations personnalisées\n- Liens uniques par candidat\n- Suivi des invitations\n\n---\n\n## 🏢 **Données de Test Disponibles**\n\n### **10 Offres d'Emploi Créées**\n1. **Développeur Full Stack** - Paris (45k-60k €)\n2. **UX/UI Designer Senior** - Lyon (50k-65k €) \n3. **Chef de Projet Digital** - Toulouse (40k-55k €)\n4. **Responsable RH** - Dakar (2.5M-3.5M FCFA)\n5. **Ingénieur DevOps** - Casablanca (120k-150k MAD)\n6. **Comptable Senior** - Abidjan (1.2M-1.8M FCFA)\n7. **Commercial Export** - Tunis (2500-3500 TND)\n8. **Assistant Direction** - Bamako (350k-500k FCFA)\n9. **Développeur Flutter** - Lagos ($18k-25k USD)\n10. **Responsable Marketing** - Rabat (15k-20k MAD)\n\n### **5 Profils Utilisateurs Test**\n- **Mohamed** (Super Admin)\n- **Jean Dupont** (Candidat)\n- **Marie Martin** (RH)\n- **Pierre Durand** (Recruteur)\n- **Sophie Bernard** (Employé)\n\n---\n\n## 🔧 **Actions Principales**\n\n### ✅ **Créer du Personnel**\n1. Aller sur [/admin/users](/admin/users)\n2. Cliquer \"Ajouter Utilisateur\"\n3. Remplir les informations\n4. Attribuer le rôle approprié\n5. Envoyer invitation si nécessaire\n\n### ✅ **Gérer les Offres**\n1. Aller sur [/admin/jobs](/admin/jobs)\n2. Créer/Modifier/Publier offres\n3. Définir critères et exigences\n4. Suivre les candidatures reçues\n\n### ✅ **Suivre les Candidatures**\n1. Dashboard temps réel des candidatures\n2. Attribution aux recruteurs\n3. Système de notation\n4. Timeline de progression\n\n---\n\n## 🚨 **Instructions de Connexion**\n\n1. **Cliquer sur** [/api/login](/api/login)\n2. **Se connecter avec votre compte Replit**\n3. **Accès automatique** aux fonctionnalités admin\n4. **Navigation** via le menu latéral admin\n\n---\n\n*🎯 Toutes les fonctionnalités sont opérationnelles et prêtes à tester !*","size_bytes":3745},"GUIDE_NAVIGATION.md":{"content":"# Guide de Navigation - AeroRecrutement\n\n## 🔗 Liens d'Accès Principal\n\n### Connexion\n- **Connexion Admin/HR/Recruteur**: [/api/login](/api/login)\n- **Page d'accueil publique**: [/](/)\n\n---\n\n## 👥 Comptes de Test Disponibles\n\n### 🔐 Admin/Super Admin - Mohamed\n- **Email**: mohamed.admin@aerorecrut.com\n- **Nom**: Mohamed Administrateur\n- **Rôle**: Super Administrateur\n- **Accès**: Toutes les fonctionnalités\n\n### 👤 Candidat de Test\n- **Email**: candidat.test@example.com\n- **Nom**: Jean Dupont\n- **Rôle**: Candidat\n- **Accès**: Dashboard candidat, candidatures, profil\n\n### 🏢 RH de Test\n- **Email**: rh.test@aerorecrut.com\n- **Nom**: Marie Martin\n- **Rôle**: Ressources Humaines\n- **Accès**: Gestion RH, contrats, paie\n\n### 🎯 Recruteur de Test\n- **Email**: recruteur.test@aerorecrut.com\n- **Nom**: Pierre Durand\n- **Rôle**: Recruteur\n- **Accès**: Gestion candidatures, entretiens\n\n### 👔 Employé de Test\n- **Email**: employe.test@aerorecrut.com\n- **Nom**: Sophie Bernard\n- **Rôle**: Employé\n- **Accès**: Profil employé, congés\n\n---\n\n## 🗺️ Toutes les Vues Disponibles\n\n### 📱 Pages Publiques (Non connecté)\n| Route | Description |\n|-------|-------------|\n| `/` | Page d'accueil avec offres d'emploi |\n| `/candidate-login` | Connexion candidat |\n| `/candidate-invitation/:token` | Invitation candidat personnalisée |\n\n### 👤 Espace Candidat\n| Route | Description |\n|-------|-------------|\n| `/` | Dashboard candidat |\n| `/profile` | Gestion du profil |\n| `/applications` | Mes candidatures avec timeline |\n| `/jobs` | Voir toutes les offres |\n| `/candidate-onboarding` | Processus d'intégration |\n| `/onboarding-feedback` | Feedback d'intégration |\n| `/achievements` | Mes réalisations |\n| `/onboarding-calendar` | Calendrier d'intégration |\n\n### 🏢 Espace Administration (Admin/HR/Recruteur)\n| Route | Description |\n|-------|-------------|\n| `/` | Dashboard administrateur |\n| `/admin` | Tableau de bord admin |\n| `/admin/jobs` | Gestion des offres d'emploi |\n| `/admin/applications` | Gestion des candidatures |\n| `/admin/assignment` | Attribution des candidats |\n| `/admin/scoring` | Notation des candidats |\n| `/admin/final-results` | Résultats finaux |\n| `/contracts` | Gestion des contrats |\n| `/hr` | Gestion RH |\n| `/admin/payroll` | Gestion de la paie |\n| `/admin/onboarding` | Gestion de l'intégration |\n| `/admin/interviews` | Gestion des entretiens |\n| `/admin/employees` | Gestion des employés |\n| `/admin/invitations` | Invitations candidats |\n\n### 🔐 Espace Super Admin (Admin uniquement)\n| Route | Description |\n|-------|-------------|\n| `/admin/users` | Gestion des utilisateurs |\n\n---\n\n## 🚀 Comment Tester\n\n### 1. Connexion en tant qu'Admin (Mohamed)\n1. Aller sur [/api/login](/api/login)\n2. Se connecter avec le compte Replit\n3. Accès complet à toutes les fonctionnalités\n\n### 2. Test du Candidat\n1. Utiliser le compte candidat de test\n2. Naviguer dans l'espace candidat\n3. Tester le complément de profil\n\n### 3. Test des Autres Rôles\n1. Se connecter avec les comptes RH/Recruteur/Employé\n2. Explorer les fonctionnalités spécifiques à chaque rôle\n\n---\n\n## 🎯 Fonctionnalités Principales à Tester\n\n### ✅ Candidat\n- [ ] Complément de profil (4 étapes)\n- [ ] Candidature aux offres\n- [ ] Suivi des candidatures avec timeline\n- [ ] Dashboard personnel\n- [ ] Processus d'intégration\n\n### ✅ Admin/HR/Recruteur\n- [ ] Gestion des offres d'emploi\n- [ ] Gestion des candidatures\n- [ ] Système de notation\n- [ ] Gestion des contrats\n- [ ] Système de paie\n- [ ] Gestion des entretiens\n- [ ] Invitations personnalisées\n\n### ✅ Intégrations Avancées\n- [ ] Timeline de candidature\n- [ ] Système d'achievements\n- [ ] Calendrier d'intégration\n- [ ] Feedback système\n- [ ] Analytics et rapports\n\n---\n\n## 📞 Support\n\nPour toute question ou problème, contacter l'équipe de développement.\n\n*Dernière mise à jour: $(date)*","size_bytes":3914},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport interface AuthUser {\n  id: string;\n  email: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  role: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport class AuthService {\n  // Hash un mot de passe\n  static async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n  }\n\n  // Vérifie un mot de passe\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(password, hash);\n  }\n\n  // Authentification par email/password\n  static async authenticateUser(credentials: LoginCredentials): Promise<AuthUser | null> {\n    const { email, password } = credentials;\n    \n    // Chercher l'utilisateur par email\n    const user = await storage.getUserByEmail(email);\n    if (!user || !user.password) {\n      return null;\n    }\n\n    // Vérifier le mot de passe\n    const isValidPassword = await this.verifyPassword(password, user.password);\n    if (!isValidPassword) {\n      return null;\n    }\n\n    return {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role || \"candidate\"\n    };\n  }\n\n  // Inscription d'un candidat\n  static async registerCandidate(credentials: RegisterCredentials): Promise<AuthUser | null> {\n    const { email, password, firstName, lastName } = credentials;\n    \n    // Vérifier si l'email existe déjà\n    const existingUser = await storage.getUserByEmail(email);\n    if (existingUser) {\n      throw new Error(\"Un compte avec cet email existe déjà\");\n    }\n\n    // Hasher le mot de passe\n    const hashedPassword = await this.hashPassword(password);\n\n    // Créer l'utilisateur\n    const user = await storage.createUser({\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      role: \"candidate\",\n      profileCompleted: false\n    });\n\n    return {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role || \"candidate\"\n    };\n  }\n\n  // Créer un utilisateur admin (pour le super admin)\n  static async createAdminUser(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    phone?: string;\n  }): Promise<User> {\n    // Vérifier si l'email existe déjà\n    const existingUser = await storage.getUserByEmail(userData.email);\n    if (existingUser) {\n      throw new Error(\"Un compte avec cet email existe déjà\");\n    }\n\n    // Hasher le mot de passe\n    const hashedPassword = await this.hashPassword(userData.password);\n\n    // Créer l'utilisateur admin\n    return storage.createUser({\n      ...userData,\n      password: hashedPassword,\n      profileCompleted: true\n    });\n  }\n\n  // Générer un mot de passe temporaire sécurisé\n  static generateTemporaryPassword(): string {\n    const length = 12;\n    const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*\";\n    let password = \"\";\n    for (let i = 0; i < length; i++) {\n      password += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return password;\n  }\n\n  // Redirection selon le rôle\n  static getRedirectPath(role: string): string {\n    switch (role) {\n      case \"admin\":\n        return \"/admin\";\n      case \"hr\":\n        return \"/hr\";\n      case \"recruiter\":\n        return \"/admin/jobs\";\n      case \"manager\":\n        return \"/admin/dashboard\";\n      case \"employee\":\n        return \"/employee\";\n      case \"candidate\":\n      default:\n        return \"/dashboard\";\n    }\n  }\n\n  // Vérifier les permissions selon le rôle\n  static hasPermission(userRole: string, requiredRoles: string[]): boolean {\n    return requiredRoles.includes(userRole);\n  }\n\n  // Permissions par rôle\n  static getRolePermissions(role: string): string[] {\n    const permissions: Record<string, string[]> = {\n      admin: [\"*\"], // Accès complet\n      hr: [\n        \"view_candidates\",\n        \"manage_employees\", \n        \"view_applications\",\n        \"manage_contracts\",\n        \"manage_payroll\",\n        \"manage_leaves\"\n      ],\n      recruiter: [\n        \"view_candidates\",\n        \"manage_jobs\",\n        \"view_applications\", \n        \"score_candidates\",\n        \"conduct_interviews\"\n      ],\n      manager: [\n        \"view_team\",\n        \"approve_leaves\",\n        \"view_reports\",\n        \"manage_team_performance\"\n      ],\n      employee: [\n        \"view_profile\",\n        \"submit_requests\",\n        \"view_payslips\"\n      ],\n      candidate: [\n        \"view_jobs\",\n        \"submit_applications\",\n        \"view_application_status\"\n      ]\n    };\n\n    return permissions[role] || [];\n  }\n}","size_bytes":4970},"server/authRoutes.ts":{"content":"import type { Express } from \"express\";\nimport { AuthService, type LoginCredentials, type RegisterCredentials } from \"./auth\";\nimport { z } from \"zod\";\n\n// Schemas de validation\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\")\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\")\n});\n\nconst createAdminSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(8, \"Le mot de passe doit contenir au moins 8 caractères\"),\n  firstName: z.string().min(1, \"Le prénom est requis\"),\n  lastName: z.string().min(1, \"Le nom est requis\"),\n  role: z.enum([\"admin\", \"hr\", \"recruiter\", \"manager\"]),\n  phone: z.string().optional()\n});\n\nexport function registerAuthRoutes(app: Express) {\n  // === AUTHENTIFICATION CANDIDATS ===\n  \n  // Connexion candidat\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      \n      const user = await AuthService.authenticateUser(credentials);\n      if (!user) {\n        return res.status(401).json({ message: \"Email ou mot de passe incorrect\" });\n      }\n\n      // Créer une session\n      if (!req.session) {\n        console.error(\"Session not available. Session middleware may not be properly configured.\");\n        return res.status(500).json({ message: \"Configuration de session manquante\" });\n      }\n      (req.session as any).user = user;\n      \n      // Redirection selon le rôle\n      const redirectPath = AuthService.getRedirectPath(user.role);\n      \n      res.json({ \n        user,\n        redirectPath,\n        message: \"Connexion réussie\" \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // Inscription candidat\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const credentials = registerSchema.parse(req.body);\n      \n      const user = await AuthService.registerCandidate(credentials);\n      if (!user) {\n        return res.status(400).json({ message: \"Erreur lors de l'inscription\" });\n      }\n\n      // Créer une session\n      if (!req.session) {\n        console.error(\"Session not available. Session middleware may not be properly configured.\");\n        return res.status(500).json({ message: \"Configuration de session manquante\" });\n      }\n      (req.session as any).user = user;\n      \n      res.status(201).json({ \n        user,\n        redirectPath: \"/dashboard\",\n        message: \"Inscription réussie\" \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message.includes(\"existe déjà\")) {\n        return res.status(409).json({ message: error.message });\n      }\n      console.error(\"Register error:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // === AUTHENTIFICATION ADMIN ===\n  \n  // Connexion admin (séparée)\n  app.post(\"/api/admin/auth/login\", async (req, res) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      \n      const user = await AuthService.authenticateUser(credentials);\n      if (!user) {\n        return res.status(401).json({ message: \"Email ou mot de passe incorrect\" });\n      }\n\n      // Vérifier que c'est bien un utilisateur admin\n      const adminRoles = [\"admin\", \"hr\", \"recruiter\", \"manager\"];\n      if (!adminRoles.includes(user.role)) {\n        return res.status(403).json({ \n          message: \"Accès non autorisé. Cette page est réservée aux administrateurs.\" \n        });\n      }\n\n      // Créer une session\n      if (!req.session) {\n        console.error(\"Session not available. Session middleware may not be properly configured.\");\n        return res.status(500).json({ message: \"Configuration de session manquante\" });\n      }\n      (req.session as any).user = user;\n      \n      // Redirection selon le rôle\n      const redirectPath = AuthService.getRedirectPath(user.role);\n      \n      res.json({ \n        user,\n        redirectPath,\n        message: \"Connexion administrateur réussie\" \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // Création d'utilisateur admin (réservé au super admin)\n  app.post(\"/api/admin/users\", async (req, res) => {\n    try {\n      // Vérifier que l'utilisateur connecté est un admin\n      const currentUser = (req.session as any)?.user;\n      if (!currentUser || currentUser.role !== \"admin\") {\n        return res.status(403).json({ \n          message: \"Seul le super administrateur peut créer des comptes administrateurs\" \n        });\n      }\n\n      const userData = createAdminSchema.parse(req.body);\n      \n      const newUser = await AuthService.createAdminUser(userData);\n      \n      res.status(201).json({ \n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          role: newUser.role,\n          phone: newUser.phone\n        },\n        message: \"Utilisateur administrateur créé avec succès\" \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: error.errors \n        });\n      }\n      if (error instanceof Error && error.message.includes(\"existe déjà\")) {\n        return res.status(409).json({ message: error.message });\n      }\n      console.error(\"Create admin user error:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // === ROUTES COMMUNES ===\n  \n  // Vérifier l'utilisateur connecté\n  app.get(\"/api/auth/user\", (req, res) => {\n    const user = (req.session as any)?.user;\n    if (!user) {\n      return res.status(401).json({ message: \"Non connecté\" });\n    }\n    res.json(user);\n  });\n\n  // Déconnexion\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Erreur lors de la déconnexion\" });\n      }\n      \n      res.clearCookie(\"connect.sid\");\n      res.json({ message: \"Déconnexion réussie\" });\n    });\n  });\n\n  // Middleware de vérification d'authentification\n  app.use(\"/api/protected\", (req, res, next) => {\n    const user = (req.session as any)?.user;\n    if (!user) {\n      return res.status(401).json({ message: \"Authentification requise\" });\n    }\n    req.user = user;\n    next();\n  });\n\n  // Middleware de vérification des permissions admin\n  app.use(\"/api/admin\", (req, res, next) => {\n    // Ignorer les routes d'auth admin\n    if (req.path.startsWith(\"/auth/\")) {\n      return next();\n    }\n\n    const user = (req.session as any)?.user;\n    if (!user) {\n      return res.status(401).json({ message: \"Authentification requise\" });\n    }\n\n    const adminRoles = [\"admin\", \"hr\", \"recruiter\", \"manager\"];\n    if (!adminRoles.includes(user.role)) {\n      return res.status(403).json({ \n        message: \"Accès non autorisé. Droits administrateur requis.\" \n      });\n    }\n\n    req.user = user;\n    next();\n  });\n}","size_bytes":8007},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, Shield, ArrowLeft, Plane, UserCheck, Users, Briefcase, Settings } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\")\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"POST\", \"/api/admin/auth/login\", data);\n    },\n    onSuccess: (response) => {\n      // Redirection selon le rôle admin\n      setLocation(response.redirectPath || \"/admin\");\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Erreur de connexion\");\n    }\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    setError(null);\n    loginMutation.mutate(data);\n  };\n\n  const roleDescriptions = [\n    {\n      icon: Shield,\n      title: \"Super Admin\",\n      description: \"Accès complet, gestion des utilisateurs\",\n      color: \"text-red-600\"\n    },\n    {\n      icon: Users,\n      title: \"Ressources Humaines\",\n      description: \"Gestion des employés et des candidats\",\n      color: \"text-blue-600\"\n    },\n    {\n      icon: UserCheck,\n      title: \"Recruteur\",\n      description: \"Gestion des offres et entretiens\",\n      color: \"text-green-600\"\n    },\n    {\n      icon: Briefcase,\n      title: \"Manager\",\n      description: \"Supervision et reporting\",\n      color: \"text-purple-600\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-lg\">\n        {/* Header avec retour */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation(\"/\")}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n        </div>\n\n        {/* Logo/Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center items-center gap-3 mb-4\">\n            <div className=\"p-3 bg-slate-800 rounded-xl\">\n              <Shield className=\"h-8 w-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Administration</h1>\n              <div className=\"flex items-center gap-2 text-blue-600 mt-1\">\n                <Plane className=\"h-4 w-4\" />\n                <span className=\"text-sm font-medium\">AeroRecrutement</span>\n              </div>\n            </div>\n          </div>\n          <p className=\"text-gray-600\">Espace réservé aux administrateurs</p>\n        </div>\n\n        {/* Formulaire de connexion */}\n        <Card className=\"shadow-xl border-0 mb-6\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-800 to-slate-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center gap-2 text-xl\">\n              <Shield className=\"h-5 w-5\" />\n              Connexion Administrateur\n            </CardTitle>\n            <CardDescription className=\"text-slate-200\">\n              Accès sécurisé pour les administrateurs uniquement\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-4 p-6\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email administrateur</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"admin@aerorecrut.com\"\n                  data-testid=\"input-admin-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Mot de passe</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    {...form.register(\"password\")}\n                    placeholder=\"Votre mot de passe\"\n                    data-testid=\"input-admin-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-slate-800 to-slate-600 hover:from-slate-900 hover:to-slate-700\" \n                disabled={loginMutation.isPending}\n                data-testid=\"button-admin-login\"\n              >\n                {loginMutation.isPending ? \"Connexion...\" : \"Se connecter\"}\n              </Button>\n            </form>\n\n            {/* Note sécurité */}\n            <div className=\"text-center pt-4 border-t\">\n              <p className=\"text-sm text-muted-foreground\">\n                <Settings className=\"h-4 w-4 inline mr-1\" />\n                Seuls les comptes administrateurs peuvent accéder à cette section\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Types de rôles disponibles */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h3 className=\"font-semibold text-gray-900 mb-4 text-center\">Rôles d'administration</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {roleDescriptions.map((role, index) => (\n              <div key={index} className=\"text-center\">\n                <role.icon className={`h-6 w-6 mx-auto mb-2 ${role.color}`} />\n                <h4 className=\"font-medium text-sm text-gray-900\">{role.title}</h4>\n                <p className=\"text-xs text-gray-500 mt-1\">{role.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Lien vers l'espace candidat */}\n        <div className=\"text-center mt-6\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/login\")}\n            data-testid=\"link-candidate\"\n            className=\"border-blue-200 text-blue-600 hover:bg-blue-50\"\n          >\n            ← Retour à l'espace candidat\n          </Button>\n        </div>\n\n        {/* Comptes de test admin */}\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n          <h3 className=\"font-medium text-blue-800 mb-2\">🔐 Comptes administrateurs</h3>\n          <div className=\"text-sm text-blue-700 space-y-1\">\n            <p><strong>Super Admin:</strong> mohamed.admin@aerorecrut.com / admin123</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8714},"server/routes-backup.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertApplicationSchema,\n  insertInterviewSchema,\n  insertInterviewEvaluationSchema,\n  insertInterviewFeedbackSchema,\n  insertPerformanceReviewSchema,\n  insertTrainingProgramSchema,\n  insertEmployeeTrainingSchema,\n  insertDisciplinaryActionSchema,\n  insertEmployeeDocumentSchema,\n  insertTimeEntrySchema,\n  insertCandidateInvitationSchema\n} from \"@shared/schema\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Import des nouvelles routes d'authentification\n  const { registerAuthRoutes } = await import(\"./authRoutes\");\n  \n  // Auth middleware (Replit Auth - optionnel maintenant)\n  await setupAuth(app);\n  \n  // Enregistrer les nouvelles routes d'authentification email/password\n  registerAuthRoutes(app);\n\n  // Create unified auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    // Check session-based auth first (email/password)\n    const sessionUser = (req.session as any)?.user;\n    if (sessionUser) {\n      req.user = sessionUser;\n      return next();\n    }\n    \n    // Check Replit auth if session auth not available\n    if (req.isAuthenticated() && req.user?.claims) {\n      req.user = {\n        id: req.user.id,\n        email: req.user.claims.email,\n        firstName: req.user.claims.first_name,\n        lastName: req.user.claims.last_name,\n        profileImageUrl: req.user.claims.profile_image_url,\n        role: \"admin\" // Default for Replit auth users\n      };\n      return next();\n    }\n    \n    return res.status(401).json({ message: \"Non connecté\" });\n  };\n\n  // Public job routes\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const { search, contractType, experienceLevel, location } = req.query;\n      \n      if (search || contractType || experienceLevel || location) {\n        const filters = {\n          contractType: contractType ? (contractType as string).split(',') : [],\n          experienceLevel: experienceLevel ? (experienceLevel as string).split(',') : [],\n          location: location as string,\n        };\n        const jobs = await storage.searchJobs(search as string || '', filters);\n        res.json(jobs);\n      } else {\n        const jobs = await storage.getAllJobs();\n        res.json(jobs);\n      }\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      res.status(500).json({ message: \"Failed to fetch job\" });\n    }\n  });\n\n  // Protected application routes\n  app.get(\"/api/applications\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const applications = await storage.getApplicationsByUser(userId);\n      \n      // Enrich with job details\n      const enrichedApplications = await Promise.all(\n        applications.map(async (app) => {\n          const job = await storage.getJob(app.jobId);\n          return { ...app, job };\n        })\n      );\n      \n      res.json(enrichedApplications);\n    } catch (error) {\n      console.error(\"Error fetching applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.post(\"/api/applications\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertApplicationSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const application = await storage.createApplication(validatedData, userId);\n      res.status(201).json(application);\n    } catch (error) {\n      console.error(\"Error creating application:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to create application\"\n      });\n    }\n  });\n\n  // Object storage routes for file uploads\n  app.get(\"/objects/:objectPath(*)\", requireAuth, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  app.put(\"/api/documents\", requireAuth, async (req: any, res) => {\n    if (!req.body.documentURL) {\n      return res.status(400).json({ error: \"documentURL is required\" });\n    }\n\n    const userId = req.user?.claims?.sub;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.documentURL,\n        {\n          owner: userId,\n          visibility: \"private\", // Documents are private to the user\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting document:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin routes - require admin/hr/recruiter role\n  const requireAdminRole = async (req: any, res: any, next: any) => {\n    try {\n      // User is already authenticated and attached via requireAuth\n      const user = req.user;\n      if (!user?.role || ![\"admin\", \"hr\", \"recruiter\"].includes(user.role)) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      next();\n    } catch (error) {\n      res.status(500).json({ message: \"Error checking permissions\" });\n    }\n  };\n\n  // Admin job management\n  app.get(\"/api/admin/jobs\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const jobs = await storage.getAllJobs();\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching admin jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  // Admin application management\n  app.get(\"/api/admin/applications\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      // Mock data pour le moment\n      const applications: any[] = [];\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching admin applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  // Get recruiters\n  app.get(\"/api/admin/recruiters\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const recruiters = await storage.getRecruiters();\n      res.json(recruiters);\n    } catch (error) {\n      console.error(\"Error fetching recruiters:\", error);\n      res.status(500).json({ message: \"Failed to fetch recruiters\" });\n    }\n  });\n\n  // Get top candidates for a job\n  app.get(\"/api/admin/top-candidates/:jobId\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const { recruitmentService } = await import(\"./recruitmentService\");\n      const jobId = parseInt(req.params.jobId);\n      const topCandidates = await recruitmentService.getTopCandidates(jobId);\n      res.json(topCandidates);\n    } catch (error) {\n      console.error(\"Error fetching top candidates:\", error);\n      res.status(500).json({ message: \"Failed to fetch top candidates\" });\n    }\n  });\n\n  // Assign candidates to recruiter\n  app.post(\"/api/admin/assign-candidates\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const { recruitmentService } = await import(\"./recruitmentService\");\n      const { applicationIds, recruiterId } = req.body;\n      \n      if (!applicationIds || !recruiterId) {\n        return res.status(400).json({ error: \"applicationIds and recruiterId are required\" });\n      }\n      \n      await recruitmentService.assignCandidatesToRecruiter(applicationIds, recruiterId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error assigning candidates:\", error);\n      res.status(500).json({ message: \"Failed to assign candidates\" });\n    }\n  });\n\n  // Get assigned candidates for recruiter\n  app.get(\"/api/recruiter/assigned-candidates\", requireAuth, async (req: any, res) => {\n    try {\n      const { recruitmentService } = await import(\"./recruitmentService\");\n      const userId = req.user.id;\n      const assignedCandidates = await recruitmentService.getAssignedApplications(userId);\n      res.json(assignedCandidates);\n    } catch (error) {\n      console.error(\"Error fetching assigned candidates:\", error);\n      res.status(500).json({ message: \"Failed to fetch assigned candidates\" });\n    }\n  });\n\n  // Update manual score\n  app.put(\"/api/recruiter/score/:applicationId\", requireAuth, async (req: any, res) => {\n    try {\n      const { recruitmentService } = await import(\"./recruitmentService\");\n      const applicationId = parseInt(req.params.applicationId);\n      const { score, notes } = req.body;\n      \n      if (score === undefined) {\n        return res.status(400).json({ error: \"Score is required\" });\n      }\n      \n      await recruitmentService.updateManualScore(applicationId, score, notes);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating manual score:\", error);\n      res.status(500).json({ message: \"Failed to update score\" });\n    }\n  });\n\n  // Get final top 3 results\n  app.get(\"/api/admin/final-top3/:jobId\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const { recruitmentService } = await import(\"./recruitmentService\");\n      const jobId = parseInt(req.params.jobId);\n      const finalTop3 = await recruitmentService.getFinalTop3(jobId);\n      res.json(finalTop3);\n    } catch (error) {\n      console.error(\"Error fetching final top 3:\", error);\n      res.status(500).json({ message: \"Failed to fetch final results\" });\n    }\n  });\n\n  // Complete user profile\n  app.put(\"/api/profile/complete\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = {\n        ...req.body,\n        profileCompleted: true\n      };\n      \n      const updatedUser = await storage.updateUser(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error completing profile:\", error);\n      res.status(500).json({ message: \"Failed to complete profile\" });\n    }\n  });\n\n  // Enhanced application search routes\n  app.get(\"/api/applications/search-by-score\", requireAuth, async (req: any, res) => {\n    try {\n      const { minAutoScore, maxAutoScore, minManualScore, maxManualScore } = req.query;\n      const applications = await storage.searchApplicationsByScore(\n        minAutoScore ? parseInt(minAutoScore as string) : undefined,\n        maxAutoScore ? parseInt(maxAutoScore as string) : undefined,\n        minManualScore ? parseInt(minManualScore as string) : undefined,\n        maxManualScore ? parseInt(maxManualScore as string) : undefined\n      );\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error searching applications by score:\", error);\n      res.status(500).json({ error: \"Failed to search applications\" });\n    }\n  });\n\n  app.get(\"/api/applications/search-by-date\", requireAuth, async (req: any, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ error: \"Start and end dates are required\" });\n      }\n      const applications = await storage.getApplicationsByDateRange(\n        new Date(startDate as string),\n        new Date(endDate as string)\n      );\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error searching applications by date:\", error);\n      res.status(500).json({ error: \"Failed to search applications\" });\n    }\n  });\n\n  // Payroll management routes\n  app.post(\"/api/payroll\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['hr', 'admin'].includes(user.role)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const payrollData = req.body;\n      const newPayroll = await storage.createPayroll(payrollData);\n      res.status(201).json(newPayroll);\n    } catch (error) {\n      console.error(\"Error creating payroll:\", error);\n      res.status(500).json({ error: \"Failed to create payroll\" });\n    }\n  });\n\n  app.get(\"/api/payroll\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['hr', 'admin'].includes(user.role)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const payrolls = await storage.getAllPayrolls();\n      res.json(payrolls);\n    } catch (error) {\n      console.error(\"Error fetching payrolls:\", error);\n      res.status(500).json({ error: \"Failed to fetch payrolls\" });\n    }\n  });\n\n  app.put(\"/api/payroll/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['hr', 'admin'].includes(user.role)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const payroll = await storage.updatePayroll(parseInt(req.params.id), req.body);\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error updating payroll:\", error);\n      res.status(500).json({ error: \"Failed to update payroll\" });\n    }\n  });\n\n  app.get(\"/api/payroll/employee/:employeeId\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !['hr', 'admin'].includes(user.role)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const payrolls = await storage.getPayrollsByEmployee(parseInt(req.params.employeeId));\n      res.json(payrolls);\n    } catch (error) {\n      console.error(\"Error fetching employee payrolls:\", error);\n      res.status(500).json({ error: \"Failed to fetch employee payrolls\" });\n    }\n  });\n\n  // Admin KPIs and analytics\n  app.get(\"/api/admin/kpis\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const kpis = await storage.getKPIs();\n      res.json(kpis);\n    } catch (error) {\n      console.error(\"Error fetching KPIs:\", error);\n      res.status(500).json({ message: \"Failed to fetch KPIs\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/applications\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const analytics = await storage.getApplicationAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching application analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/jobs\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const jobAnalytics = await storage.getJobAnalytics();\n      res.json(jobAnalytics);\n    } catch (error) {\n      console.error(\"Error fetching job analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch job analytics\" });\n    }\n  });\n\n  // User management routes (admin/HR only)\n  app.get(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { role } = req.query;\n      const users = role ? await storage.getUsersByRole(role as string) : await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // Ne pas permettre de modifier son propre rôle\n      if (id === req.user.id && updateData.role && updateData.role !== currentUser.role) {\n        return res.status(400).json({ message: \"Cannot modify your own role\" });\n      }\n      \n      const updatedUser = await storage.updateUser(id, updateData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied - Admin only\" });\n      }\n      \n      const { id } = req.params;\n      \n      // Ne pas permettre de supprimer son propre compte\n      if (id === req.user.id) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n      \n      await storage.deleteUser(id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // =============================================================================\n  // ONBOARDING MANAGEMENT ROUTES\n  // =============================================================================\n\n  // Onboarding Process Management (Admin/HR only)\n  app.get(\"/api/onboarding/processes\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const processes = await storage.getAllOnboardingProcesses();\n      res.json(processes);\n    } catch (error) {\n      console.error(\"Error fetching onboarding processes:\", error);\n      res.status(500).json({ message: \"Failed to fetch onboarding processes\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/processes\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const processData = { ...req.body, createdBy: req.user.id };\n      const newProcess = await storage.createOnboardingProcess(processData);\n      res.status(201).json(newProcess);\n    } catch (error) {\n      console.error(\"Error creating onboarding process:\", error);\n      res.status(500).json({ message: \"Failed to create onboarding process\" });\n    }\n  });\n\n  app.put(\"/api/onboarding/processes/:id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      const updatedProcess = await storage.updateOnboardingProcess(parseInt(id), req.body);\n      res.json(updatedProcess);\n    } catch (error) {\n      console.error(\"Error updating onboarding process:\", error);\n      res.status(500).json({ message: \"Failed to update onboarding process\" });\n    }\n  });\n\n  // Onboarding Steps Management\n  app.get(\"/api/onboarding/processes/:processId/steps\", requireAuth, async (req, res) => {\n    try {\n      const { processId } = req.params;\n      const steps = await storage.getOnboardingStepsByProcess(parseInt(processId));\n      res.json(steps);\n    } catch (error) {\n      console.error(\"Error fetching onboarding steps:\", error);\n      res.status(500).json({ message: \"Failed to fetch onboarding steps\" });\n    }\n  });\n\n  app.post(\"/api/onboarding/processes/:processId/steps\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { processId } = req.params;\n      const stepData = { ...req.body, processId: parseInt(processId) };\n      const newStep = await storage.createOnboardingStep(stepData);\n      res.status(201).json(newStep);\n    } catch (error) {\n      console.error(\"Error creating onboarding step:\", error);\n      res.status(500).json({ message: \"Failed to create onboarding step\" });\n    }\n  });\n\n  // Candidate Onboarding Management\n  app.post(\"/api/onboarding/candidates\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Générer un employeeId si pas déjà défini\n      const { userId } = req.body;\n      const user = await storage.getUser(userId);\n      if (user && !user.employeeId) {\n        const employeeId = await storage.generateEmployeeId(user.firstName || '', user.lastName || '');\n        await storage.updateUser(userId, { employeeId });\n      }\n      \n      const onboardingData = { ...req.body, createdBy: req.user.id };\n      const newOnboarding = await storage.createCandidateOnboarding(onboardingData);\n      res.status(201).json(newOnboarding);\n    } catch (error) {\n      console.error(\"Error creating candidate onboarding:\", error);\n      res.status(500).json({ message: \"Failed to create candidate onboarding\" });\n    }\n  });\n\n  app.get(\"/api/onboarding/candidates/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const currentUser = await storage.getUser(req.user.id);\n      \n      // L'utilisateur peut voir son propre onboarding ou admin/hr peuvent voir tous\n      if (userId !== req.user.id && \n          (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr'))) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const onboardings = await storage.getCandidateOnboardingByUser(userId);\n      res.json(onboardings);\n    } catch (error) {\n      console.error(\"Error fetching candidate onboarding:\", error);\n      res.status(500).json({ message: \"Failed to fetch candidate onboarding\" });\n    }\n  });\n\n  app.get(\"/api/onboarding/candidates/:id/steps\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const onboarding = await storage.getCandidateOnboarding(parseInt(id));\n      \n      if (!onboarding) {\n        return res.status(404).json({ message: \"Onboarding not found\" });\n      }\n      \n      const currentUser = await storage.getUser(req.user.id);\n      // Vérifier l'accès : propriétaire ou admin/hr\n      if (onboarding.userId !== req.user.id && \n          (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr'))) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const completions = await storage.getStepCompletionsByOnboarding(parseInt(id));\n      res.json(completions);\n    } catch (error) {\n      console.error(\"Error fetching onboarding steps:\", error);\n      res.status(500).json({ message: \"Failed to fetch onboarding steps\" });\n    }\n  });\n\n  app.put(\"/api/onboarding/steps/:completionId\", requireAuth, async (req, res) => {\n    try {\n      const { completionId } = req.params;\n      const updateData = { ...req.body, completedBy: req.user.id };\n      \n      if (req.body.status === 'completed') {\n        updateData.completionDate = new Date();\n      }\n      \n      const updatedCompletion = await storage.updateStepCompletion(parseInt(completionId), updateData);\n      res.json(updatedCompletion);\n    } catch (error) {\n      console.error(\"Error updating step completion:\", error);\n      res.status(500).json({ message: \"Failed to update step completion\" });\n    }\n  });\n\n  // Generate Employee ID endpoint\n  app.post(\"/api/onboarding/generate-employee-id\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { firstName, lastName } = req.body;\n      if (!firstName || !lastName) {\n        return res.status(400).json({ message: \"First name and last name are required\" });\n      }\n      \n      const employeeId = await storage.generateEmployeeId(firstName, lastName);\n      res.json({ employeeId });\n    } catch (error) {\n      console.error(\"Error generating employee ID:\", error);\n      res.status(500).json({ message: \"Failed to generate employee ID\" });\n    }\n  });\n\n  // Onboarding Analytics endpoint\n  app.get(\"/api/onboarding/analytics\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const analytics = await storage.getOnboardingAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching onboarding analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch onboarding analytics\" });\n    }\n  });\n\n  // Process Templates endpoint\n  app.get(\"/api/onboarding/templates\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const templates = await storage.getOnboardingProcessTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching process templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch process templates\" });\n    }\n  });\n\n  // Create process from template\n  app.post(\"/api/onboarding/templates/:templateId/create\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'hr')) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { templateId } = req.params;\n      const { customName } = req.body;\n      \n      const templates = await storage.getOnboardingProcessTemplates();\n      const template = templates.find(t => t.id === parseInt(templateId));\n      \n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      \n      // Créer le processus basé sur le template\n      const processData = {\n        name: customName || template.name,\n        description: template.description,\n        department: template.department,\n        estimatedDuration: template.estimatedDuration,\n        createdBy: req.user.id\n      };\n      \n      const newProcess = await storage.createOnboardingProcess(processData);\n      \n      // Créer les étapes basées sur le template\n      if ((template as any).steps) {\n        for (let i = 0; i < (template as any).steps.length; i++) {\n          const step = (template as any).steps[i];\n          await storage.createOnboardingStep({\n            processId: newProcess.id,\n            stepNumber: i + 1,\n            title: step.title,\n            description: `Étape ${step.category} - ${step.title}`,\n            category: step.category,\n            isRequired: true,\n            estimatedDuration: step.duration,\n            assignedRole: currentUser.role === 'admin' ? 'admin' : 'hr'\n          });\n        }\n      }\n      \n      res.status(201).json(newProcess);\n    } catch (error) {\n      console.error(\"Error creating process from template:\", error);\n      res.status(500).json({ message: \"Failed to create process from template\" });\n    }\n  });\n\n  // ===== FEEDBACK SYSTEM ROUTES =====\n  \n  // Submit feedback for onboarding experience\n  app.post(\"/api/onboarding/feedback\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const feedbackData = {\n        ...req.body,\n        userId\n      };\n      const feedback = await storage.createOnboardingFeedback(feedbackData);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      res.status(500).json({ message: \"Failed to create feedback\" });\n    }\n  });\n\n  // Get feedback for a specific onboarding or all feedback (admin)\n  app.get(\"/api/onboarding/feedback\", requireAuth, async (req: any, res) => {\n    try {\n      const { candidateOnboardingId } = req.query;\n      const feedback = await storage.getOnboardingFeedback(candidateOnboardingId ? parseInt(candidateOnboardingId) : undefined);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error fetching feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  // ===== ACHIEVEMENT SYSTEM ROUTES =====\n  \n  // Get all available achievements\n  app.get(\"/api/onboarding/achievements\", requireAuth, async (req, res) => {\n    try {\n      const achievements = await storage.getAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Get user's earned achievements\n  app.get(\"/api/onboarding/user-achievements\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const userAchievements = await storage.getUserAchievements(userId);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  // Award achievement to user (admin only)\n  app.post(\"/api/onboarding/award-achievement\", requireAuth, async (req: any, res) => {\n    try {\n      const adminUser = await storage.getUser(req.user.id);\n      if (adminUser?.role !== 'admin' && adminUser?.role !== 'hr') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { userId, achievementId, candidateOnboardingId } = req.body;\n      const award = await storage.awardAchievement(userId, achievementId, candidateOnboardingId);\n      res.json(award);\n    } catch (error) {\n      console.error(\"Error awarding achievement:\", error);\n      res.status(500).json({ message: \"Failed to award achievement\" });\n    }\n  });\n\n  // ===== CALENDAR EVENTS ROUTES =====\n  \n  // Create onboarding event\n  app.post(\"/api/onboarding/events\", requireAuth, async (req: any, res) => {\n    try {\n      const adminUser = await storage.getUser(req.user.id);\n      if (adminUser?.role !== 'admin' && adminUser?.role !== 'hr') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const eventData = {\n        ...req.body,\n        createdBy: req.user.id\n      };\n      const event = await storage.createOnboardingEvent(eventData);\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  // Get onboarding events\n  app.get(\"/api/onboarding/events\", requireAuth, async (req: any, res) => {\n    try {\n      const { candidateOnboardingId } = req.query;\n      const events = await storage.getOnboardingEvents(candidateOnboardingId ? parseInt(candidateOnboardingId) : undefined);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  // Update onboarding event\n  app.put(\"/api/onboarding/events/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const adminUser = await storage.getUser(req.user.id);\n      if (adminUser?.role !== 'admin' && adminUser?.role !== 'hr') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const eventId = parseInt(req.params.id);\n      const updatedEvent = await storage.updateOnboardingEvent(eventId, req.body);\n      res.json(updatedEvent);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  // Interview Management Routes\n  app.get(\"/api/interviews\", requireAuth, async (req, res) => {\n    try {\n      const interviews = await storage.getInterviews();\n      res.json(interviews);\n    } catch (error) {\n      console.error(\"Error fetching interviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch interviews\" });\n    }\n  });\n\n  app.post(\"/api/interviews\", requireAuth, async (req: any, res) => {\n    try {\n      const interviewData = insertInterviewSchema.parse({\n        ...req.body,\n        createdBy: req.user?.claims?.sub\n      });\n      const interview = await storage.createInterview(interviewData);\n      res.status(201).json(interview);\n    } catch (error) {\n      console.error(\"Error creating interview:\", error);\n      res.status(500).json({ message: \"Failed to create interview\" });\n    }\n  });\n\n  // Interview Evaluations\n  app.post(\"/api/interviews/evaluations\", requireAuth, async (req, res) => {\n    try {\n      const evaluationData = insertInterviewEvaluationSchema.parse(req.body);\n      const evaluation = await storage.createInterviewEvaluation(evaluationData);\n      res.status(201).json(evaluation);\n    } catch (error) {\n      console.error(\"Error creating interview evaluation:\", error);\n      res.status(500).json({ message: \"Failed to create interview evaluation\" });\n    }\n  });\n\n  // Interview Feedback\n  app.post(\"/api/interviews/feedback\", requireAuth, async (req, res) => {\n    try {\n      const feedbackData = insertInterviewFeedbackSchema.parse(req.body);\n      const feedback = await storage.createInterviewFeedback(feedbackData);\n      res.status(201).json(feedback);\n    } catch (error) {\n      console.error(\"Error creating interview feedback:\", error);\n      res.status(500).json({ message: \"Failed to create interview feedback\" });\n    }\n  });\n\n  // Performance Reviews\n  app.get(\"/api/performance-reviews\", requireAuth, async (req, res) => {\n    try {\n      const reviews = await storage.getPerformanceReviews();\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching performance reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance reviews\" });\n    }\n  });\n\n  app.post(\"/api/performance-reviews\", requireAuth, async (req: any, res) => {\n    try {\n      const reviewData = insertPerformanceReviewSchema.parse({\n        ...req.body,\n        reviewerId: req.user?.claims?.sub\n      });\n      const review = await storage.createPerformanceReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating performance review:\", error);\n      res.status(500).json({ message: \"Failed to create performance review\" });\n    }\n  });\n\n  // Training Programs\n  app.get(\"/api/training-programs\", requireAuth, async (req, res) => {\n    try {\n      const programs = await storage.getTrainingPrograms();\n      res.json(programs);\n    } catch (error) {\n      console.error(\"Error fetching training programs:\", error);\n      res.status(500).json({ message: \"Failed to fetch training programs\" });\n    }\n  });\n\n  app.post(\"/api/training-programs\", requireAuth, async (req: any, res) => {\n    try {\n      const programData = insertTrainingProgramSchema.parse({\n        ...req.body,\n        createdBy: req.user?.claims?.sub\n      });\n      const program = await storage.createTrainingProgram(programData);\n      res.status(201).json(program);\n    } catch (error) {\n      console.error(\"Error creating training program:\", error);\n      res.status(500).json({ message: \"Failed to create training program\" });\n    }\n  });\n\n  // Employee Training Records\n  app.get(\"/api/employee-training\", requireAuth, async (req, res) => {\n    try {\n      const trainings = await storage.getEmployeeTraining();\n      res.json(trainings);\n    } catch (error) {\n      console.error(\"Error fetching employee training:\", error);\n      res.status(500).json({ message: \"Failed to fetch employee training\" });\n    }\n  });\n\n  app.post(\"/api/employee-training\", requireAuth, async (req: any, res) => {\n    try {\n      const trainingData = insertEmployeeTrainingSchema.parse({\n        ...req.body,\n        assignedBy: req.user?.claims?.sub\n      });\n      const training = await storage.createEmployeeTraining(trainingData);\n      res.status(201).json(training);\n    } catch (error) {\n      console.error(\"Error creating employee training:\", error);\n      res.status(500).json({ message: \"Failed to create employee training\" });\n    }\n  });\n\n  // Time Entries for employees\n  app.get(\"/api/time-entries\", requireAuth, async (req, res) => {\n    try {\n      const entries = await storage.getTimeEntries();\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching time entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch time entries\" });\n    }\n  });\n\n  app.post(\"/api/time-entries\", requireAuth, async (req: any, res) => {\n    try {\n      const timeEntryData = insertTimeEntrySchema.parse({\n        ...req.body,\n        approvedBy: req.user?.claims?.sub\n      });\n      const timeEntry = await storage.createTimeEntry(timeEntryData);\n      res.status(201).json(timeEntry);\n    } catch (error) {\n      console.error(\"Error creating time entry:\", error);\n      res.status(500).json({ message: \"Failed to create time entry\" });\n    }\n  });\n\n  // Candidate Invitations Routes\n  app.get(\"/api/candidate-invitations\", requireAuth, requireAdminRole, async (req, res) => {\n    try {\n      const invitations = await storage.getCandidateInvitations();\n      res.json(invitations);\n    } catch (error) {\n      console.error(\"Error fetching candidate invitations:\", error);\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n  app.post(\"/api/candidate-invitations\", requireAuth, requireAdminRole, async (req: any, res) => {\n    try {\n      const { randomUUID } = await import(\"crypto\");\n      \n      const invitationData = insertCandidateInvitationSchema.parse({\n        ...req.body,\n        sentBy: req.user?.claims?.sub,\n        invitationToken: randomUUID(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 jours\n      });\n      \n      const invitation = await storage.createCandidateInvitation(invitationData);\n      \n      // TODO: Envoyer l'email d'invitation ici\n      // await sendInvitationEmail(invitation);\n      \n      res.status(201).json(invitation);\n    } catch (error) {\n      console.error(\"Error creating candidate invitation:\", error);\n      res.status(500).json({ message: \"Failed to create invitation\" });\n    }\n  });\n\n  // Route publique pour accepter l'invitation candidat (via token)\n  app.get(\"/api/candidate-invitation/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n      const invitation = await storage.getCandidateInvitationByToken(token);\n      \n      if (!invitation) {\n        return res.status(404).json({ message: \"Invitation not found\" });\n      }\n      \n      if (new Date() > new Date(invitation.expiresAt)) {\n        return res.status(410).json({ message: \"Invitation expired\" });\n      }\n      \n      // Marquer l'invitation comme ouverte\n      await storage.updateCandidateInvitation(invitation.id, {\n        status: \"opened\"\n      });\n      \n      res.json(invitation);\n    } catch (error) {\n      console.error(\"Error validating invitation:\", error);\n      res.status(500).json({ message: \"Failed to validate invitation\" });\n    }\n  });\n\n  // Initialize default achievements on startup\n  try {\n    await storage.initializeDefaultAchievements();\n  } catch (error) {\n    console.log(\"Achievements initialization:\", error);\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41667},"client/src/components/SimpleJobCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, MapPin, Calendar } from \"lucide-react\";\n\ninterface Job {\n  id: number;\n  title: string;\n  company: string;\n  location: string;\n  description: string;\n  contractType: string;\n  experienceLevel?: string;\n  skills?: string[];\n  salary?: string;\n  createdAt: string;\n}\n\ninterface SimpleJobCardProps {\n  job: Job;\n  onApply?: (job: Job) => void;\n}\n\nexport function SimpleJobCard({ job, onApply }: SimpleJobCardProps) {\n  const handleApply = () => {\n    if (onApply) {\n      onApply(job);\n    } else {\n      window.location.href = \"/login\";\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow duration-200\" data-testid={`job-card-${job.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\" data-testid={`job-title-${job.id}`}>\n              {job.title}\n            </h3>\n            <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-300\">\n              <span className=\"flex items-center gap-1\">\n                <Building2 className=\"w-4 h-4\" />\n                {job.company}\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <MapPin className=\"w-4 h-4\" />\n                {job.location}\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <Calendar className=\"w-4 h-4\" />\n                {new Date(job.createdAt).toLocaleDateString('fr-FR')}\n              </span>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" data-testid={`contract-type-${job.id}`}>\n            {job.contractType}\n          </Badge>\n        </div>\n\n        <p className=\"text-gray-700 dark:text-gray-300 mb-4 line-clamp-3\" data-testid={`job-description-${job.id}`}>\n          {job.description}\n        </p>\n\n        {job.skills && job.skills.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {job.skills.map((skill, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {skill}\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {job.experienceLevel && <span>Niveau: {job.experienceLevel}</span>}\n            {job.salary && <span className=\"ml-4\">Salaire: {job.salary}</span>}\n          </div>\n          <Button onClick={handleApply} className=\"bg-blue-600 hover:bg-blue-700\" data-testid={`apply-button-${job.id}`}>\n            Postuler\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2925},"client/src/pages/SimpleLanding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { SimpleJobCard } from \"@/components/SimpleJobCard\";\n\ninterface Job {\n  id: number;\n  title: string;\n  company: string;\n  location: string;\n  description: string;\n  contractType: string;\n  experienceLevel?: string;\n  skills?: string[];\n  salary?: string;\n  createdAt: string;\n}\n\nexport default function SimpleLanding() {\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const loadJobs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log(\"🔄 Chargement des offres d'emploi...\");\n      \n      const response = await fetch('/api/jobs', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n      \n      console.log(\"📡 Statut de réponse:\", response.status);\n      console.log(\"📡 Headers de réponse:\", Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"✅ Données reçues:\", data);\n      console.log(\"📊 Nombre d'offres:\", data.length);\n      \n      setJobs(data);\n    } catch (err) {\n      console.error(\"❌ Erreur lors du chargement:\", err);\n      setError(err instanceof Error ? err.message : 'Erreur de chargement');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadJobs();\n  }, []);\n\n  const filteredJobs = jobs.filter(job =>\n    searchQuery === '' || \n    job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    job.company.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    job.location.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <svg className=\"w-8 h-8 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n              </svg>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">AeroRecrutement</h1>\n            </div>\n            <div className=\"flex space-x-4\">\n              <a href=\"/login\" className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n                Connexion\n              </a>\n              <a href=\"/login\" className=\"border border-blue-600 text-blue-600 px-4 py-2 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors\">\n                Inscription\n              </a>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            Trouvez votre emploi idéal\n          </h1>\n          <p className=\"text-xl md:text-2xl mb-8 opacity-90\">\n            Plateforme de recrutement spécialisée dans l'aéronautique\n          </p>\n          \n          {/* Barre de recherche */}\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"flex\">\n              <input\n                type=\"text\"\n                placeholder=\"Rechercher un emploi, une entreprise...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"flex-1 px-6 py-4 text-gray-900 rounded-l-lg text-lg focus:outline-none focus:ring-2 focus:ring-blue-300\"\n                data-testid=\"search-input\"\n              />\n              <button className=\"bg-yellow-500 text-gray-900 px-8 py-4 rounded-r-lg text-lg font-semibold hover:bg-yellow-400 transition-colors\" data-testid=\"search-button\">\n                Rechercher\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"bg-white dark:bg-gray-800 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-blue-600 mb-2\" data-testid=\"jobs-count\">{jobs.length}</div>\n              <div className=\"text-gray-600 dark:text-gray-300\">Offres d'emploi</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-blue-600 mb-2\">150+</div>\n              <div className=\"text-gray-600 dark:text-gray-300\">Entreprises partenaires</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-blue-600 mb-2\">98%</div>\n              <div className=\"text-gray-600 dark:text-gray-300\">Satisfaction clients</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Jobs Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\" data-testid=\"jobs-section-title\">\n          Offres d'emploi disponibles ({filteredJobs.length})\n        </h2>\n\n        {/* Loading */}\n        {loading && (\n          <div className=\"text-center py-12\" data-testid=\"loading-state\">\n            <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n            <p className=\"mt-4 text-gray-600 dark:text-gray-300\">Chargement des offres...</p>\n          </div>\n        )}\n\n        {/* Error */}\n        {error && (\n          <div className=\"text-center py-12\" data-testid=\"error-state\">\n            <div className=\"bg-red-100 dark:bg-red-900 border border-red-400 text-red-700 dark:text-red-300 px-6 py-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold mb-2\">Erreur de chargement</h3>\n              <p>{error}</p>\n              <button \n                onClick={loadJobs}\n                className=\"mt-4 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n                data-testid=\"retry-button\"\n              >\n                Réessayer\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* No Jobs */}\n        {!loading && !error && filteredJobs.length === 0 && jobs.length === 0 && (\n          <div className=\"text-center py-12\" data-testid=\"no-jobs-state\">\n            <p className=\"text-gray-600 dark:text-gray-300 text-lg\">Aucune offre d'emploi disponible.</p>\n          </div>\n        )}\n\n        {/* No Search Results */}\n        {!loading && !error && filteredJobs.length === 0 && jobs.length > 0 && (\n          <div className=\"text-center py-12\" data-testid=\"no-search-results\">\n            <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n              Aucune offre trouvée pour \"{searchQuery}\".\n            </p>\n            <button\n              onClick={() => setSearchQuery('')}\n              className=\"mt-4 text-blue-600 hover:text-blue-700 font-medium\"\n            >\n              Voir toutes les offres\n            </button>\n          </div>\n        )}\n\n        {/* Jobs List */}\n        {!loading && !error && filteredJobs.length > 0 && (\n          <div className=\"space-y-6\" data-testid=\"jobs-list\">\n            {filteredJobs.map((job) => (\n              <SimpleJobCard key={job.id} job={job} />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12 mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">AeroRecrutement</h3>\n              <p className=\"text-gray-400\">\n                Plateforme de recrutement spécialisée dans l'aéronautique en Guinée-Bissau.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Candidats</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Rechercher un emploi</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Créer un CV</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Conseils carrière</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Entreprises</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Publier une offre</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Rechercher des talents</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Solutions RH</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Centre d'aide</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Confidentialité</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"mt-8 pt-8 border-t border-gray-800 text-center text-gray-400\">\n            © 2024 AeroRecrutement. Tous droits réservés.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":10104},"client/src/lib/api.ts":{"content":"// API utility functions\nexport async function makeRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  const response = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!response.ok) {\n    const text = (await response.text()) || response.statusText;\n    throw new Error(`${response.status}: ${text}`);\n  }\n\n  return response;\n}\n\nexport async function apiPost(url: string, data: unknown): Promise<any> {\n  const response = await makeRequest(\"POST\", url, data);\n  return response.json();\n}\n\nexport async function apiPut(url: string, data: unknown): Promise<any> {\n  const response = await makeRequest(\"PUT\", url, data);\n  return response.json();\n}\n\nexport async function apiGet(url: string): Promise<any> {\n  const response = await makeRequest(\"GET\", url);\n  return response.json();\n}\n\nexport async function apiDelete(url: string): Promise<any> {\n  const response = await makeRequest(\"DELETE\", url);\n  return response.json();\n}","size_bytes":1096},"client/src/lib/logout.ts":{"content":"// Logout utility function\nexport async function handleLogout() {\n  try {\n    // Make logout request in background\n    await fetch('/api/logout', {\n      method: 'GET',\n      credentials: 'include'\n    });\n  } catch (error) {\n    console.log('Logout request completed');\n  }\n  \n  // Always redirect to home page regardless of API response\n  window.location.href = '/';\n}","size_bytes":370},"client/src/components/ErrorBoundary.tsx":{"content":"import React from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-background text-foreground\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-bold mb-4\">Quelque chose s'est mal passé</h2>\n            <p className=\"text-muted-foreground mb-4\">Une erreur inattendue s'est produite.</p>\n            <button \n              onClick={() => window.location.reload()} \n              className=\"bg-primary text-primary-foreground px-4 py-2 rounded\"\n            >\n              Recharger la page\n            </button>\n            {this.state.error && (\n              <details className=\"mt-4 text-left\">\n                <summary className=\"cursor-pointer\">Détails techniques</summary>\n                <pre className=\"mt-2 text-sm bg-muted p-2 rounded overflow-auto\">\n                  {this.state.error.message}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":1664},"client/src/lib/simpleToast.ts":{"content":"// Système de notification simple pour remplacer useToast\nexport type ToastType = \"info\" | \"success\" | \"error\" | \"warning\";\n\nexport interface SimpleToast {\n  title?: string;\n  description: string;\n  variant?: \"default\" | \"destructive\";\n}\n\n// Store simple pour les notifications\nlet toastContainer: HTMLElement | null = null;\n\nexport function showToast({ title, description, variant = \"default\" }: SimpleToast) {\n  // Créer le container s'il n'existe pas\n  if (!toastContainer) {\n    toastContainer = document.createElement('div');\n    toastContainer.id = 'simple-toast-container';\n    toastContainer.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      max-width: 400px;\n    `;\n    document.body.appendChild(toastContainer);\n  }\n\n  // Créer l'élément toast\n  const toast = document.createElement('div');\n  toast.style.cssText = `\n    margin-bottom: 10px;\n    padding: 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    background: ${variant === \"destructive\" ? \"#fee2e2\" : \"#f0f9ff\"};\n    border: 1px solid ${variant === \"destructive\" ? \"#fca5a5\" : \"#bae6fd\"};\n    color: ${variant === \"destructive\" ? \"#dc2626\" : \"#0c4a6e\"};\n    animation: slideIn 0.3s ease-out;\n  `;\n\n  const content = `\n    ${title ? `<div style=\"font-weight: bold; margin-bottom: 4px;\">${title}</div>` : ''}\n    <div>${description}</div>\n  `;\n  \n  toast.innerHTML = content;\n  toastContainer.appendChild(toast);\n\n  // Auto-suppression après 5 secondes\n  setTimeout(() => {\n    if (toast.parentNode) {\n      toast.style.animation = 'slideOut 0.3s ease-in';\n      setTimeout(() => {\n        if (toast.parentNode) {\n          toast.remove();\n        }\n      }, 300);\n    }\n  }, 5000);\n}\n\n// Hook simple pour remplacer useToast\nexport function useSimpleToast() {\n  return {\n    toast: showToast\n  };\n}\n\n// Ajouter les animations CSS\nif (typeof document !== 'undefined') {\n  const style = document.createElement('style');\n  style.textContent = `\n    @keyframes slideIn {\n      from {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n      to {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n    \n    @keyframes slideOut {\n      from {\n        transform: translateX(0);\n        opacity: 1;\n      }\n      to {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n    }\n  `;\n  document.head.appendChild(style);\n}","size_bytes":2412}},"version":1}